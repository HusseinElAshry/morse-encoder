
morse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d50  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001e6  00800060  00003d50  00003de4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800246  00800246  00003fca  2**0
                  ALLOC
  3 .stab         000034bc  00000000  00000000  00003fcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000140e  00000000  00000000  00007488  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00008896  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00008a56  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00008c6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000b27c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000c74a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000da58  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000dc38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000df3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e959  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e5       	ldi	r30, 0x50	; 80
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 34       	cpi	r26, 0x46	; 70
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a6 e4       	ldi	r26, 0x46	; 70
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 34       	cpi	r26, 0x4C	; 76
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <main>
      8a:	0c 94 a6 1e 	jmp	0x3d4c	; 0x3d4c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6a 1d 	jmp	0x3ad4	; 0x3ad4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e2       	ldi	r26, 0x20	; 32
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 86 1d 	jmp	0x3b0c	; 0x3b0c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 76 1d 	jmp	0x3aec	; 0x3aec <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 92 1d 	jmp	0x3b24	; 0x3b24 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 76 1d 	jmp	0x3aec	; 0x3aec <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 92 1d 	jmp	0x3b24	; 0x3b24 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6a 1d 	jmp	0x3ad4	; 0x3ad4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e2       	ldi	r24, 0x20	; 32
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 86 1d 	jmp	0x3b0c	; 0x3b0c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 72 1d 	jmp	0x3ae4	; 0x3ae4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e2       	ldi	r22, 0x20	; 32
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 8e 1d 	jmp	0x3b1c	; 0x3b1c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 76 1d 	jmp	0x3aec	; 0x3aec <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 92 1d 	jmp	0x3b24	; 0x3b24 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 76 1d 	jmp	0x3aec	; 0x3aec <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 92 1d 	jmp	0x3b24	; 0x3b24 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 76 1d 	jmp	0x3aec	; 0x3aec <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 92 1d 	jmp	0x3b24	; 0x3b24 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 73 1d 	jmp	0x3ae6	; 0x3ae6 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 8f 1d 	jmp	0x3b1e	; 0x3b1e <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 7a 1d 	jmp	0x3af4	; 0x3af4 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 96 1d 	jmp	0x3b2c	; 0x3b2c <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 72 1d 	jmp	0x3ae4	; 0x3ae4 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 8e 1d 	jmp	0x3b1c	; 0x3b1c <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 5d       	subi	r30, 0xD8	; 216
     b86:	fe 4f       	sbci	r31, 0xFE	; 254
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <MC_EEPROM_vidWrite>:
#include "../../LIB/math/datatypes.h"
#include "../../LIB/math/bitmask.h"
#include "avr/delay.h"
#include "./eeprom.h"

void MC_EEPROM_vidWrite(u16 address , u8 data){
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <MC_EEPROM_vidWrite+0x6>
     ef0:	0f 92       	push	r0
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
     ef6:	9a 83       	std	Y+2, r25	; 0x02
     ef8:	89 83       	std	Y+1, r24	; 0x01
     efa:	6b 83       	std	Y+3, r22	; 0x03
	while(EECR & (1<<EECR_EEWE));
     efc:	ec e3       	ldi	r30, 0x3C	; 60
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	88 2f       	mov	r24, r24
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	82 70       	andi	r24, 0x02	; 2
     f08:	90 70       	andi	r25, 0x00	; 0
     f0a:	00 97       	sbiw	r24, 0x00	; 0
     f0c:	b9 f7       	brne	.-18     	; 0xefc <MC_EEPROM_vidWrite+0x12>
	EEARL = (address & 0x00FF);
     f0e:	ee e3       	ldi	r30, 0x3E	; 62
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	80 83       	st	Z, r24
	EEARH = (address & 0x0300)>>8;
     f16:	ef e3       	ldi	r30, 0x3F	; 63
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
     f1c:	9a 81       	ldd	r25, Y+2	; 0x02
     f1e:	80 70       	andi	r24, 0x00	; 0
     f20:	93 70       	andi	r25, 0x03	; 3
     f22:	89 2f       	mov	r24, r25
     f24:	99 27       	eor	r25, r25
     f26:	80 83       	st	Z, r24
	EEDR  =	data;
     f28:	ed e3       	ldi	r30, 0x3D	; 61
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	8b 81       	ldd	r24, Y+3	; 0x03
     f2e:	80 83       	st	Z, r24
	EECR =(1<<EECR_EEMWE);
     f30:	ec e3       	ldi	r30, 0x3C	; 60
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	84 e0       	ldi	r24, 0x04	; 4
     f36:	80 83       	st	Z, r24
	EECR =(1<<EECR_EEWE);
     f38:	ec e3       	ldi	r30, 0x3C	; 60
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	82 e0       	ldi	r24, 0x02	; 2
     f3e:	80 83       	st	Z, r24

}
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	08 95       	ret

00000f4c <MC_EEPROM_vidWriteString>:
void MC_EEPROM_vidWriteString(u16 address ,u8*data ){
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	00 d0       	rcall	.+0      	; 0xf52 <MC_EEPROM_vidWriteString+0x6>
     f52:	00 d0       	rcall	.+0      	; 0xf54 <MC_EEPROM_vidWriteString+0x8>
     f54:	0f 92       	push	r0
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	9b 83       	std	Y+3, r25	; 0x03
     f5c:	8a 83       	std	Y+2, r24	; 0x02
     f5e:	7d 83       	std	Y+5, r23	; 0x05
     f60:	6c 83       	std	Y+4, r22	; 0x04
	u8 i= 0;
     f62:	19 82       	std	Y+1, r1	; 0x01
     f64:	18 c0       	rjmp	.+48     	; 0xf96 <MC_EEPROM_vidWriteString+0x4a>
	while(data[i]){
		MC_EEPROM_vidWrite( (address+i) , data[i]);
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	8a 81       	ldd	r24, Y+2	; 0x02
     f6e:	9b 81       	ldd	r25, Y+3	; 0x03
     f70:	a9 01       	movw	r20, r18
     f72:	48 0f       	add	r20, r24
     f74:	59 1f       	adc	r21, r25
     f76:	89 81       	ldd	r24, Y+1	; 0x01
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	8c 81       	ldd	r24, Y+4	; 0x04
     f7e:	9d 81       	ldd	r25, Y+5	; 0x05
     f80:	fc 01       	movw	r30, r24
     f82:	e2 0f       	add	r30, r18
     f84:	f3 1f       	adc	r31, r19
     f86:	20 81       	ld	r18, Z
     f88:	ca 01       	movw	r24, r20
     f8a:	62 2f       	mov	r22, r18
     f8c:	0e 94 75 07 	call	0xeea	; 0xeea <MC_EEPROM_vidWrite>
		i++;
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	8f 5f       	subi	r24, 0xFF	; 255
     f94:	89 83       	std	Y+1, r24	; 0x01
	EECR =(1<<EECR_EEWE);

}
void MC_EEPROM_vidWriteString(u16 address ,u8*data ){
	u8 i= 0;
	while(data[i]){
     f96:	89 81       	ldd	r24, Y+1	; 0x01
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	8c 81       	ldd	r24, Y+4	; 0x04
     f9e:	9d 81       	ldd	r25, Y+5	; 0x05
     fa0:	fc 01       	movw	r30, r24
     fa2:	e2 0f       	add	r30, r18
     fa4:	f3 1f       	adc	r31, r19
     fa6:	80 81       	ld	r24, Z
     fa8:	88 23       	and	r24, r24
     faa:	e9 f6       	brne	.-70     	; 0xf66 <MC_EEPROM_vidWriteString+0x1a>
		MC_EEPROM_vidWrite( (address+i) , data[i]);
		i++;
	}
}
     fac:	0f 90       	pop	r0
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	cf 91       	pop	r28
     fb8:	df 91       	pop	r29
     fba:	08 95       	ret

00000fbc <MC_EEPROM_vidRead>:
void  MC_EEPROM_vidRead(u16 address,u8 size,u8 *dataPtr){
     fbc:	0f 93       	push	r16
     fbe:	1f 93       	push	r17
     fc0:	df 93       	push	r29
     fc2:	cf 93       	push	r28
     fc4:	00 d0       	rcall	.+0      	; 0xfc6 <MC_EEPROM_vidRead+0xa>
     fc6:	00 d0       	rcall	.+0      	; 0xfc8 <MC_EEPROM_vidRead+0xc>
     fc8:	00 d0       	rcall	.+0      	; 0xfca <MC_EEPROM_vidRead+0xe>
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
     fce:	9b 83       	std	Y+3, r25	; 0x03
     fd0:	8a 83       	std	Y+2, r24	; 0x02
     fd2:	6c 83       	std	Y+4, r22	; 0x04
     fd4:	5e 83       	std	Y+6, r21	; 0x06
     fd6:	4d 83       	std	Y+5, r20	; 0x05
	u8 counter = 0;
     fd8:	19 82       	std	Y+1, r1	; 0x01
     fda:	16 c0       	rjmp	.+44     	; 0x1008 <MC_EEPROM_vidRead+0x4c>
	while( counter<size  && dataPtr[counter-1] != 0xff){
		dataPtr[counter] = MC_EEPROM_u8Read(  (address+counter) );
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	8d 81       	ldd	r24, Y+5	; 0x05
     fe4:	9e 81       	ldd	r25, Y+6	; 0x06
     fe6:	8c 01       	movw	r16, r24
     fe8:	02 0f       	add	r16, r18
     fea:	13 1f       	adc	r17, r19
     fec:	89 81       	ldd	r24, Y+1	; 0x01
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	9b 81       	ldd	r25, Y+3	; 0x03
     ff6:	82 0f       	add	r24, r18
     ff8:	93 1f       	adc	r25, r19
     ffa:	0e 94 2d 08 	call	0x105a	; 0x105a <MC_EEPROM_u8Read>
     ffe:	f8 01       	movw	r30, r16
    1000:	80 83       	st	Z, r24
		counter++;
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	8f 5f       	subi	r24, 0xFF	; 255
    1006:	89 83       	std	Y+1, r24	; 0x01
		i++;
	}
}
void  MC_EEPROM_vidRead(u16 address,u8 size,u8 *dataPtr){
	u8 counter = 0;
	while( counter<size  && dataPtr[counter-1] != 0xff){
    1008:	99 81       	ldd	r25, Y+1	; 0x01
    100a:	8c 81       	ldd	r24, Y+4	; 0x04
    100c:	98 17       	cp	r25, r24
    100e:	70 f4       	brcc	.+28     	; 0x102c <MC_EEPROM_vidRead+0x70>
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	88 2f       	mov	r24, r24
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	9c 01       	movw	r18, r24
    1018:	21 50       	subi	r18, 0x01	; 1
    101a:	30 40       	sbci	r19, 0x00	; 0
    101c:	8d 81       	ldd	r24, Y+5	; 0x05
    101e:	9e 81       	ldd	r25, Y+6	; 0x06
    1020:	fc 01       	movw	r30, r24
    1022:	e2 0f       	add	r30, r18
    1024:	f3 1f       	adc	r31, r19
    1026:	80 81       	ld	r24, Z
    1028:	8f 3f       	cpi	r24, 0xFF	; 255
    102a:	c1 f6       	brne	.-80     	; 0xfdc <MC_EEPROM_vidRead+0x20>
		dataPtr[counter] = MC_EEPROM_u8Read(  (address+counter) );
		counter++;
	}
	dataPtr[--counter] = '\0';
    102c:	89 81       	ldd	r24, Y+1	; 0x01
    102e:	81 50       	subi	r24, 0x01	; 1
    1030:	89 83       	std	Y+1, r24	; 0x01
    1032:	89 81       	ldd	r24, Y+1	; 0x01
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	8d 81       	ldd	r24, Y+5	; 0x05
    103a:	9e 81       	ldd	r25, Y+6	; 0x06
    103c:	fc 01       	movw	r30, r24
    103e:	e2 0f       	add	r30, r18
    1040:	f3 1f       	adc	r31, r19
    1042:	10 82       	st	Z, r1
}
    1044:	26 96       	adiw	r28, 0x06	; 6
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	f8 94       	cli
    104a:	de bf       	out	0x3e, r29	; 62
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	cd bf       	out	0x3d, r28	; 61
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	1f 91       	pop	r17
    1056:	0f 91       	pop	r16
    1058:	08 95       	ret

0000105a <MC_EEPROM_u8Read>:
u8   MC_EEPROM_u8Read(u16 address){
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	00 d0       	rcall	.+0      	; 0x1060 <MC_EEPROM_u8Read+0x6>
    1060:	0f 92       	push	r0
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	9b 83       	std	Y+3, r25	; 0x03
    1068:	8a 83       	std	Y+2, r24	; 0x02
	while(EECR & (1<<EECR_EEWE));
    106a:	ec e3       	ldi	r30, 0x3C	; 60
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	88 2f       	mov	r24, r24
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	82 70       	andi	r24, 0x02	; 2
    1076:	90 70       	andi	r25, 0x00	; 0
    1078:	00 97       	sbiw	r24, 0x00	; 0
    107a:	b9 f7       	brne	.-18     	; 0x106a <MC_EEPROM_u8Read+0x10>
	u8 data;
	EEARL = (address & 0x00FF);
    107c:	ee e3       	ldi	r30, 0x3E	; 62
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	80 83       	st	Z, r24
	EEARH = (address & 0x0300)>>8;
    1084:	ef e3       	ldi	r30, 0x3F	; 63
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	9b 81       	ldd	r25, Y+3	; 0x03
    108c:	80 70       	andi	r24, 0x00	; 0
    108e:	93 70       	andi	r25, 0x03	; 3
    1090:	89 2f       	mov	r24, r25
    1092:	99 27       	eor	r25, r25
    1094:	80 83       	st	Z, r24
	EECR  |= 1<< EECR_EERE;
    1096:	ac e3       	ldi	r26, 0x3C	; 60
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	ec e3       	ldi	r30, 0x3C	; 60
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	81 60       	ori	r24, 0x01	; 1
    10a2:	8c 93       	st	X, r24
	data = EEDR;
    10a4:	ed e3       	ldi	r30, 0x3D	; 61
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	89 83       	std	Y+1, r24	; 0x01
	return data;
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	cf 91       	pop	r28
    10b6:	df 91       	pop	r29
    10b8:	08 95       	ret

000010ba <MC_EEPROM_RESET>:
void MC_EEPROM_RESET(){
    10ba:	df 93       	push	r29
    10bc:	cf 93       	push	r28
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <MC_EEPROM_RESET+0x6>
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
	u16 i =0;
    10c4:	1a 82       	std	Y+2, r1	; 0x02
    10c6:	19 82       	std	Y+1, r1	; 0x01
    10c8:	0a c0       	rjmp	.+20     	; 0x10de <MC_EEPROM_RESET+0x24>
	while(i<1024){
		MC_EEPROM_vidWrite(i,0xff);
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
    10cc:	9a 81       	ldd	r25, Y+2	; 0x02
    10ce:	6f ef       	ldi	r22, 0xFF	; 255
    10d0:	0e 94 75 07 	call	0xeea	; 0xeea <MC_EEPROM_vidWrite>
		i++;
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	9a 81       	ldd	r25, Y+2	; 0x02
    10d8:	01 96       	adiw	r24, 0x01	; 1
    10da:	9a 83       	std	Y+2, r25	; 0x02
    10dc:	89 83       	std	Y+1, r24	; 0x01
	data = EEDR;
	return data;
}
void MC_EEPROM_RESET(){
	u16 i =0;
	while(i<1024){
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	9a 81       	ldd	r25, Y+2	; 0x02
    10e2:	24 e0       	ldi	r18, 0x04	; 4
    10e4:	80 30       	cpi	r24, 0x00	; 0
    10e6:	92 07       	cpc	r25, r18
    10e8:	80 f3       	brcs	.-32     	; 0x10ca <MC_EEPROM_RESET+0x10>
		MC_EEPROM_vidWrite(i,0xff);
		i++;
	}
}
    10ea:	0f 90       	pop	r0
    10ec:	0f 90       	pop	r0
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	08 95       	ret

000010f4 <DIO_VIDSetPinDirection>:
 * Author: 				ASHRY
 */
#include "../../LIB/math/bitmask.h"
#include "../../LIB/math/datatypes.h"
#include "./dio.h"
void DIO_VIDSetPinDirection(u8 cpy_u8PortNumber,u8 cpy_u8PinNumber,u8 cpy_u8PinDirection){
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	29 97       	sbiw	r28, 0x09	; 9
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	f8 94       	cli
    1102:	de bf       	out	0x3e, r29	; 62
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	cd bf       	out	0x3d, r28	; 61
    1108:	89 83       	std	Y+1, r24	; 0x01
    110a:	6a 83       	std	Y+2, r22	; 0x02
    110c:	4b 83       	std	Y+3, r20	; 0x03
	switch(cpy_u8PinDirection){
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	39 87       	std	Y+9, r19	; 0x09
    1116:	28 87       	std	Y+8, r18	; 0x08
    1118:	88 85       	ldd	r24, Y+8	; 0x08
    111a:	99 85       	ldd	r25, Y+9	; 0x09
    111c:	00 97       	sbiw	r24, 0x00	; 0
    111e:	09 f4       	brne	.+2      	; 0x1122 <DIO_VIDSetPinDirection+0x2e>
    1120:	77 c0       	rjmp	.+238    	; 0x1210 <DIO_VIDSetPinDirection+0x11c>
    1122:	28 85       	ldd	r18, Y+8	; 0x08
    1124:	39 85       	ldd	r19, Y+9	; 0x09
    1126:	21 30       	cpi	r18, 0x01	; 1
    1128:	31 05       	cpc	r19, r1
    112a:	09 f0       	breq	.+2      	; 0x112e <DIO_VIDSetPinDirection+0x3a>
    112c:	e5 c0       	rjmp	.+458    	; 0x12f8 <DIO_VIDSetPinDirection+0x204>
	case OUTPUT:
		switch (cpy_u8PortNumber){
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	3f 83       	std	Y+7, r19	; 0x07
    1136:	2e 83       	std	Y+6, r18	; 0x06
    1138:	8e 81       	ldd	r24, Y+6	; 0x06
    113a:	9f 81       	ldd	r25, Y+7	; 0x07
    113c:	82 34       	cpi	r24, 0x42	; 66
    113e:	91 05       	cpc	r25, r1
    1140:	59 f1       	breq	.+86     	; 0x1198 <DIO_VIDSetPinDirection+0xa4>
    1142:	2e 81       	ldd	r18, Y+6	; 0x06
    1144:	3f 81       	ldd	r19, Y+7	; 0x07
    1146:	23 34       	cpi	r18, 0x43	; 67
    1148:	31 05       	cpc	r19, r1
    114a:	34 f4       	brge	.+12     	; 0x1158 <DIO_VIDSetPinDirection+0x64>
    114c:	8e 81       	ldd	r24, Y+6	; 0x06
    114e:	9f 81       	ldd	r25, Y+7	; 0x07
    1150:	81 34       	cpi	r24, 0x41	; 65
    1152:	91 05       	cpc	r25, r1
    1154:	69 f0       	breq	.+26     	; 0x1170 <DIO_VIDSetPinDirection+0x7c>
    1156:	d0 c0       	rjmp	.+416    	; 0x12f8 <DIO_VIDSetPinDirection+0x204>
    1158:	2e 81       	ldd	r18, Y+6	; 0x06
    115a:	3f 81       	ldd	r19, Y+7	; 0x07
    115c:	24 34       	cpi	r18, 0x44	; 68
    115e:	31 05       	cpc	r19, r1
    1160:	09 f4       	brne	.+2      	; 0x1164 <DIO_VIDSetPinDirection+0x70>
    1162:	42 c0       	rjmp	.+132    	; 0x11e8 <DIO_VIDSetPinDirection+0xf4>
    1164:	8e 81       	ldd	r24, Y+6	; 0x06
    1166:	9f 81       	ldd	r25, Y+7	; 0x07
    1168:	83 36       	cpi	r24, 0x63	; 99
    116a:	91 05       	cpc	r25, r1
    116c:	49 f1       	breq	.+82     	; 0x11c0 <DIO_VIDSetPinDirection+0xcc>
    116e:	c4 c0       	rjmp	.+392    	; 0x12f8 <DIO_VIDSetPinDirection+0x204>
		case PORT_A:
			setBit(DDRA,cpy_u8PinNumber);
    1170:	aa e3       	ldi	r26, 0x3A	; 58
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	ea e3       	ldi	r30, 0x3A	; 58
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	48 2f       	mov	r20, r24
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	02 2e       	mov	r0, r18
    1188:	02 c0       	rjmp	.+4      	; 0x118e <DIO_VIDSetPinDirection+0x9a>
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	0a 94       	dec	r0
    1190:	e2 f7       	brpl	.-8      	; 0x118a <DIO_VIDSetPinDirection+0x96>
    1192:	84 2b       	or	r24, r20
    1194:	8c 93       	st	X, r24
    1196:	b0 c0       	rjmp	.+352    	; 0x12f8 <DIO_VIDSetPinDirection+0x204>
			break;
		case PORT_B:
			setBit(DDRB,cpy_u8PinNumber);
    1198:	a7 e3       	ldi	r26, 0x37	; 55
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e7 e3       	ldi	r30, 0x37	; 55
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	48 2f       	mov	r20, r24
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	02 2e       	mov	r0, r18
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <DIO_VIDSetPinDirection+0xc2>
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	0a 94       	dec	r0
    11b8:	e2 f7       	brpl	.-8      	; 0x11b2 <DIO_VIDSetPinDirection+0xbe>
    11ba:	84 2b       	or	r24, r20
    11bc:	8c 93       	st	X, r24
    11be:	9c c0       	rjmp	.+312    	; 0x12f8 <DIO_VIDSetPinDirection+0x204>
			break;
		case PORT_C:
			setBit(DDRC,cpy_u8PinNumber);
    11c0:	a4 e3       	ldi	r26, 0x34	; 52
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	e4 e3       	ldi	r30, 0x34	; 52
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	48 2f       	mov	r20, r24
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	02 2e       	mov	r0, r18
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <DIO_VIDSetPinDirection+0xea>
    11da:	88 0f       	add	r24, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	0a 94       	dec	r0
    11e0:	e2 f7       	brpl	.-8      	; 0x11da <DIO_VIDSetPinDirection+0xe6>
    11e2:	84 2b       	or	r24, r20
    11e4:	8c 93       	st	X, r24
    11e6:	88 c0       	rjmp	.+272    	; 0x12f8 <DIO_VIDSetPinDirection+0x204>
			break;
		case PORT_D:
			setBit(DDRD,cpy_u8PinNumber);
    11e8:	a1 e3       	ldi	r26, 0x31	; 49
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	e1 e3       	ldi	r30, 0x31	; 49
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	48 2f       	mov	r20, r24
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	02 2e       	mov	r0, r18
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <DIO_VIDSetPinDirection+0x112>
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	0a 94       	dec	r0
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <DIO_VIDSetPinDirection+0x10e>
    120a:	84 2b       	or	r24, r20
    120c:	8c 93       	st	X, r24
    120e:	74 c0       	rjmp	.+232    	; 0x12f8 <DIO_VIDSetPinDirection+0x204>
		default:
			break;
		}
		break;
		case INPUT:
			switch (cpy_u8PortNumber){
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	3d 83       	std	Y+5, r19	; 0x05
    1218:	2c 83       	std	Y+4, r18	; 0x04
    121a:	8c 81       	ldd	r24, Y+4	; 0x04
    121c:	9d 81       	ldd	r25, Y+5	; 0x05
    121e:	82 34       	cpi	r24, 0x42	; 66
    1220:	91 05       	cpc	r25, r1
    1222:	61 f1       	breq	.+88     	; 0x127c <DIO_VIDSetPinDirection+0x188>
    1224:	2c 81       	ldd	r18, Y+4	; 0x04
    1226:	3d 81       	ldd	r19, Y+5	; 0x05
    1228:	23 34       	cpi	r18, 0x43	; 67
    122a:	31 05       	cpc	r19, r1
    122c:	34 f4       	brge	.+12     	; 0x123a <DIO_VIDSetPinDirection+0x146>
    122e:	8c 81       	ldd	r24, Y+4	; 0x04
    1230:	9d 81       	ldd	r25, Y+5	; 0x05
    1232:	81 34       	cpi	r24, 0x41	; 65
    1234:	91 05       	cpc	r25, r1
    1236:	69 f0       	breq	.+26     	; 0x1252 <DIO_VIDSetPinDirection+0x15e>
    1238:	5f c0       	rjmp	.+190    	; 0x12f8 <DIO_VIDSetPinDirection+0x204>
    123a:	2c 81       	ldd	r18, Y+4	; 0x04
    123c:	3d 81       	ldd	r19, Y+5	; 0x05
    123e:	24 34       	cpi	r18, 0x44	; 68
    1240:	31 05       	cpc	r19, r1
    1242:	09 f4       	brne	.+2      	; 0x1246 <DIO_VIDSetPinDirection+0x152>
    1244:	45 c0       	rjmp	.+138    	; 0x12d0 <DIO_VIDSetPinDirection+0x1dc>
    1246:	8c 81       	ldd	r24, Y+4	; 0x04
    1248:	9d 81       	ldd	r25, Y+5	; 0x05
    124a:	83 36       	cpi	r24, 0x63	; 99
    124c:	91 05       	cpc	r25, r1
    124e:	59 f1       	breq	.+86     	; 0x12a6 <DIO_VIDSetPinDirection+0x1b2>
    1250:	53 c0       	rjmp	.+166    	; 0x12f8 <DIO_VIDSetPinDirection+0x204>
			case PORT_A:
				clearBit(DDRA,cpy_u8PinNumber);
    1252:	aa e3       	ldi	r26, 0x3A	; 58
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	ea e3       	ldi	r30, 0x3A	; 58
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	48 2f       	mov	r20, r24
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	02 2e       	mov	r0, r18
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <DIO_VIDSetPinDirection+0x17c>
    126c:	88 0f       	add	r24, r24
    126e:	99 1f       	adc	r25, r25
    1270:	0a 94       	dec	r0
    1272:	e2 f7       	brpl	.-8      	; 0x126c <DIO_VIDSetPinDirection+0x178>
    1274:	80 95       	com	r24
    1276:	84 23       	and	r24, r20
    1278:	8c 93       	st	X, r24
    127a:	3e c0       	rjmp	.+124    	; 0x12f8 <DIO_VIDSetPinDirection+0x204>
				break;
			case PORT_B:
				clearBit(DDRB,cpy_u8PinNumber);
    127c:	a7 e3       	ldi	r26, 0x37	; 55
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e7 e3       	ldi	r30, 0x37	; 55
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	48 2f       	mov	r20, r24
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	02 2e       	mov	r0, r18
    1294:	02 c0       	rjmp	.+4      	; 0x129a <DIO_VIDSetPinDirection+0x1a6>
    1296:	88 0f       	add	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	0a 94       	dec	r0
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <DIO_VIDSetPinDirection+0x1a2>
    129e:	80 95       	com	r24
    12a0:	84 23       	and	r24, r20
    12a2:	8c 93       	st	X, r24
    12a4:	29 c0       	rjmp	.+82     	; 0x12f8 <DIO_VIDSetPinDirection+0x204>
				break;
			case PORT_C:
				clearBit(DDRC,cpy_u8PinNumber);
    12a6:	a4 e3       	ldi	r26, 0x34	; 52
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e4 e3       	ldi	r30, 0x34	; 52
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	48 2f       	mov	r20, r24
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	02 2e       	mov	r0, r18
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <DIO_VIDSetPinDirection+0x1d0>
    12c0:	88 0f       	add	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	0a 94       	dec	r0
    12c6:	e2 f7       	brpl	.-8      	; 0x12c0 <DIO_VIDSetPinDirection+0x1cc>
    12c8:	80 95       	com	r24
    12ca:	84 23       	and	r24, r20
    12cc:	8c 93       	st	X, r24
    12ce:	14 c0       	rjmp	.+40     	; 0x12f8 <DIO_VIDSetPinDirection+0x204>
				break;
			case PORT_D:
				clearBit(DDRD,cpy_u8PinNumber);
    12d0:	a1 e3       	ldi	r26, 0x31	; 49
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e1 e3       	ldi	r30, 0x31	; 49
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	48 2f       	mov	r20, r24
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	02 2e       	mov	r0, r18
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <DIO_VIDSetPinDirection+0x1fa>
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	0a 94       	dec	r0
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <DIO_VIDSetPinDirection+0x1f6>
    12f2:	80 95       	com	r24
    12f4:	84 23       	and	r24, r20
    12f6:	8c 93       	st	X, r24
			}
			break;
			default:
				break;
	}
}
    12f8:	29 96       	adiw	r28, 0x09	; 9
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	f8 94       	cli
    12fe:	de bf       	out	0x3e, r29	; 62
    1300:	0f be       	out	0x3f, r0	; 63
    1302:	cd bf       	out	0x3d, r28	; 61
    1304:	cf 91       	pop	r28
    1306:	df 91       	pop	r29
    1308:	08 95       	ret

0000130a <DIO_VIDSetPinValue>:
void DIO_VIDSetPinValue(u8 cpy_u8PortNumber,u8 cpy_u8PinNumber,u8 cpy_u8PinValue){
    130a:	df 93       	push	r29
    130c:	cf 93       	push	r28
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	29 97       	sbiw	r28, 0x09	; 9
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	f8 94       	cli
    1318:	de bf       	out	0x3e, r29	; 62
    131a:	0f be       	out	0x3f, r0	; 63
    131c:	cd bf       	out	0x3d, r28	; 61
    131e:	89 83       	std	Y+1, r24	; 0x01
    1320:	6a 83       	std	Y+2, r22	; 0x02
    1322:	4b 83       	std	Y+3, r20	; 0x03
	switch(cpy_u8PinValue){
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	28 2f       	mov	r18, r24
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	39 87       	std	Y+9, r19	; 0x09
    132c:	28 87       	std	Y+8, r18	; 0x08
    132e:	88 85       	ldd	r24, Y+8	; 0x08
    1330:	99 85       	ldd	r25, Y+9	; 0x09
    1332:	00 97       	sbiw	r24, 0x00	; 0
    1334:	09 f4       	brne	.+2      	; 0x1338 <DIO_VIDSetPinValue+0x2e>
    1336:	77 c0       	rjmp	.+238    	; 0x1426 <DIO_VIDSetPinValue+0x11c>
    1338:	28 85       	ldd	r18, Y+8	; 0x08
    133a:	39 85       	ldd	r19, Y+9	; 0x09
    133c:	21 30       	cpi	r18, 0x01	; 1
    133e:	31 05       	cpc	r19, r1
    1340:	09 f0       	breq	.+2      	; 0x1344 <DIO_VIDSetPinValue+0x3a>
    1342:	e5 c0       	rjmp	.+458    	; 0x150e <DIO_VIDSetPinValue+0x204>
	case HIGH :
		switch (cpy_u8PortNumber){
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	3f 83       	std	Y+7, r19	; 0x07
    134c:	2e 83       	std	Y+6, r18	; 0x06
    134e:	8e 81       	ldd	r24, Y+6	; 0x06
    1350:	9f 81       	ldd	r25, Y+7	; 0x07
    1352:	82 34       	cpi	r24, 0x42	; 66
    1354:	91 05       	cpc	r25, r1
    1356:	59 f1       	breq	.+86     	; 0x13ae <DIO_VIDSetPinValue+0xa4>
    1358:	2e 81       	ldd	r18, Y+6	; 0x06
    135a:	3f 81       	ldd	r19, Y+7	; 0x07
    135c:	23 34       	cpi	r18, 0x43	; 67
    135e:	31 05       	cpc	r19, r1
    1360:	34 f4       	brge	.+12     	; 0x136e <DIO_VIDSetPinValue+0x64>
    1362:	8e 81       	ldd	r24, Y+6	; 0x06
    1364:	9f 81       	ldd	r25, Y+7	; 0x07
    1366:	81 34       	cpi	r24, 0x41	; 65
    1368:	91 05       	cpc	r25, r1
    136a:	69 f0       	breq	.+26     	; 0x1386 <DIO_VIDSetPinValue+0x7c>
    136c:	d0 c0       	rjmp	.+416    	; 0x150e <DIO_VIDSetPinValue+0x204>
    136e:	2e 81       	ldd	r18, Y+6	; 0x06
    1370:	3f 81       	ldd	r19, Y+7	; 0x07
    1372:	24 34       	cpi	r18, 0x44	; 68
    1374:	31 05       	cpc	r19, r1
    1376:	09 f4       	brne	.+2      	; 0x137a <DIO_VIDSetPinValue+0x70>
    1378:	42 c0       	rjmp	.+132    	; 0x13fe <DIO_VIDSetPinValue+0xf4>
    137a:	8e 81       	ldd	r24, Y+6	; 0x06
    137c:	9f 81       	ldd	r25, Y+7	; 0x07
    137e:	83 36       	cpi	r24, 0x63	; 99
    1380:	91 05       	cpc	r25, r1
    1382:	49 f1       	breq	.+82     	; 0x13d6 <DIO_VIDSetPinValue+0xcc>
    1384:	c4 c0       	rjmp	.+392    	; 0x150e <DIO_VIDSetPinValue+0x204>
		case PORT_A:
			setBit(PORTA,cpy_u8PinNumber);
    1386:	ab e3       	ldi	r26, 0x3B	; 59
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	eb e3       	ldi	r30, 0x3B	; 59
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	48 2f       	mov	r20, r24
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	02 2e       	mov	r0, r18
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <DIO_VIDSetPinValue+0x9a>
    13a0:	88 0f       	add	r24, r24
    13a2:	99 1f       	adc	r25, r25
    13a4:	0a 94       	dec	r0
    13a6:	e2 f7       	brpl	.-8      	; 0x13a0 <DIO_VIDSetPinValue+0x96>
    13a8:	84 2b       	or	r24, r20
    13aa:	8c 93       	st	X, r24
    13ac:	b0 c0       	rjmp	.+352    	; 0x150e <DIO_VIDSetPinValue+0x204>
			break;
		case PORT_B:
			setBit(PORTB,cpy_u8PinNumber);
    13ae:	a8 e3       	ldi	r26, 0x38	; 56
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	e8 e3       	ldi	r30, 0x38	; 56
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	48 2f       	mov	r20, r24
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	02 2e       	mov	r0, r18
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <DIO_VIDSetPinValue+0xc2>
    13c8:	88 0f       	add	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	0a 94       	dec	r0
    13ce:	e2 f7       	brpl	.-8      	; 0x13c8 <DIO_VIDSetPinValue+0xbe>
    13d0:	84 2b       	or	r24, r20
    13d2:	8c 93       	st	X, r24
    13d4:	9c c0       	rjmp	.+312    	; 0x150e <DIO_VIDSetPinValue+0x204>
			break;
		case PORT_C:
			setBit(PORTC,cpy_u8PinNumber);
    13d6:	a5 e3       	ldi	r26, 0x35	; 53
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	e5 e3       	ldi	r30, 0x35	; 53
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	48 2f       	mov	r20, r24
    13e2:	8a 81       	ldd	r24, Y+2	; 0x02
    13e4:	28 2f       	mov	r18, r24
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	02 2e       	mov	r0, r18
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <DIO_VIDSetPinValue+0xea>
    13f0:	88 0f       	add	r24, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	0a 94       	dec	r0
    13f6:	e2 f7       	brpl	.-8      	; 0x13f0 <DIO_VIDSetPinValue+0xe6>
    13f8:	84 2b       	or	r24, r20
    13fa:	8c 93       	st	X, r24
    13fc:	88 c0       	rjmp	.+272    	; 0x150e <DIO_VIDSetPinValue+0x204>
			break;
		case PORT_D:
			setBit(PORTD,cpy_u8PinNumber);
    13fe:	a2 e3       	ldi	r26, 0x32	; 50
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	e2 e3       	ldi	r30, 0x32	; 50
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	48 2f       	mov	r20, r24
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	02 2e       	mov	r0, r18
    1416:	02 c0       	rjmp	.+4      	; 0x141c <DIO_VIDSetPinValue+0x112>
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	0a 94       	dec	r0
    141e:	e2 f7       	brpl	.-8      	; 0x1418 <DIO_VIDSetPinValue+0x10e>
    1420:	84 2b       	or	r24, r20
    1422:	8c 93       	st	X, r24
    1424:	74 c0       	rjmp	.+232    	; 0x150e <DIO_VIDSetPinValue+0x204>
		default:
			break;
		}
		break;
		case LOW :
			switch (cpy_u8PortNumber){
    1426:	89 81       	ldd	r24, Y+1	; 0x01
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	3d 83       	std	Y+5, r19	; 0x05
    142e:	2c 83       	std	Y+4, r18	; 0x04
    1430:	8c 81       	ldd	r24, Y+4	; 0x04
    1432:	9d 81       	ldd	r25, Y+5	; 0x05
    1434:	82 34       	cpi	r24, 0x42	; 66
    1436:	91 05       	cpc	r25, r1
    1438:	61 f1       	breq	.+88     	; 0x1492 <DIO_VIDSetPinValue+0x188>
    143a:	2c 81       	ldd	r18, Y+4	; 0x04
    143c:	3d 81       	ldd	r19, Y+5	; 0x05
    143e:	23 34       	cpi	r18, 0x43	; 67
    1440:	31 05       	cpc	r19, r1
    1442:	34 f4       	brge	.+12     	; 0x1450 <DIO_VIDSetPinValue+0x146>
    1444:	8c 81       	ldd	r24, Y+4	; 0x04
    1446:	9d 81       	ldd	r25, Y+5	; 0x05
    1448:	81 34       	cpi	r24, 0x41	; 65
    144a:	91 05       	cpc	r25, r1
    144c:	69 f0       	breq	.+26     	; 0x1468 <DIO_VIDSetPinValue+0x15e>
    144e:	5f c0       	rjmp	.+190    	; 0x150e <DIO_VIDSetPinValue+0x204>
    1450:	2c 81       	ldd	r18, Y+4	; 0x04
    1452:	3d 81       	ldd	r19, Y+5	; 0x05
    1454:	24 34       	cpi	r18, 0x44	; 68
    1456:	31 05       	cpc	r19, r1
    1458:	09 f4       	brne	.+2      	; 0x145c <DIO_VIDSetPinValue+0x152>
    145a:	45 c0       	rjmp	.+138    	; 0x14e6 <DIO_VIDSetPinValue+0x1dc>
    145c:	8c 81       	ldd	r24, Y+4	; 0x04
    145e:	9d 81       	ldd	r25, Y+5	; 0x05
    1460:	83 36       	cpi	r24, 0x63	; 99
    1462:	91 05       	cpc	r25, r1
    1464:	59 f1       	breq	.+86     	; 0x14bc <DIO_VIDSetPinValue+0x1b2>
    1466:	53 c0       	rjmp	.+166    	; 0x150e <DIO_VIDSetPinValue+0x204>
			case PORT_A:
				clearBit(PORTA,cpy_u8PinNumber);
    1468:	ab e3       	ldi	r26, 0x3B	; 59
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	eb e3       	ldi	r30, 0x3B	; 59
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	48 2f       	mov	r20, r24
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	02 2e       	mov	r0, r18
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <DIO_VIDSetPinValue+0x17c>
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	0a 94       	dec	r0
    1488:	e2 f7       	brpl	.-8      	; 0x1482 <DIO_VIDSetPinValue+0x178>
    148a:	80 95       	com	r24
    148c:	84 23       	and	r24, r20
    148e:	8c 93       	st	X, r24
    1490:	3e c0       	rjmp	.+124    	; 0x150e <DIO_VIDSetPinValue+0x204>
				break;
			case PORT_B:
				clearBit(PORTB,cpy_u8PinNumber);
    1492:	a8 e3       	ldi	r26, 0x38	; 56
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e8 e3       	ldi	r30, 0x38	; 56
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	48 2f       	mov	r20, r24
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	02 2e       	mov	r0, r18
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <DIO_VIDSetPinValue+0x1a6>
    14ac:	88 0f       	add	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	0a 94       	dec	r0
    14b2:	e2 f7       	brpl	.-8      	; 0x14ac <DIO_VIDSetPinValue+0x1a2>
    14b4:	80 95       	com	r24
    14b6:	84 23       	and	r24, r20
    14b8:	8c 93       	st	X, r24
    14ba:	29 c0       	rjmp	.+82     	; 0x150e <DIO_VIDSetPinValue+0x204>
				break;
			case PORT_C:
				clearBit(PORTC,cpy_u8PinNumber);
    14bc:	a5 e3       	ldi	r26, 0x35	; 53
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	e5 e3       	ldi	r30, 0x35	; 53
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	48 2f       	mov	r20, r24
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	02 2e       	mov	r0, r18
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <DIO_VIDSetPinValue+0x1d0>
    14d6:	88 0f       	add	r24, r24
    14d8:	99 1f       	adc	r25, r25
    14da:	0a 94       	dec	r0
    14dc:	e2 f7       	brpl	.-8      	; 0x14d6 <DIO_VIDSetPinValue+0x1cc>
    14de:	80 95       	com	r24
    14e0:	84 23       	and	r24, r20
    14e2:	8c 93       	st	X, r24
    14e4:	14 c0       	rjmp	.+40     	; 0x150e <DIO_VIDSetPinValue+0x204>
				break;
			case PORT_D:
				clearBit(PORTD,cpy_u8PinNumber);
    14e6:	a2 e3       	ldi	r26, 0x32	; 50
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	e2 e3       	ldi	r30, 0x32	; 50
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	48 2f       	mov	r20, r24
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	28 2f       	mov	r18, r24
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	02 2e       	mov	r0, r18
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <DIO_VIDSetPinValue+0x1fa>
    1500:	88 0f       	add	r24, r24
    1502:	99 1f       	adc	r25, r25
    1504:	0a 94       	dec	r0
    1506:	e2 f7       	brpl	.-8      	; 0x1500 <DIO_VIDSetPinValue+0x1f6>
    1508:	80 95       	com	r24
    150a:	84 23       	and	r24, r20
    150c:	8c 93       	st	X, r24
			break;
			default :
				break;

	}
}
    150e:	29 96       	adiw	r28, 0x09	; 9
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	f8 94       	cli
    1514:	de bf       	out	0x3e, r29	; 62
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	cd bf       	out	0x3d, r28	; 61
    151a:	cf 91       	pop	r28
    151c:	df 91       	pop	r29
    151e:	08 95       	ret

00001520 <DIO_VIDgetPinDirection>:
void DIO_VIDgetPinDirection(u8 cpy_u8PortNumber,u8 cpy_u8PinNumber,u8* buf_u8value){
    1520:	df 93       	push	r29
    1522:	cf 93       	push	r28
    1524:	00 d0       	rcall	.+0      	; 0x1526 <DIO_VIDgetPinDirection+0x6>
    1526:	00 d0       	rcall	.+0      	; 0x1528 <DIO_VIDgetPinDirection+0x8>
    1528:	00 d0       	rcall	.+0      	; 0x152a <DIO_VIDgetPinDirection+0xa>
    152a:	cd b7       	in	r28, 0x3d	; 61
    152c:	de b7       	in	r29, 0x3e	; 62
    152e:	89 83       	std	Y+1, r24	; 0x01
    1530:	6a 83       	std	Y+2, r22	; 0x02
    1532:	5c 83       	std	Y+4, r21	; 0x04
    1534:	4b 83       	std	Y+3, r20	; 0x03
	switch (cpy_u8PortNumber){
    1536:	89 81       	ldd	r24, Y+1	; 0x01
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	3e 83       	std	Y+6, r19	; 0x06
    153e:	2d 83       	std	Y+5, r18	; 0x05
    1540:	4d 81       	ldd	r20, Y+5	; 0x05
    1542:	5e 81       	ldd	r21, Y+6	; 0x06
    1544:	42 34       	cpi	r20, 0x42	; 66
    1546:	51 05       	cpc	r21, r1
    1548:	59 f1       	breq	.+86     	; 0x15a0 <DIO_VIDgetPinDirection+0x80>
    154a:	8d 81       	ldd	r24, Y+5	; 0x05
    154c:	9e 81       	ldd	r25, Y+6	; 0x06
    154e:	83 34       	cpi	r24, 0x43	; 67
    1550:	91 05       	cpc	r25, r1
    1552:	34 f4       	brge	.+12     	; 0x1560 <DIO_VIDgetPinDirection+0x40>
    1554:	2d 81       	ldd	r18, Y+5	; 0x05
    1556:	3e 81       	ldd	r19, Y+6	; 0x06
    1558:	21 34       	cpi	r18, 0x41	; 65
    155a:	31 05       	cpc	r19, r1
    155c:	69 f0       	breq	.+26     	; 0x1578 <DIO_VIDgetPinDirection+0x58>
    155e:	5b c0       	rjmp	.+182    	; 0x1616 <DIO_VIDgetPinDirection+0xf6>
    1560:	4d 81       	ldd	r20, Y+5	; 0x05
    1562:	5e 81       	ldd	r21, Y+6	; 0x06
    1564:	44 34       	cpi	r20, 0x44	; 68
    1566:	51 05       	cpc	r21, r1
    1568:	09 f4       	brne	.+2      	; 0x156c <DIO_VIDgetPinDirection+0x4c>
    156a:	42 c0       	rjmp	.+132    	; 0x15f0 <DIO_VIDgetPinDirection+0xd0>
    156c:	8d 81       	ldd	r24, Y+5	; 0x05
    156e:	9e 81       	ldd	r25, Y+6	; 0x06
    1570:	83 36       	cpi	r24, 0x63	; 99
    1572:	91 05       	cpc	r25, r1
    1574:	49 f1       	breq	.+82     	; 0x15c8 <DIO_VIDgetPinDirection+0xa8>
    1576:	4f c0       	rjmp	.+158    	; 0x1616 <DIO_VIDgetPinDirection+0xf6>
	case PORT_A:
		*buf_u8value = getBit(PINA,cpy_u8PinNumber);
    1578:	e9 e3       	ldi	r30, 0x39	; 57
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	88 2f       	mov	r24, r24
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	a9 01       	movw	r20, r18
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <DIO_VIDgetPinDirection+0x70>
    158c:	55 95       	asr	r21
    158e:	47 95       	ror	r20
    1590:	8a 95       	dec	r24
    1592:	e2 f7       	brpl	.-8      	; 0x158c <DIO_VIDgetPinDirection+0x6c>
    1594:	ca 01       	movw	r24, r20
    1596:	81 70       	andi	r24, 0x01	; 1
    1598:	eb 81       	ldd	r30, Y+3	; 0x03
    159a:	fc 81       	ldd	r31, Y+4	; 0x04
    159c:	80 83       	st	Z, r24
    159e:	3b c0       	rjmp	.+118    	; 0x1616 <DIO_VIDgetPinDirection+0xf6>
		break;
	case PORT_B:
		*buf_u8value = getBit(PINB,cpy_u8PinNumber);
    15a0:	e6 e3       	ldi	r30, 0x36	; 54
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	8a 81       	ldd	r24, Y+2	; 0x02
    15ac:	88 2f       	mov	r24, r24
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	a9 01       	movw	r20, r18
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <DIO_VIDgetPinDirection+0x98>
    15b4:	55 95       	asr	r21
    15b6:	47 95       	ror	r20
    15b8:	8a 95       	dec	r24
    15ba:	e2 f7       	brpl	.-8      	; 0x15b4 <DIO_VIDgetPinDirection+0x94>
    15bc:	ca 01       	movw	r24, r20
    15be:	81 70       	andi	r24, 0x01	; 1
    15c0:	eb 81       	ldd	r30, Y+3	; 0x03
    15c2:	fc 81       	ldd	r31, Y+4	; 0x04
    15c4:	80 83       	st	Z, r24
    15c6:	27 c0       	rjmp	.+78     	; 0x1616 <DIO_VIDgetPinDirection+0xf6>
		break;
	case PORT_C:
		*buf_u8value = getBit(PINC,cpy_u8PinNumber);
    15c8:	e3 e3       	ldi	r30, 0x33	; 51
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	28 2f       	mov	r18, r24
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
    15d4:	88 2f       	mov	r24, r24
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	a9 01       	movw	r20, r18
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <DIO_VIDgetPinDirection+0xc0>
    15dc:	55 95       	asr	r21
    15de:	47 95       	ror	r20
    15e0:	8a 95       	dec	r24
    15e2:	e2 f7       	brpl	.-8      	; 0x15dc <DIO_VIDgetPinDirection+0xbc>
    15e4:	ca 01       	movw	r24, r20
    15e6:	81 70       	andi	r24, 0x01	; 1
    15e8:	eb 81       	ldd	r30, Y+3	; 0x03
    15ea:	fc 81       	ldd	r31, Y+4	; 0x04
    15ec:	80 83       	st	Z, r24
    15ee:	13 c0       	rjmp	.+38     	; 0x1616 <DIO_VIDgetPinDirection+0xf6>
		break;
	case PORT_D:
		*buf_u8value = getBit(PINA,cpy_u8PinNumber);
    15f0:	e9 e3       	ldi	r30, 0x39	; 57
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	28 2f       	mov	r18, r24
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	88 2f       	mov	r24, r24
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	a9 01       	movw	r20, r18
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <DIO_VIDgetPinDirection+0xe8>
    1604:	55 95       	asr	r21
    1606:	47 95       	ror	r20
    1608:	8a 95       	dec	r24
    160a:	e2 f7       	brpl	.-8      	; 0x1604 <DIO_VIDgetPinDirection+0xe4>
    160c:	ca 01       	movw	r24, r20
    160e:	81 70       	andi	r24, 0x01	; 1
    1610:	eb 81       	ldd	r30, Y+3	; 0x03
    1612:	fc 81       	ldd	r31, Y+4	; 0x04
    1614:	80 83       	st	Z, r24
		break;
	default:
		break;
	}
}
    1616:	26 96       	adiw	r28, 0x06	; 6
    1618:	0f b6       	in	r0, 0x3f	; 63
    161a:	f8 94       	cli
    161c:	de bf       	out	0x3e, r29	; 62
    161e:	0f be       	out	0x3f, r0	; 63
    1620:	cd bf       	out	0x3d, r28	; 61
    1622:	cf 91       	pop	r28
    1624:	df 91       	pop	r29
    1626:	08 95       	ret

00001628 <DIO_VIDSetPortDirection>:
void DIO_VIDSetPortDirection(u8 cpy_u8PortNumber,u8 cpy_u8PortDirection){
    1628:	df 93       	push	r29
    162a:	cf 93       	push	r28
    162c:	00 d0       	rcall	.+0      	; 0x162e <DIO_VIDSetPortDirection+0x6>
    162e:	00 d0       	rcall	.+0      	; 0x1630 <DIO_VIDSetPortDirection+0x8>
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
    1634:	89 83       	std	Y+1, r24	; 0x01
    1636:	6a 83       	std	Y+2, r22	; 0x02
	switch (cpy_u8PortNumber){
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	28 2f       	mov	r18, r24
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	3c 83       	std	Y+4, r19	; 0x04
    1640:	2b 83       	std	Y+3, r18	; 0x03
    1642:	8b 81       	ldd	r24, Y+3	; 0x03
    1644:	9c 81       	ldd	r25, Y+4	; 0x04
    1646:	82 34       	cpi	r24, 0x42	; 66
    1648:	91 05       	cpc	r25, r1
    164a:	d9 f0       	breq	.+54     	; 0x1682 <DIO_VIDSetPortDirection+0x5a>
    164c:	2b 81       	ldd	r18, Y+3	; 0x03
    164e:	3c 81       	ldd	r19, Y+4	; 0x04
    1650:	23 34       	cpi	r18, 0x43	; 67
    1652:	31 05       	cpc	r19, r1
    1654:	34 f4       	brge	.+12     	; 0x1662 <DIO_VIDSetPortDirection+0x3a>
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	9c 81       	ldd	r25, Y+4	; 0x04
    165a:	81 34       	cpi	r24, 0x41	; 65
    165c:	91 05       	cpc	r25, r1
    165e:	61 f0       	breq	.+24     	; 0x1678 <DIO_VIDSetPortDirection+0x50>
    1660:	1e c0       	rjmp	.+60     	; 0x169e <DIO_VIDSetPortDirection+0x76>
    1662:	2b 81       	ldd	r18, Y+3	; 0x03
    1664:	3c 81       	ldd	r19, Y+4	; 0x04
    1666:	24 34       	cpi	r18, 0x44	; 68
    1668:	31 05       	cpc	r19, r1
    166a:	a9 f0       	breq	.+42     	; 0x1696 <DIO_VIDSetPortDirection+0x6e>
    166c:	8b 81       	ldd	r24, Y+3	; 0x03
    166e:	9c 81       	ldd	r25, Y+4	; 0x04
    1670:	83 36       	cpi	r24, 0x63	; 99
    1672:	91 05       	cpc	r25, r1
    1674:	59 f0       	breq	.+22     	; 0x168c <DIO_VIDSetPortDirection+0x64>
    1676:	13 c0       	rjmp	.+38     	; 0x169e <DIO_VIDSetPortDirection+0x76>
	case PORT_A:
		DDRA = cpy_u8PortDirection;
    1678:	ea e3       	ldi	r30, 0x3A	; 58
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	80 83       	st	Z, r24
    1680:	0e c0       	rjmp	.+28     	; 0x169e <DIO_VIDSetPortDirection+0x76>
		break;
	case PORT_B:
		DDRB = cpy_u8PortDirection;
    1682:	e7 e3       	ldi	r30, 0x37	; 55
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	8a 81       	ldd	r24, Y+2	; 0x02
    1688:	80 83       	st	Z, r24
    168a:	09 c0       	rjmp	.+18     	; 0x169e <DIO_VIDSetPortDirection+0x76>
		break;
	case PORT_C:
		DDRC = cpy_u8PortDirection;
    168c:	e4 e3       	ldi	r30, 0x34	; 52
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	8a 81       	ldd	r24, Y+2	; 0x02
    1692:	80 83       	st	Z, r24
    1694:	04 c0       	rjmp	.+8      	; 0x169e <DIO_VIDSetPortDirection+0x76>
		break;
	case PORT_D:
		DDRD = cpy_u8PortDirection;
    1696:	e1 e3       	ldi	r30, 0x31	; 49
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	80 83       	st	Z, r24
		break;
	default:
		break;
	}
}
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	cf 91       	pop	r28
    16a8:	df 91       	pop	r29
    16aa:	08 95       	ret

000016ac <DIO_VIDSetPortValue>:
void DIO_VIDSetPortValue(u8 cpy_u8PortNumber,u8 cpy_u8PortValue){
    16ac:	df 93       	push	r29
    16ae:	cf 93       	push	r28
    16b0:	00 d0       	rcall	.+0      	; 0x16b2 <DIO_VIDSetPortValue+0x6>
    16b2:	00 d0       	rcall	.+0      	; 0x16b4 <DIO_VIDSetPortValue+0x8>
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
    16b8:	89 83       	std	Y+1, r24	; 0x01
    16ba:	6a 83       	std	Y+2, r22	; 0x02
	switch (cpy_u8PortNumber){
    16bc:	89 81       	ldd	r24, Y+1	; 0x01
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	3c 83       	std	Y+4, r19	; 0x04
    16c4:	2b 83       	std	Y+3, r18	; 0x03
    16c6:	8b 81       	ldd	r24, Y+3	; 0x03
    16c8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ca:	82 34       	cpi	r24, 0x42	; 66
    16cc:	91 05       	cpc	r25, r1
    16ce:	d9 f0       	breq	.+54     	; 0x1706 <DIO_VIDSetPortValue+0x5a>
    16d0:	2b 81       	ldd	r18, Y+3	; 0x03
    16d2:	3c 81       	ldd	r19, Y+4	; 0x04
    16d4:	23 34       	cpi	r18, 0x43	; 67
    16d6:	31 05       	cpc	r19, r1
    16d8:	34 f4       	brge	.+12     	; 0x16e6 <DIO_VIDSetPortValue+0x3a>
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	9c 81       	ldd	r25, Y+4	; 0x04
    16de:	81 34       	cpi	r24, 0x41	; 65
    16e0:	91 05       	cpc	r25, r1
    16e2:	61 f0       	breq	.+24     	; 0x16fc <DIO_VIDSetPortValue+0x50>
    16e4:	1e c0       	rjmp	.+60     	; 0x1722 <DIO_VIDSetPortValue+0x76>
    16e6:	2b 81       	ldd	r18, Y+3	; 0x03
    16e8:	3c 81       	ldd	r19, Y+4	; 0x04
    16ea:	24 34       	cpi	r18, 0x44	; 68
    16ec:	31 05       	cpc	r19, r1
    16ee:	a9 f0       	breq	.+42     	; 0x171a <DIO_VIDSetPortValue+0x6e>
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	9c 81       	ldd	r25, Y+4	; 0x04
    16f4:	83 36       	cpi	r24, 0x63	; 99
    16f6:	91 05       	cpc	r25, r1
    16f8:	59 f0       	breq	.+22     	; 0x1710 <DIO_VIDSetPortValue+0x64>
    16fa:	13 c0       	rjmp	.+38     	; 0x1722 <DIO_VIDSetPortValue+0x76>
	case PORT_A:
		PORTA = cpy_u8PortValue;
    16fc:	eb e3       	ldi	r30, 0x3B	; 59
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	8a 81       	ldd	r24, Y+2	; 0x02
    1702:	80 83       	st	Z, r24
    1704:	0e c0       	rjmp	.+28     	; 0x1722 <DIO_VIDSetPortValue+0x76>
		break;
	case PORT_B:
		PORTB = cpy_u8PortValue;
    1706:	e8 e3       	ldi	r30, 0x38	; 56
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	80 83       	st	Z, r24
    170e:	09 c0       	rjmp	.+18     	; 0x1722 <DIO_VIDSetPortValue+0x76>
		break;
	case PORT_C:
		PORTC = cpy_u8PortValue;
    1710:	e5 e3       	ldi	r30, 0x35	; 53
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	8a 81       	ldd	r24, Y+2	; 0x02
    1716:	80 83       	st	Z, r24
    1718:	04 c0       	rjmp	.+8      	; 0x1722 <DIO_VIDSetPortValue+0x76>
		break;
	case PORT_D:
		PORTD = cpy_u8PortValue;
    171a:	e2 e3       	ldi	r30, 0x32	; 50
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	80 83       	st	Z, r24
		break;
	default:
		break;
	}
}
    1722:	0f 90       	pop	r0
    1724:	0f 90       	pop	r0
    1726:	0f 90       	pop	r0
    1728:	0f 90       	pop	r0
    172a:	cf 91       	pop	r28
    172c:	df 91       	pop	r29
    172e:	08 95       	ret

00001730 <DIO_VIDgetPortValue>:
void DIO_VIDgetPortValue(u8 cpy_u8PortNumber,u8* buf_u8PortValue){
    1730:	df 93       	push	r29
    1732:	cf 93       	push	r28
    1734:	00 d0       	rcall	.+0      	; 0x1736 <DIO_VIDgetPortValue+0x6>
    1736:	00 d0       	rcall	.+0      	; 0x1738 <DIO_VIDgetPortValue+0x8>
    1738:	0f 92       	push	r0
    173a:	cd b7       	in	r28, 0x3d	; 61
    173c:	de b7       	in	r29, 0x3e	; 62
    173e:	89 83       	std	Y+1, r24	; 0x01
    1740:	7b 83       	std	Y+3, r23	; 0x03
    1742:	6a 83       	std	Y+2, r22	; 0x02
	switch (cpy_u8PortNumber){
    1744:	89 81       	ldd	r24, Y+1	; 0x01
    1746:	28 2f       	mov	r18, r24
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	3d 83       	std	Y+5, r19	; 0x05
    174c:	2c 83       	std	Y+4, r18	; 0x04
    174e:	8c 81       	ldd	r24, Y+4	; 0x04
    1750:	9d 81       	ldd	r25, Y+5	; 0x05
    1752:	82 34       	cpi	r24, 0x42	; 66
    1754:	91 05       	cpc	r25, r1
    1756:	e9 f0       	breq	.+58     	; 0x1792 <DIO_VIDgetPortValue+0x62>
    1758:	2c 81       	ldd	r18, Y+4	; 0x04
    175a:	3d 81       	ldd	r19, Y+5	; 0x05
    175c:	23 34       	cpi	r18, 0x43	; 67
    175e:	31 05       	cpc	r19, r1
    1760:	34 f4       	brge	.+12     	; 0x176e <DIO_VIDgetPortValue+0x3e>
    1762:	8c 81       	ldd	r24, Y+4	; 0x04
    1764:	9d 81       	ldd	r25, Y+5	; 0x05
    1766:	81 34       	cpi	r24, 0x41	; 65
    1768:	91 05       	cpc	r25, r1
    176a:	61 f0       	breq	.+24     	; 0x1784 <DIO_VIDgetPortValue+0x54>
    176c:	26 c0       	rjmp	.+76     	; 0x17ba <DIO_VIDgetPortValue+0x8a>
    176e:	2c 81       	ldd	r18, Y+4	; 0x04
    1770:	3d 81       	ldd	r19, Y+5	; 0x05
    1772:	24 34       	cpi	r18, 0x44	; 68
    1774:	31 05       	cpc	r19, r1
    1776:	d9 f0       	breq	.+54     	; 0x17ae <DIO_VIDgetPortValue+0x7e>
    1778:	8c 81       	ldd	r24, Y+4	; 0x04
    177a:	9d 81       	ldd	r25, Y+5	; 0x05
    177c:	83 36       	cpi	r24, 0x63	; 99
    177e:	91 05       	cpc	r25, r1
    1780:	79 f0       	breq	.+30     	; 0x17a0 <DIO_VIDgetPortValue+0x70>
    1782:	1b c0       	rjmp	.+54     	; 0x17ba <DIO_VIDgetPortValue+0x8a>
	case PORT_A:
		*buf_u8PortValue = PINA;
    1784:	e9 e3       	ldi	r30, 0x39	; 57
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	ea 81       	ldd	r30, Y+2	; 0x02
    178c:	fb 81       	ldd	r31, Y+3	; 0x03
    178e:	80 83       	st	Z, r24
    1790:	14 c0       	rjmp	.+40     	; 0x17ba <DIO_VIDgetPortValue+0x8a>
		break;
	case PORT_B:
		*buf_u8PortValue = PINB;
    1792:	e6 e3       	ldi	r30, 0x36	; 54
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	ea 81       	ldd	r30, Y+2	; 0x02
    179a:	fb 81       	ldd	r31, Y+3	; 0x03
    179c:	80 83       	st	Z, r24
    179e:	0d c0       	rjmp	.+26     	; 0x17ba <DIO_VIDgetPortValue+0x8a>
		break;
	case PORT_C:
		*buf_u8PortValue = PINC;
    17a0:	e3 e3       	ldi	r30, 0x33	; 51
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	ea 81       	ldd	r30, Y+2	; 0x02
    17a8:	fb 81       	ldd	r31, Y+3	; 0x03
    17aa:	80 83       	st	Z, r24
    17ac:	06 c0       	rjmp	.+12     	; 0x17ba <DIO_VIDgetPortValue+0x8a>
		break;
	case PORT_D:
		*buf_u8PortValue = PIND;
    17ae:	e0 e3       	ldi	r30, 0x30	; 48
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	ea 81       	ldd	r30, Y+2	; 0x02
    17b6:	fb 81       	ldd	r31, Y+3	; 0x03
    17b8:	80 83       	st	Z, r24
		break;
	default:
		break;
	}
}
    17ba:	0f 90       	pop	r0
    17bc:	0f 90       	pop	r0
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	cf 91       	pop	r28
    17c6:	df 91       	pop	r29
    17c8:	08 95       	ret

000017ca <MADC_vidInit>:
 */
#include "../../LIB/math/bitmask.h"
#include "../../LIB/math/datatypes.h"
#include "./adc.h"

void MADC_vidInit(u8 volt_reference,u8 pre_scaler){
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	00 d0       	rcall	.+0      	; 0x17d0 <MADC_vidInit+0x6>
    17d0:	00 d0       	rcall	.+0      	; 0x17d2 <MADC_vidInit+0x8>
    17d2:	00 d0       	rcall	.+0      	; 0x17d4 <MADC_vidInit+0xa>
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
    17d8:	89 83       	std	Y+1, r24	; 0x01
    17da:	6a 83       	std	Y+2, r22	; 0x02
	//1-volt reference
	switch(volt_reference){
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
    17de:	28 2f       	mov	r18, r24
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	3e 83       	std	Y+6, r19	; 0x06
    17e4:	2d 83       	std	Y+5, r18	; 0x05
    17e6:	8d 81       	ldd	r24, Y+5	; 0x05
    17e8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ea:	81 30       	cpi	r24, 0x01	; 1
    17ec:	91 05       	cpc	r25, r1
    17ee:	c1 f0       	breq	.+48     	; 0x1820 <MADC_vidInit+0x56>
    17f0:	2d 81       	ldd	r18, Y+5	; 0x05
    17f2:	3e 81       	ldd	r19, Y+6	; 0x06
    17f4:	23 30       	cpi	r18, 0x03	; 3
    17f6:	31 05       	cpc	r19, r1
    17f8:	11 f1       	breq	.+68     	; 0x183e <MADC_vidInit+0x74>
    17fa:	8d 81       	ldd	r24, Y+5	; 0x05
    17fc:	9e 81       	ldd	r25, Y+6	; 0x06
    17fe:	00 97       	sbiw	r24, 0x00	; 0
    1800:	61 f5       	brne	.+88     	; 0x185a <MADC_vidInit+0x90>
	case AREF :
		clearBit(ADMUX,ADMUX_REFS0);
    1802:	a7 e2       	ldi	r26, 0x27	; 39
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	e7 e2       	ldi	r30, 0x27	; 39
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	8f 7b       	andi	r24, 0xBF	; 191
    180e:	8c 93       	st	X, r24
		clearBit(ADMUX,ADMUX_REFS1);
    1810:	a7 e2       	ldi	r26, 0x27	; 39
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	e7 e2       	ldi	r30, 0x27	; 39
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	8f 77       	andi	r24, 0x7F	; 127
    181c:	8c 93       	st	X, r24
    181e:	1d c0       	rjmp	.+58     	; 0x185a <MADC_vidInit+0x90>
		break;
	case AVCC :
		setBit(ADMUX,ADMUX_REFS0);
    1820:	a7 e2       	ldi	r26, 0x27	; 39
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	e7 e2       	ldi	r30, 0x27	; 39
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	80 64       	ori	r24, 0x40	; 64
    182c:	8c 93       	st	X, r24
		clearBit(ADMUX,ADMUX_REFS1);
    182e:	a7 e2       	ldi	r26, 0x27	; 39
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	e7 e2       	ldi	r30, 0x27	; 39
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	8f 77       	andi	r24, 0x7F	; 127
    183a:	8c 93       	st	X, r24
    183c:	0e c0       	rjmp	.+28     	; 0x185a <MADC_vidInit+0x90>
		break;
	case INTERNAL :
		setBit(ADMUX,ADMUX_REFS0);
    183e:	a7 e2       	ldi	r26, 0x27	; 39
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	e7 e2       	ldi	r30, 0x27	; 39
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	80 64       	ori	r24, 0x40	; 64
    184a:	8c 93       	st	X, r24
		setBit(ADMUX,ADMUX_REFS1);
    184c:	a7 e2       	ldi	r26, 0x27	; 39
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	e7 e2       	ldi	r30, 0x27	; 39
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	80 68       	ori	r24, 0x80	; 128
    1858:	8c 93       	st	X, r24
		break;
	default :
		break;
	}
	//2.data direction
	clearBit(ADMUX,ADMUX_ADLAR);
    185a:	a7 e2       	ldi	r26, 0x27	; 39
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	e7 e2       	ldi	r30, 0x27	; 39
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	8f 7d       	andi	r24, 0xDF	; 223
    1866:	8c 93       	st	X, r24
	//3.set pre-scaller
	switch(pre_scaler){
    1868:	8a 81       	ldd	r24, Y+2	; 0x02
    186a:	28 2f       	mov	r18, r24
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	3c 83       	std	Y+4, r19	; 0x04
    1870:	2b 83       	std	Y+3, r18	; 0x03
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
    1874:	9c 81       	ldd	r25, Y+4	; 0x04
    1876:	80 31       	cpi	r24, 0x10	; 16
    1878:	91 05       	cpc	r25, r1
    187a:	09 f4       	brne	.+2      	; 0x187e <MADC_vidInit+0xb4>
    187c:	6b c0       	rjmp	.+214    	; 0x1954 <MADC_vidInit+0x18a>
    187e:	2b 81       	ldd	r18, Y+3	; 0x03
    1880:	3c 81       	ldd	r19, Y+4	; 0x04
    1882:	21 31       	cpi	r18, 0x11	; 17
    1884:	31 05       	cpc	r19, r1
    1886:	8c f4       	brge	.+34     	; 0x18aa <MADC_vidInit+0xe0>
    1888:	8b 81       	ldd	r24, Y+3	; 0x03
    188a:	9c 81       	ldd	r25, Y+4	; 0x04
    188c:	84 30       	cpi	r24, 0x04	; 4
    188e:	91 05       	cpc	r25, r1
    1890:	a9 f1       	breq	.+106    	; 0x18fc <MADC_vidInit+0x132>
    1892:	2b 81       	ldd	r18, Y+3	; 0x03
    1894:	3c 81       	ldd	r19, Y+4	; 0x04
    1896:	28 30       	cpi	r18, 0x08	; 8
    1898:	31 05       	cpc	r19, r1
    189a:	09 f4       	brne	.+2      	; 0x189e <MADC_vidInit+0xd4>
    189c:	45 c0       	rjmp	.+138    	; 0x1928 <MADC_vidInit+0x15e>
    189e:	8b 81       	ldd	r24, Y+3	; 0x03
    18a0:	9c 81       	ldd	r25, Y+4	; 0x04
    18a2:	82 30       	cpi	r24, 0x02	; 2
    18a4:	91 05       	cpc	r25, r1
    18a6:	a1 f0       	breq	.+40     	; 0x18d0 <MADC_vidInit+0x106>
    18a8:	ac c0       	rjmp	.+344    	; 0x1a02 <MADC_vidInit+0x238>
    18aa:	2b 81       	ldd	r18, Y+3	; 0x03
    18ac:	3c 81       	ldd	r19, Y+4	; 0x04
    18ae:	20 34       	cpi	r18, 0x40	; 64
    18b0:	31 05       	cpc	r19, r1
    18b2:	09 f4       	brne	.+2      	; 0x18b6 <MADC_vidInit+0xec>
    18b4:	7b c0       	rjmp	.+246    	; 0x19ac <MADC_vidInit+0x1e2>
    18b6:	8b 81       	ldd	r24, Y+3	; 0x03
    18b8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ba:	80 38       	cpi	r24, 0x80	; 128
    18bc:	91 05       	cpc	r25, r1
    18be:	09 f4       	brne	.+2      	; 0x18c2 <MADC_vidInit+0xf8>
    18c0:	8b c0       	rjmp	.+278    	; 0x19d8 <MADC_vidInit+0x20e>
    18c2:	2b 81       	ldd	r18, Y+3	; 0x03
    18c4:	3c 81       	ldd	r19, Y+4	; 0x04
    18c6:	20 32       	cpi	r18, 0x20	; 32
    18c8:	31 05       	cpc	r19, r1
    18ca:	09 f4       	brne	.+2      	; 0x18ce <MADC_vidInit+0x104>
    18cc:	59 c0       	rjmp	.+178    	; 0x1980 <MADC_vidInit+0x1b6>
    18ce:	99 c0       	rjmp	.+306    	; 0x1a02 <MADC_vidInit+0x238>
		case PRE_SCALER_1 :
			clearBit(ADCSRA,ADCSRA_ADPS0);
    18d0:	a6 e2       	ldi	r26, 0x26	; 38
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	e6 e2       	ldi	r30, 0x26	; 38
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	8e 7f       	andi	r24, 0xFE	; 254
    18dc:	8c 93       	st	X, r24
			clearBit(ADCSRA,ADCSRA_ADPS1);
    18de:	a6 e2       	ldi	r26, 0x26	; 38
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	e6 e2       	ldi	r30, 0x26	; 38
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	8d 7f       	andi	r24, 0xFD	; 253
    18ea:	8c 93       	st	X, r24
			clearBit(ADCSRA,ADCSRA_ADPS2);
    18ec:	a6 e2       	ldi	r26, 0x26	; 38
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	e6 e2       	ldi	r30, 0x26	; 38
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	8b 7f       	andi	r24, 0xFB	; 251
    18f8:	8c 93       	st	X, r24
    18fa:	83 c0       	rjmp	.+262    	; 0x1a02 <MADC_vidInit+0x238>
			break;
		case PRE_SCALER_2:
			clearBit(ADCSRA,ADCSRA_ADPS0);
    18fc:	a6 e2       	ldi	r26, 0x26	; 38
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	e6 e2       	ldi	r30, 0x26	; 38
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	8e 7f       	andi	r24, 0xFE	; 254
    1908:	8c 93       	st	X, r24
			setBit(ADCSRA,ADCSRA_ADPS1);
    190a:	a6 e2       	ldi	r26, 0x26	; 38
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	e6 e2       	ldi	r30, 0x26	; 38
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	82 60       	ori	r24, 0x02	; 2
    1916:	8c 93       	st	X, r24
			clearBit(ADCSRA,ADCSRA_ADPS2);
    1918:	a6 e2       	ldi	r26, 0x26	; 38
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	e6 e2       	ldi	r30, 0x26	; 38
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	8b 7f       	andi	r24, 0xFB	; 251
    1924:	8c 93       	st	X, r24
    1926:	6d c0       	rjmp	.+218    	; 0x1a02 <MADC_vidInit+0x238>
			break;
		case PRE_SCALER_3:
			setBit(ADCSRA,ADCSRA_ADPS0);
    1928:	a6 e2       	ldi	r26, 0x26	; 38
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	e6 e2       	ldi	r30, 0x26	; 38
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	81 60       	ori	r24, 0x01	; 1
    1934:	8c 93       	st	X, r24
			setBit(ADCSRA,ADCSRA_ADPS1);
    1936:	a6 e2       	ldi	r26, 0x26	; 38
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	e6 e2       	ldi	r30, 0x26	; 38
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	82 60       	ori	r24, 0x02	; 2
    1942:	8c 93       	st	X, r24
			clearBit(ADCSRA,ADCSRA_ADPS2);
    1944:	a6 e2       	ldi	r26, 0x26	; 38
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	e6 e2       	ldi	r30, 0x26	; 38
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	8b 7f       	andi	r24, 0xFB	; 251
    1950:	8c 93       	st	X, r24
    1952:	57 c0       	rjmp	.+174    	; 0x1a02 <MADC_vidInit+0x238>
			break;
		case PRE_SCALER_4:
			clearBit(ADCSRA,ADCSRA_ADPS0);
    1954:	a6 e2       	ldi	r26, 0x26	; 38
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	e6 e2       	ldi	r30, 0x26	; 38
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	8e 7f       	andi	r24, 0xFE	; 254
    1960:	8c 93       	st	X, r24
			clearBit(ADCSRA,ADCSRA_ADPS1);
    1962:	a6 e2       	ldi	r26, 0x26	; 38
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	e6 e2       	ldi	r30, 0x26	; 38
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	8d 7f       	andi	r24, 0xFD	; 253
    196e:	8c 93       	st	X, r24
			setBit(ADCSRA,ADCSRA_ADPS2);
    1970:	a6 e2       	ldi	r26, 0x26	; 38
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	e6 e2       	ldi	r30, 0x26	; 38
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	84 60       	ori	r24, 0x04	; 4
    197c:	8c 93       	st	X, r24
    197e:	41 c0       	rjmp	.+130    	; 0x1a02 <MADC_vidInit+0x238>
			break;
		case PRE_SCALER_5:
			setBit(ADCSRA,ADCSRA_ADPS0);
    1980:	a6 e2       	ldi	r26, 0x26	; 38
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	e6 e2       	ldi	r30, 0x26	; 38
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	81 60       	ori	r24, 0x01	; 1
    198c:	8c 93       	st	X, r24
			clearBit(ADCSRA,ADCSRA_ADPS1);
    198e:	a6 e2       	ldi	r26, 0x26	; 38
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	e6 e2       	ldi	r30, 0x26	; 38
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	8d 7f       	andi	r24, 0xFD	; 253
    199a:	8c 93       	st	X, r24
			setBit(ADCSRA,ADCSRA_ADPS2);
    199c:	a6 e2       	ldi	r26, 0x26	; 38
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	e6 e2       	ldi	r30, 0x26	; 38
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 81       	ld	r24, Z
    19a6:	84 60       	ori	r24, 0x04	; 4
    19a8:	8c 93       	st	X, r24
    19aa:	2b c0       	rjmp	.+86     	; 0x1a02 <MADC_vidInit+0x238>
			break;
		case PRE_SCALER_6:
			clearBit(ADCSRA,ADCSRA_ADPS0);
    19ac:	a6 e2       	ldi	r26, 0x26	; 38
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	e6 e2       	ldi	r30, 0x26	; 38
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	8e 7f       	andi	r24, 0xFE	; 254
    19b8:	8c 93       	st	X, r24
			setBit(ADCSRA,ADCSRA_ADPS1);
    19ba:	a6 e2       	ldi	r26, 0x26	; 38
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	e6 e2       	ldi	r30, 0x26	; 38
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	82 60       	ori	r24, 0x02	; 2
    19c6:	8c 93       	st	X, r24
			setBit(ADCSRA,ADCSRA_ADPS2);
    19c8:	a6 e2       	ldi	r26, 0x26	; 38
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	e6 e2       	ldi	r30, 0x26	; 38
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	84 60       	ori	r24, 0x04	; 4
    19d4:	8c 93       	st	X, r24
    19d6:	15 c0       	rjmp	.+42     	; 0x1a02 <MADC_vidInit+0x238>
			break;
		case PRE_SCALER_7:
			setBit(ADCSRA,ADCSRA_ADPS0);
    19d8:	a6 e2       	ldi	r26, 0x26	; 38
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	e6 e2       	ldi	r30, 0x26	; 38
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	81 60       	ori	r24, 0x01	; 1
    19e4:	8c 93       	st	X, r24
			setBit(ADCSRA,ADCSRA_ADPS1);
    19e6:	a6 e2       	ldi	r26, 0x26	; 38
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	e6 e2       	ldi	r30, 0x26	; 38
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	82 60       	ori	r24, 0x02	; 2
    19f2:	8c 93       	st	X, r24
			setBit(ADCSRA,ADCSRA_ADPS2);
    19f4:	a6 e2       	ldi	r26, 0x26	; 38
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	e6 e2       	ldi	r30, 0x26	; 38
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	84 60       	ori	r24, 0x04	; 4
    1a00:	8c 93       	st	X, r24
			break;
		default:
			break;
	}
	//enable
	setBit(ADCSRA,ADCSRA_ADEN);
    1a02:	a6 e2       	ldi	r26, 0x26	; 38
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	e6 e2       	ldi	r30, 0x26	; 38
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	80 68       	ori	r24, 0x80	; 128
    1a0e:	8c 93       	st	X, r24
}
    1a10:	26 96       	adiw	r28, 0x06	; 6
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	f8 94       	cli
    1a16:	de bf       	out	0x3e, r29	; 62
    1a18:	0f be       	out	0x3f, r0	; 63
    1a1a:	cd bf       	out	0x3d, r28	; 61
    1a1c:	cf 91       	pop	r28
    1a1e:	df 91       	pop	r29
    1a20:	08 95       	ret

00001a22 <MADC_u16Read>:
u16 MADC_u16Read(u8 channel){
    1a22:	df 93       	push	r29
    1a24:	cf 93       	push	r28
    1a26:	00 d0       	rcall	.+0      	; 0x1a28 <MADC_u16Read+0x6>
    1a28:	0f 92       	push	r0
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62
    1a2e:	89 83       	std	Y+1, r24	; 0x01

	//select Channel
	ADMUX&=0xD0;
    1a30:	a7 e2       	ldi	r26, 0x27	; 39
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	e7 e2       	ldi	r30, 0x27	; 39
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	80 7d       	andi	r24, 0xD0	; 208
    1a3c:	8c 93       	st	X, r24
	ADMUX = ADMUX|channel;
    1a3e:	a7 e2       	ldi	r26, 0x27	; 39
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	e7 e2       	ldi	r30, 0x27	; 39
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	90 81       	ld	r25, Z
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
    1a4a:	89 2b       	or	r24, r25
    1a4c:	8c 93       	st	X, r24
	//start conversion
	setBit(ADCSRA,ADCSRA_ADSC);
    1a4e:	a6 e2       	ldi	r26, 0x26	; 38
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	e6 e2       	ldi	r30, 0x26	; 38
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	80 64       	ori	r24, 0x40	; 64
    1a5a:	8c 93       	st	X, r24
	//wait
	while(!getBit(ADCSRA,ADCSRA_ADIF)){}
    1a5c:	e6 e2       	ldi	r30, 0x26	; 38
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	82 95       	swap	r24
    1a64:	8f 70       	andi	r24, 0x0F	; 15
    1a66:	88 2f       	mov	r24, r24
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	81 70       	andi	r24, 0x01	; 1
    1a6c:	90 70       	andi	r25, 0x00	; 0
    1a6e:	00 97       	sbiw	r24, 0x00	; 0
    1a70:	a9 f3       	breq	.-22     	; 0x1a5c <MADC_u16Read+0x3a>
	//clear flag
	setBit(ADCSRA,ADCSRA_ADIF);
    1a72:	a6 e2       	ldi	r26, 0x26	; 38
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	e6 e2       	ldi	r30, 0x26	; 38
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	80 61       	ori	r24, 0x10	; 16
    1a7e:	8c 93       	st	X, r24
	return getBit(ADMUX,ADMUX_ADLAR)? ADCL>>6|ADCH<<2 :ADCL|ADCH<<8;
    1a80:	e7 e2       	ldi	r30, 0x27	; 39
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	82 95       	swap	r24
    1a88:	86 95       	lsr	r24
    1a8a:	87 70       	andi	r24, 0x07	; 7
    1a8c:	88 2f       	mov	r24, r24
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	81 70       	andi	r24, 0x01	; 1
    1a92:	90 70       	andi	r25, 0x00	; 0
    1a94:	88 23       	and	r24, r24
    1a96:	c1 f0       	breq	.+48     	; 0x1ac8 <MADC_u16Read+0xa6>
    1a98:	e4 e2       	ldi	r30, 0x24	; 36
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	82 95       	swap	r24
    1aa0:	86 95       	lsr	r24
    1aa2:	86 95       	lsr	r24
    1aa4:	83 70       	andi	r24, 0x03	; 3
    1aa6:	28 2f       	mov	r18, r24
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	e5 e2       	ldi	r30, 0x25	; 37
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	88 2f       	mov	r24, r24
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	88 0f       	add	r24, r24
    1ab6:	99 1f       	adc	r25, r25
    1ab8:	88 0f       	add	r24, r24
    1aba:	99 1f       	adc	r25, r25
    1abc:	a9 01       	movw	r20, r18
    1abe:	48 2b       	or	r20, r24
    1ac0:	59 2b       	or	r21, r25
    1ac2:	5b 83       	std	Y+3, r21	; 0x03
    1ac4:	4a 83       	std	Y+2, r20	; 0x02
    1ac6:	11 c0       	rjmp	.+34     	; 0x1aea <MADC_u16Read+0xc8>
    1ac8:	e4 e2       	ldi	r30, 0x24	; 36
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	28 2f       	mov	r18, r24
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	e5 e2       	ldi	r30, 0x25	; 37
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	88 2f       	mov	r24, r24
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	98 2f       	mov	r25, r24
    1ade:	88 27       	eor	r24, r24
    1ae0:	a9 01       	movw	r20, r18
    1ae2:	48 2b       	or	r20, r24
    1ae4:	59 2b       	or	r21, r25
    1ae6:	5b 83       	std	Y+3, r21	; 0x03
    1ae8:	4a 83       	std	Y+2, r20	; 0x02
    1aea:	8a 81       	ldd	r24, Y+2	; 0x02
    1aec:	9b 81       	ldd	r25, Y+3	; 0x03
}
    1aee:	0f 90       	pop	r0
    1af0:	0f 90       	pop	r0
    1af2:	0f 90       	pop	r0
    1af4:	cf 91       	pop	r28
    1af6:	df 91       	pop	r29
    1af8:	08 95       	ret

00001afa <MADC_f32getVolt>:
f32 MADC_f32getVolt(u8 channel){
    1afa:	df 93       	push	r29
    1afc:	cf 93       	push	r28
    1afe:	00 d0       	rcall	.+0      	; 0x1b00 <MADC_f32getVolt+0x6>
    1b00:	00 d0       	rcall	.+0      	; 0x1b02 <MADC_f32getVolt+0x8>
    1b02:	0f 92       	push	r0
    1b04:	cd b7       	in	r28, 0x3d	; 61
    1b06:	de b7       	in	r29, 0x3e	; 62
    1b08:	8d 83       	std	Y+5, r24	; 0x05
	f32 volt = (MADC_u16Read(channel)*5.0000)/(1024);
    1b0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0c:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <MADC_u16Read>
    1b10:	cc 01       	movw	r24, r24
    1b12:	a0 e0       	ldi	r26, 0x00	; 0
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	bc 01       	movw	r22, r24
    1b18:	cd 01       	movw	r24, r26
    1b1a:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	bc 01       	movw	r22, r24
    1b24:	cd 01       	movw	r24, r26
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	40 ea       	ldi	r20, 0xA0	; 160
    1b2c:	50 e4       	ldi	r21, 0x40	; 64
    1b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b32:	dc 01       	movw	r26, r24
    1b34:	cb 01       	movw	r24, r22
    1b36:	bc 01       	movw	r22, r24
    1b38:	cd 01       	movw	r24, r26
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	40 e8       	ldi	r20, 0x80	; 128
    1b40:	54 e4       	ldi	r21, 0x44	; 68
    1b42:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	89 83       	std	Y+1, r24	; 0x01
    1b4c:	9a 83       	std	Y+2, r25	; 0x02
    1b4e:	ab 83       	std	Y+3, r26	; 0x03
    1b50:	bc 83       	std	Y+4, r27	; 0x04
	return volt;
    1b52:	89 81       	ldd	r24, Y+1	; 0x01
    1b54:	9a 81       	ldd	r25, Y+2	; 0x02
    1b56:	ab 81       	ldd	r26, Y+3	; 0x03
    1b58:	bc 81       	ldd	r27, Y+4	; 0x04
}
    1b5a:	bc 01       	movw	r22, r24
    1b5c:	cd 01       	movw	r24, r26
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
    1b62:	0f 90       	pop	r0
    1b64:	0f 90       	pop	r0
    1b66:	0f 90       	pop	r0
    1b68:	cf 91       	pop	r28
    1b6a:	df 91       	pop	r29
    1b6c:	08 95       	ret

00001b6e <MADC_u8getTemprature>:
u8 MADC_u8getTemprature(u8 channel){
    1b6e:	df 93       	push	r29
    1b70:	cf 93       	push	r28
    1b72:	0f 92       	push	r0
    1b74:	cd b7       	in	r28, 0x3d	; 61
    1b76:	de b7       	in	r29, 0x3e	; 62
    1b78:	89 83       	std	Y+1, r24	; 0x01
	return MADC_f32getVolt(channel)*100;
    1b7a:	89 81       	ldd	r24, Y+1	; 0x01
    1b7c:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <MADC_f32getVolt>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	bc 01       	movw	r22, r24
    1b86:	cd 01       	movw	r24, r26
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	48 ec       	ldi	r20, 0xC8	; 200
    1b8e:	52 e4       	ldi	r21, 0x42	; 66
    1b90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	bc 01       	movw	r22, r24
    1b9a:	cd 01       	movw	r24, r26
    1b9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
}
    1ba4:	0f 90       	pop	r0
    1ba6:	cf 91       	pop	r28
    1ba8:	df 91       	pop	r29
    1baa:	08 95       	ret

00001bac <util_u8StringCompare>:
 *  Created on: ٠٩‏/٠٩‏/٢٠٢٣
 *      Author: ASHRY
 */
#include "../../LIB/math/datatypes.h"
#include "util.h"
u8 util_u8StringCompare(u8 string1[] , u8 string2[]){
    1bac:	df 93       	push	r29
    1bae:	cf 93       	push	r28
    1bb0:	00 d0       	rcall	.+0      	; 0x1bb2 <util_u8StringCompare+0x6>
    1bb2:	00 d0       	rcall	.+0      	; 0x1bb4 <util_u8StringCompare+0x8>
    1bb4:	00 d0       	rcall	.+0      	; 0x1bb6 <util_u8StringCompare+0xa>
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
    1bba:	9b 83       	std	Y+3, r25	; 0x03
    1bbc:	8a 83       	std	Y+2, r24	; 0x02
    1bbe:	7d 83       	std	Y+5, r23	; 0x05
    1bc0:	6c 83       	std	Y+4, r22	; 0x04
	u8 counter = 0;
    1bc2:	19 82       	std	Y+1, r1	; 0x01
    1bc4:	19 c0       	rjmp	.+50     	; 0x1bf8 <util_u8StringCompare+0x4c>
	while(string1[counter] == string2[counter]){
		if(string1[counter]=='\0' || string2[counter]=='\0'){
    1bc6:	89 81       	ldd	r24, Y+1	; 0x01
    1bc8:	28 2f       	mov	r18, r24
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bce:	9b 81       	ldd	r25, Y+3	; 0x03
    1bd0:	fc 01       	movw	r30, r24
    1bd2:	e2 0f       	add	r30, r18
    1bd4:	f3 1f       	adc	r31, r19
    1bd6:	80 81       	ld	r24, Z
    1bd8:	88 23       	and	r24, r24
    1bda:	11 f1       	breq	.+68     	; 0x1c20 <util_u8StringCompare+0x74>
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	28 2f       	mov	r18, r24
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	8c 81       	ldd	r24, Y+4	; 0x04
    1be4:	9d 81       	ldd	r25, Y+5	; 0x05
    1be6:	fc 01       	movw	r30, r24
    1be8:	e2 0f       	add	r30, r18
    1bea:	f3 1f       	adc	r31, r19
    1bec:	80 81       	ld	r24, Z
    1bee:	88 23       	and	r24, r24
    1bf0:	b9 f0       	breq	.+46     	; 0x1c20 <util_u8StringCompare+0x74>
			break;
		}
		counter++;
    1bf2:	89 81       	ldd	r24, Y+1	; 0x01
    1bf4:	8f 5f       	subi	r24, 0xFF	; 255
    1bf6:	89 83       	std	Y+1, r24	; 0x01
 */
#include "../../LIB/math/datatypes.h"
#include "util.h"
u8 util_u8StringCompare(u8 string1[] , u8 string2[]){
	u8 counter = 0;
	while(string1[counter] == string2[counter]){
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
    1bfa:	28 2f       	mov	r18, r24
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1c00:	9b 81       	ldd	r25, Y+3	; 0x03
    1c02:	fc 01       	movw	r30, r24
    1c04:	e2 0f       	add	r30, r18
    1c06:	f3 1f       	adc	r31, r19
    1c08:	40 81       	ld	r20, Z
    1c0a:	89 81       	ldd	r24, Y+1	; 0x01
    1c0c:	28 2f       	mov	r18, r24
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	8c 81       	ldd	r24, Y+4	; 0x04
    1c12:	9d 81       	ldd	r25, Y+5	; 0x05
    1c14:	fc 01       	movw	r30, r24
    1c16:	e2 0f       	add	r30, r18
    1c18:	f3 1f       	adc	r31, r19
    1c1a:	80 81       	ld	r24, Z
    1c1c:	48 17       	cp	r20, r24
    1c1e:	99 f2       	breq	.-90     	; 0x1bc6 <util_u8StringCompare+0x1a>
		if(string1[counter]=='\0' || string2[counter]=='\0'){
			break;
		}
		counter++;
	}
	if(string1[counter]=='\0' && string2[counter]=='\0'){
    1c20:	89 81       	ldd	r24, Y+1	; 0x01
    1c22:	28 2f       	mov	r18, r24
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	8a 81       	ldd	r24, Y+2	; 0x02
    1c28:	9b 81       	ldd	r25, Y+3	; 0x03
    1c2a:	fc 01       	movw	r30, r24
    1c2c:	e2 0f       	add	r30, r18
    1c2e:	f3 1f       	adc	r31, r19
    1c30:	80 81       	ld	r24, Z
    1c32:	88 23       	and	r24, r24
    1c34:	71 f4       	brne	.+28     	; 0x1c52 <util_u8StringCompare+0xa6>
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
    1c38:	28 2f       	mov	r18, r24
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c40:	fc 01       	movw	r30, r24
    1c42:	e2 0f       	add	r30, r18
    1c44:	f3 1f       	adc	r31, r19
    1c46:	80 81       	ld	r24, Z
    1c48:	88 23       	and	r24, r24
    1c4a:	19 f4       	brne	.+6      	; 0x1c52 <util_u8StringCompare+0xa6>
		return 1;
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	8e 83       	std	Y+6, r24	; 0x06
    1c50:	01 c0       	rjmp	.+2      	; 0x1c54 <util_u8StringCompare+0xa8>
	}else{
		return 0;
    1c52:	1e 82       	std	Y+6, r1	; 0x06
    1c54:	8e 81       	ldd	r24, Y+6	; 0x06
	}
}
    1c56:	26 96       	adiw	r28, 0x06	; 6
    1c58:	0f b6       	in	r0, 0x3f	; 63
    1c5a:	f8 94       	cli
    1c5c:	de bf       	out	0x3e, r29	; 62
    1c5e:	0f be       	out	0x3f, r0	; 63
    1c60:	cd bf       	out	0x3d, r28	; 61
    1c62:	cf 91       	pop	r28
    1c64:	df 91       	pop	r29
    1c66:	08 95       	ret

00001c68 <reverseNumber>:
 *  Created on: ٢٢‏/٠٨‏/٢٠٢٣
 *      Author: ASHRY
 */
#include "../datatypes.h"
#include "operations.h"
void reverseNumber(s32 value,u32 digitsWithZeros , s32*buffer){
    1c68:	ef 92       	push	r14
    1c6a:	ff 92       	push	r15
    1c6c:	0f 93       	push	r16
    1c6e:	1f 93       	push	r17
    1c70:	df 93       	push	r29
    1c72:	cf 93       	push	r28
    1c74:	cd b7       	in	r28, 0x3d	; 61
    1c76:	de b7       	in	r29, 0x3e	; 62
    1c78:	6a 97       	sbiw	r28, 0x1a	; 26
    1c7a:	0f b6       	in	r0, 0x3f	; 63
    1c7c:	f8 94       	cli
    1c7e:	de bf       	out	0x3e, r29	; 62
    1c80:	0f be       	out	0x3f, r0	; 63
    1c82:	cd bf       	out	0x3d, r28	; 61
    1c84:	69 8b       	std	Y+17, r22	; 0x11
    1c86:	7a 8b       	std	Y+18, r23	; 0x12
    1c88:	8b 8b       	std	Y+19, r24	; 0x13
    1c8a:	9c 8b       	std	Y+20, r25	; 0x14
    1c8c:	2d 8b       	std	Y+21, r18	; 0x15
    1c8e:	3e 8b       	std	Y+22, r19	; 0x16
    1c90:	4f 8b       	std	Y+23, r20	; 0x17
    1c92:	58 8f       	std	Y+24, r21	; 0x18
    1c94:	1a 8f       	std	Y+26, r17	; 0x1a
    1c96:	09 8f       	std	Y+25, r16	; 0x19
	s32 cpy_value= value;
    1c98:	89 89       	ldd	r24, Y+17	; 0x11
    1c9a:	9a 89       	ldd	r25, Y+18	; 0x12
    1c9c:	ab 89       	ldd	r26, Y+19	; 0x13
    1c9e:	bc 89       	ldd	r27, Y+20	; 0x14
    1ca0:	8d 87       	std	Y+13, r24	; 0x0d
    1ca2:	9e 87       	std	Y+14, r25	; 0x0e
    1ca4:	af 87       	std	Y+15, r26	; 0x0f
    1ca6:	b8 8b       	std	Y+16, r27	; 0x10
	u32 digitCounter= 1 ;
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	a0 e0       	ldi	r26, 0x00	; 0
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	89 87       	std	Y+9, r24	; 0x09
    1cb2:	9a 87       	std	Y+10, r25	; 0x0a
    1cb4:	ab 87       	std	Y+11, r26	; 0x0b
    1cb6:	bc 87       	std	Y+12, r27	; 0x0c
    1cb8:	24 c0       	rjmp	.+72     	; 0x1d02 <reverseNumber+0x9a>
	while(value){
		value/=10;
    1cba:	89 89       	ldd	r24, Y+17	; 0x11
    1cbc:	9a 89       	ldd	r25, Y+18	; 0x12
    1cbe:	ab 89       	ldd	r26, Y+19	; 0x13
    1cc0:	bc 89       	ldd	r27, Y+20	; 0x14
    1cc2:	2a e0       	ldi	r18, 0x0A	; 10
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	40 e0       	ldi	r20, 0x00	; 0
    1cc8:	50 e0       	ldi	r21, 0x00	; 0
    1cca:	bc 01       	movw	r22, r24
    1ccc:	cd 01       	movw	r24, r26
    1cce:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__divmodsi4>
    1cd2:	da 01       	movw	r26, r20
    1cd4:	c9 01       	movw	r24, r18
    1cd6:	89 8b       	std	Y+17, r24	; 0x11
    1cd8:	9a 8b       	std	Y+18, r25	; 0x12
    1cda:	ab 8b       	std	Y+19, r26	; 0x13
    1cdc:	bc 8b       	std	Y+20, r27	; 0x14
		digitCounter*=10;
    1cde:	89 85       	ldd	r24, Y+9	; 0x09
    1ce0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce2:	ab 85       	ldd	r26, Y+11	; 0x0b
    1ce4:	bc 85       	ldd	r27, Y+12	; 0x0c
    1ce6:	2a e0       	ldi	r18, 0x0A	; 10
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	40 e0       	ldi	r20, 0x00	; 0
    1cec:	50 e0       	ldi	r21, 0x00	; 0
    1cee:	bc 01       	movw	r22, r24
    1cf0:	cd 01       	movw	r24, r26
    1cf2:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__mulsi3>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	89 87       	std	Y+9, r24	; 0x09
    1cfc:	9a 87       	std	Y+10, r25	; 0x0a
    1cfe:	ab 87       	std	Y+11, r26	; 0x0b
    1d00:	bc 87       	std	Y+12, r27	; 0x0c
#include "../datatypes.h"
#include "operations.h"
void reverseNumber(s32 value,u32 digitsWithZeros , s32*buffer){
	s32 cpy_value= value;
	u32 digitCounter= 1 ;
	while(value){
    1d02:	89 89       	ldd	r24, Y+17	; 0x11
    1d04:	9a 89       	ldd	r25, Y+18	; 0x12
    1d06:	ab 89       	ldd	r26, Y+19	; 0x13
    1d08:	bc 89       	ldd	r27, Y+20	; 0x14
    1d0a:	00 97       	sbiw	r24, 0x00	; 0
    1d0c:	a1 05       	cpc	r26, r1
    1d0e:	b1 05       	cpc	r27, r1
    1d10:	a1 f6       	brne	.-88     	; 0x1cba <reverseNumber+0x52>
		value/=10;
		digitCounter*=10;
	}
	u32 digitDifference =digitsWithZeros/digitCounter;
    1d12:	8d 89       	ldd	r24, Y+21	; 0x15
    1d14:	9e 89       	ldd	r25, Y+22	; 0x16
    1d16:	af 89       	ldd	r26, Y+23	; 0x17
    1d18:	b8 8d       	ldd	r27, Y+24	; 0x18
    1d1a:	29 85       	ldd	r18, Y+9	; 0x09
    1d1c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d1e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1d20:	5c 85       	ldd	r21, Y+12	; 0x0c
    1d22:	bc 01       	movw	r22, r24
    1d24:	cd 01       	movw	r24, r26
    1d26:	0e 94 2d 1d 	call	0x3a5a	; 0x3a5a <__udivmodsi4>
    1d2a:	da 01       	movw	r26, r20
    1d2c:	c9 01       	movw	r24, r18
    1d2e:	8d 83       	std	Y+5, r24	; 0x05
    1d30:	9e 83       	std	Y+6, r25	; 0x06
    1d32:	af 83       	std	Y+7, r26	; 0x07
    1d34:	b8 87       	std	Y+8, r27	; 0x08
	for(u32 i= 1;digitCounter>1;i*=10){
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	a0 e0       	ldi	r26, 0x00	; 0
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	89 83       	std	Y+1, r24	; 0x01
    1d40:	9a 83       	std	Y+2, r25	; 0x02
    1d42:	ab 83       	std	Y+3, r26	; 0x03
    1d44:	bc 83       	std	Y+4, r27	; 0x04
    1d46:	60 c0       	rjmp	.+192    	; 0x1e08 <reverseNumber+0x1a0>
		digitCounter/=10;
    1d48:	89 85       	ldd	r24, Y+9	; 0x09
    1d4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d4c:	ab 85       	ldd	r26, Y+11	; 0x0b
    1d4e:	bc 85       	ldd	r27, Y+12	; 0x0c
    1d50:	2a e0       	ldi	r18, 0x0A	; 10
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	40 e0       	ldi	r20, 0x00	; 0
    1d56:	50 e0       	ldi	r21, 0x00	; 0
    1d58:	bc 01       	movw	r22, r24
    1d5a:	cd 01       	movw	r24, r26
    1d5c:	0e 94 2d 1d 	call	0x3a5a	; 0x3a5a <__udivmodsi4>
    1d60:	da 01       	movw	r26, r20
    1d62:	c9 01       	movw	r24, r18
    1d64:	89 87       	std	Y+9, r24	; 0x09
    1d66:	9a 87       	std	Y+10, r25	; 0x0a
    1d68:	ab 87       	std	Y+11, r26	; 0x0b
    1d6a:	bc 87       	std	Y+12, r27	; 0x0c
		*(buffer)+= ((cpy_value/digitCounter)*i);
    1d6c:	e9 8d       	ldd	r30, Y+25	; 0x19
    1d6e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1d70:	80 81       	ld	r24, Z
    1d72:	91 81       	ldd	r25, Z+1	; 0x01
    1d74:	a2 81       	ldd	r26, Z+2	; 0x02
    1d76:	b3 81       	ldd	r27, Z+3	; 0x03
    1d78:	7c 01       	movw	r14, r24
    1d7a:	8d 01       	movw	r16, r26
    1d7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d80:	af 85       	ldd	r26, Y+15	; 0x0f
    1d82:	b8 89       	ldd	r27, Y+16	; 0x10
    1d84:	29 85       	ldd	r18, Y+9	; 0x09
    1d86:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d88:	4b 85       	ldd	r20, Y+11	; 0x0b
    1d8a:	5c 85       	ldd	r21, Y+12	; 0x0c
    1d8c:	bc 01       	movw	r22, r24
    1d8e:	cd 01       	movw	r24, r26
    1d90:	0e 94 2d 1d 	call	0x3a5a	; 0x3a5a <__udivmodsi4>
    1d94:	da 01       	movw	r26, r20
    1d96:	c9 01       	movw	r24, r18
    1d98:	29 81       	ldd	r18, Y+1	; 0x01
    1d9a:	3a 81       	ldd	r19, Y+2	; 0x02
    1d9c:	4b 81       	ldd	r20, Y+3	; 0x03
    1d9e:	5c 81       	ldd	r21, Y+4	; 0x04
    1da0:	bc 01       	movw	r22, r24
    1da2:	cd 01       	movw	r24, r26
    1da4:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__mulsi3>
    1da8:	dc 01       	movw	r26, r24
    1daa:	cb 01       	movw	r24, r22
    1dac:	8e 0d       	add	r24, r14
    1dae:	9f 1d       	adc	r25, r15
    1db0:	a0 1f       	adc	r26, r16
    1db2:	b1 1f       	adc	r27, r17
    1db4:	e9 8d       	ldd	r30, Y+25	; 0x19
    1db6:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1db8:	80 83       	st	Z, r24
    1dba:	91 83       	std	Z+1, r25	; 0x01
    1dbc:	a2 83       	std	Z+2, r26	; 0x02
    1dbe:	b3 83       	std	Z+3, r27	; 0x03
		cpy_value%= digitCounter;
    1dc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc4:	af 85       	ldd	r26, Y+15	; 0x0f
    1dc6:	b8 89       	ldd	r27, Y+16	; 0x10
    1dc8:	29 85       	ldd	r18, Y+9	; 0x09
    1dca:	3a 85       	ldd	r19, Y+10	; 0x0a
    1dcc:	4b 85       	ldd	r20, Y+11	; 0x0b
    1dce:	5c 85       	ldd	r21, Y+12	; 0x0c
    1dd0:	bc 01       	movw	r22, r24
    1dd2:	cd 01       	movw	r24, r26
    1dd4:	0e 94 2d 1d 	call	0x3a5a	; 0x3a5a <__udivmodsi4>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	8d 87       	std	Y+13, r24	; 0x0d
    1dde:	9e 87       	std	Y+14, r25	; 0x0e
    1de0:	af 87       	std	Y+15, r26	; 0x0f
    1de2:	b8 8b       	std	Y+16, r27	; 0x10
	while(value){
		value/=10;
		digitCounter*=10;
	}
	u32 digitDifference =digitsWithZeros/digitCounter;
	for(u32 i= 1;digitCounter>1;i*=10){
    1de4:	89 81       	ldd	r24, Y+1	; 0x01
    1de6:	9a 81       	ldd	r25, Y+2	; 0x02
    1de8:	ab 81       	ldd	r26, Y+3	; 0x03
    1dea:	bc 81       	ldd	r27, Y+4	; 0x04
    1dec:	2a e0       	ldi	r18, 0x0A	; 10
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	40 e0       	ldi	r20, 0x00	; 0
    1df2:	50 e0       	ldi	r21, 0x00	; 0
    1df4:	bc 01       	movw	r22, r24
    1df6:	cd 01       	movw	r24, r26
    1df8:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__mulsi3>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	89 83       	std	Y+1, r24	; 0x01
    1e02:	9a 83       	std	Y+2, r25	; 0x02
    1e04:	ab 83       	std	Y+3, r26	; 0x03
    1e06:	bc 83       	std	Y+4, r27	; 0x04
    1e08:	89 85       	ldd	r24, Y+9	; 0x09
    1e0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0c:	ab 85       	ldd	r26, Y+11	; 0x0b
    1e0e:	bc 85       	ldd	r27, Y+12	; 0x0c
    1e10:	82 30       	cpi	r24, 0x02	; 2
    1e12:	91 05       	cpc	r25, r1
    1e14:	a1 05       	cpc	r26, r1
    1e16:	b1 05       	cpc	r27, r1
    1e18:	08 f0       	brcs	.+2      	; 0x1e1c <reverseNumber+0x1b4>
    1e1a:	96 cf       	rjmp	.-212    	; 0x1d48 <reverseNumber+0xe0>
		digitCounter/=10;
		*(buffer)+= ((cpy_value/digitCounter)*i);
		cpy_value%= digitCounter;
	}
	*(buffer)*=digitDifference;
    1e1c:	e9 8d       	ldd	r30, Y+25	; 0x19
    1e1e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1e20:	80 81       	ld	r24, Z
    1e22:	91 81       	ldd	r25, Z+1	; 0x01
    1e24:	a2 81       	ldd	r26, Z+2	; 0x02
    1e26:	b3 81       	ldd	r27, Z+3	; 0x03
    1e28:	2d 81       	ldd	r18, Y+5	; 0x05
    1e2a:	3e 81       	ldd	r19, Y+6	; 0x06
    1e2c:	4f 81       	ldd	r20, Y+7	; 0x07
    1e2e:	58 85       	ldd	r21, Y+8	; 0x08
    1e30:	bc 01       	movw	r22, r24
    1e32:	cd 01       	movw	r24, r26
    1e34:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__mulsi3>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	e9 8d       	ldd	r30, Y+25	; 0x19
    1e3e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1e40:	80 83       	st	Z, r24
    1e42:	91 83       	std	Z+1, r25	; 0x01
    1e44:	a2 83       	std	Z+2, r26	; 0x02
    1e46:	b3 83       	std	Z+3, r27	; 0x03
}
    1e48:	6a 96       	adiw	r28, 0x1a	; 26
    1e4a:	0f b6       	in	r0, 0x3f	; 63
    1e4c:	f8 94       	cli
    1e4e:	de bf       	out	0x3e, r29	; 62
    1e50:	0f be       	out	0x3f, r0	; 63
    1e52:	cd bf       	out	0x3d, r28	; 61
    1e54:	cf 91       	pop	r28
    1e56:	df 91       	pop	r29
    1e58:	1f 91       	pop	r17
    1e5a:	0f 91       	pop	r16
    1e5c:	ff 90       	pop	r15
    1e5e:	ef 90       	pop	r14
    1e60:	08 95       	ret

00001e62 <HCLCD_vidInit>:
#include "../../LIB/math/datatypes.h"
#include "../../MCAL/dio/dio.h"
#include "lcd.h"

/*to initialize LCD turn port DDR as output and follow instructions specified in data sheet  */
void HCLCD_vidInit(){
    1e62:	0f 93       	push	r16
    1e64:	1f 93       	push	r17
    1e66:	df 93       	push	r29
    1e68:	cf 93       	push	r28
    1e6a:	cd b7       	in	r28, 0x3d	; 61
    1e6c:	de b7       	in	r29, 0x3e	; 62
    1e6e:	c6 54       	subi	r28, 0x46	; 70
    1e70:	d0 40       	sbci	r29, 0x00	; 0
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	f8 94       	cli
    1e76:	de bf       	out	0x3e, r29	; 62
    1e78:	0f be       	out	0x3f, r0	; 63
    1e7a:	cd bf       	out	0x3d, r28	; 61
	DIO_VIDSetPinDirection(CONTROL_PORT,RS_PIN,HIGH);
    1e7c:	81 e4       	ldi	r24, 0x41	; 65
    1e7e:	60 e0       	ldi	r22, 0x00	; 0
    1e80:	41 e0       	ldi	r20, 0x01	; 1
    1e82:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_VIDSetPinDirection>
	DIO_VIDSetPinDirection(CONTROL_PORT,RW_PIN,HIGH);
    1e86:	81 e4       	ldi	r24, 0x41	; 65
    1e88:	61 e0       	ldi	r22, 0x01	; 1
    1e8a:	41 e0       	ldi	r20, 0x01	; 1
    1e8c:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_VIDSetPinDirection>
	DIO_VIDSetPinDirection(CONTROL_PORT,EN_PIN,HIGH);
    1e90:	81 e4       	ldi	r24, 0x41	; 65
    1e92:	62 e0       	ldi	r22, 0x02	; 2
    1e94:	41 e0       	ldi	r20, 0x01	; 1
    1e96:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_VIDSetPinDirection>
	DIO_VIDSetPortDirection(DATA_PORT,0xff);
    1e9a:	83 e6       	ldi	r24, 0x63	; 99
    1e9c:	6f ef       	ldi	r22, 0xFF	; 255
    1e9e:	0e 94 14 0b 	call	0x1628	; 0x1628 <DIO_VIDSetPortDirection>
    1ea2:	fe 01       	movw	r30, r28
    1ea4:	ed 5b       	subi	r30, 0xBD	; 189
    1ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	a0 ef       	ldi	r26, 0xF0	; 240
    1eae:	b1 e4       	ldi	r27, 0x41	; 65
    1eb0:	80 83       	st	Z, r24
    1eb2:	91 83       	std	Z+1, r25	; 0x01
    1eb4:	a2 83       	std	Z+2, r26	; 0x02
    1eb6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb8:	8e 01       	movw	r16, r28
    1eba:	01 5c       	subi	r16, 0xC1	; 193
    1ebc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	ed 5b       	subi	r30, 0xBD	; 189
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	60 81       	ld	r22, Z
    1ec6:	71 81       	ldd	r23, Z+1	; 0x01
    1ec8:	82 81       	ldd	r24, Z+2	; 0x02
    1eca:	93 81       	ldd	r25, Z+3	; 0x03
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	4a e7       	ldi	r20, 0x7A	; 122
    1ed2:	55 e4       	ldi	r21, 0x45	; 69
    1ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	f8 01       	movw	r30, r16
    1ede:	80 83       	st	Z, r24
    1ee0:	91 83       	std	Z+1, r25	; 0x01
    1ee2:	a2 83       	std	Z+2, r26	; 0x02
    1ee4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ee6:	fe 01       	movw	r30, r28
    1ee8:	ff 96       	adiw	r30, 0x3f	; 63
    1eea:	60 81       	ld	r22, Z
    1eec:	71 81       	ldd	r23, Z+1	; 0x01
    1eee:	82 81       	ldd	r24, Z+2	; 0x02
    1ef0:	93 81       	ldd	r25, Z+3	; 0x03
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	40 e8       	ldi	r20, 0x80	; 128
    1ef8:	5f e3       	ldi	r21, 0x3F	; 63
    1efa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1efe:	88 23       	and	r24, r24
    1f00:	2c f4       	brge	.+10     	; 0x1f0c <HCLCD_vidInit+0xaa>
		__ticks = 1;
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	9e af       	std	Y+62, r25	; 0x3e
    1f08:	8d af       	std	Y+61, r24	; 0x3d
    1f0a:	46 c0       	rjmp	.+140    	; 0x1f98 <HCLCD_vidInit+0x136>
	else if (__tmp > 65535)
    1f0c:	fe 01       	movw	r30, r28
    1f0e:	ff 96       	adiw	r30, 0x3f	; 63
    1f10:	60 81       	ld	r22, Z
    1f12:	71 81       	ldd	r23, Z+1	; 0x01
    1f14:	82 81       	ldd	r24, Z+2	; 0x02
    1f16:	93 81       	ldd	r25, Z+3	; 0x03
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	3f ef       	ldi	r19, 0xFF	; 255
    1f1c:	4f e7       	ldi	r20, 0x7F	; 127
    1f1e:	57 e4       	ldi	r21, 0x47	; 71
    1f20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f24:	18 16       	cp	r1, r24
    1f26:	64 f5       	brge	.+88     	; 0x1f80 <HCLCD_vidInit+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f28:	fe 01       	movw	r30, r28
    1f2a:	ed 5b       	subi	r30, 0xBD	; 189
    1f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2e:	60 81       	ld	r22, Z
    1f30:	71 81       	ldd	r23, Z+1	; 0x01
    1f32:	82 81       	ldd	r24, Z+2	; 0x02
    1f34:	93 81       	ldd	r25, Z+3	; 0x03
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	40 e2       	ldi	r20, 0x20	; 32
    1f3c:	51 e4       	ldi	r21, 0x41	; 65
    1f3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	bc 01       	movw	r22, r24
    1f48:	cd 01       	movw	r24, r26
    1f4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f4e:	dc 01       	movw	r26, r24
    1f50:	cb 01       	movw	r24, r22
    1f52:	9e af       	std	Y+62, r25	; 0x3e
    1f54:	8d af       	std	Y+61, r24	; 0x3d
    1f56:	0f c0       	rjmp	.+30     	; 0x1f76 <HCLCD_vidInit+0x114>
    1f58:	80 e9       	ldi	r24, 0x90	; 144
    1f5a:	91 e0       	ldi	r25, 0x01	; 1
    1f5c:	9c af       	std	Y+60, r25	; 0x3c
    1f5e:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f60:	8b ad       	ldd	r24, Y+59	; 0x3b
    1f62:	9c ad       	ldd	r25, Y+60	; 0x3c
    1f64:	01 97       	sbiw	r24, 0x01	; 1
    1f66:	f1 f7       	brne	.-4      	; 0x1f64 <HCLCD_vidInit+0x102>
    1f68:	9c af       	std	Y+60, r25	; 0x3c
    1f6a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f6c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f6e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f70:	01 97       	sbiw	r24, 0x01	; 1
    1f72:	9e af       	std	Y+62, r25	; 0x3e
    1f74:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f76:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f78:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f7a:	00 97       	sbiw	r24, 0x00	; 0
    1f7c:	69 f7       	brne	.-38     	; 0x1f58 <HCLCD_vidInit+0xf6>
    1f7e:	16 c0       	rjmp	.+44     	; 0x1fac <HCLCD_vidInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f80:	fe 01       	movw	r30, r28
    1f82:	ff 96       	adiw	r30, 0x3f	; 63
    1f84:	60 81       	ld	r22, Z
    1f86:	71 81       	ldd	r23, Z+1	; 0x01
    1f88:	82 81       	ldd	r24, Z+2	; 0x02
    1f8a:	93 81       	ldd	r25, Z+3	; 0x03
    1f8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	9e af       	std	Y+62, r25	; 0x3e
    1f96:	8d af       	std	Y+61, r24	; 0x3d
    1f98:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f9a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f9c:	9a af       	std	Y+58, r25	; 0x3a
    1f9e:	89 af       	std	Y+57, r24	; 0x39
    1fa0:	89 ad       	ldd	r24, Y+57	; 0x39
    1fa2:	9a ad       	ldd	r25, Y+58	; 0x3a
    1fa4:	01 97       	sbiw	r24, 0x01	; 1
    1fa6:	f1 f7       	brne	.-4      	; 0x1fa4 <HCLCD_vidInit+0x142>
    1fa8:	9a af       	std	Y+58, r25	; 0x3a
    1faa:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(30);
	HCLCD_vidSendCommand(0b00111000);
    1fac:	88 e3       	ldi	r24, 0x38	; 56
    1fae:	0e 94 b6 11 	call	0x236c	; 0x236c <HCLCD_vidSendCommand>
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	a0 e8       	ldi	r26, 0x80	; 128
    1fb8:	bf e3       	ldi	r27, 0x3F	; 63
    1fba:	8d ab       	std	Y+53, r24	; 0x35
    1fbc:	9e ab       	std	Y+54, r25	; 0x36
    1fbe:	af ab       	std	Y+55, r26	; 0x37
    1fc0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc2:	6d a9       	ldd	r22, Y+53	; 0x35
    1fc4:	7e a9       	ldd	r23, Y+54	; 0x36
    1fc6:	8f a9       	ldd	r24, Y+55	; 0x37
    1fc8:	98 ad       	ldd	r25, Y+56	; 0x38
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	4a e7       	ldi	r20, 0x7A	; 122
    1fd0:	55 e4       	ldi	r21, 0x45	; 69
    1fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	89 ab       	std	Y+49, r24	; 0x31
    1fdc:	9a ab       	std	Y+50, r25	; 0x32
    1fde:	ab ab       	std	Y+51, r26	; 0x33
    1fe0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fe2:	69 a9       	ldd	r22, Y+49	; 0x31
    1fe4:	7a a9       	ldd	r23, Y+50	; 0x32
    1fe6:	8b a9       	ldd	r24, Y+51	; 0x33
    1fe8:	9c a9       	ldd	r25, Y+52	; 0x34
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	40 e8       	ldi	r20, 0x80	; 128
    1ff0:	5f e3       	ldi	r21, 0x3F	; 63
    1ff2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ff6:	88 23       	and	r24, r24
    1ff8:	2c f4       	brge	.+10     	; 0x2004 <HCLCD_vidInit+0x1a2>
		__ticks = 1;
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	98 ab       	std	Y+48, r25	; 0x30
    2000:	8f a7       	std	Y+47, r24	; 0x2f
    2002:	3f c0       	rjmp	.+126    	; 0x2082 <HCLCD_vidInit+0x220>
	else if (__tmp > 65535)
    2004:	69 a9       	ldd	r22, Y+49	; 0x31
    2006:	7a a9       	ldd	r23, Y+50	; 0x32
    2008:	8b a9       	ldd	r24, Y+51	; 0x33
    200a:	9c a9       	ldd	r25, Y+52	; 0x34
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	3f ef       	ldi	r19, 0xFF	; 255
    2010:	4f e7       	ldi	r20, 0x7F	; 127
    2012:	57 e4       	ldi	r21, 0x47	; 71
    2014:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2018:	18 16       	cp	r1, r24
    201a:	4c f5       	brge	.+82     	; 0x206e <HCLCD_vidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    201c:	6d a9       	ldd	r22, Y+53	; 0x35
    201e:	7e a9       	ldd	r23, Y+54	; 0x36
    2020:	8f a9       	ldd	r24, Y+55	; 0x37
    2022:	98 ad       	ldd	r25, Y+56	; 0x38
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	40 e2       	ldi	r20, 0x20	; 32
    202a:	51 e4       	ldi	r21, 0x41	; 65
    202c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	bc 01       	movw	r22, r24
    2036:	cd 01       	movw	r24, r26
    2038:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	98 ab       	std	Y+48, r25	; 0x30
    2042:	8f a7       	std	Y+47, r24	; 0x2f
    2044:	0f c0       	rjmp	.+30     	; 0x2064 <HCLCD_vidInit+0x202>
    2046:	80 e9       	ldi	r24, 0x90	; 144
    2048:	91 e0       	ldi	r25, 0x01	; 1
    204a:	9e a7       	std	Y+46, r25	; 0x2e
    204c:	8d a7       	std	Y+45, r24	; 0x2d
    204e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2050:	9e a5       	ldd	r25, Y+46	; 0x2e
    2052:	01 97       	sbiw	r24, 0x01	; 1
    2054:	f1 f7       	brne	.-4      	; 0x2052 <HCLCD_vidInit+0x1f0>
    2056:	9e a7       	std	Y+46, r25	; 0x2e
    2058:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    205a:	8f a5       	ldd	r24, Y+47	; 0x2f
    205c:	98 a9       	ldd	r25, Y+48	; 0x30
    205e:	01 97       	sbiw	r24, 0x01	; 1
    2060:	98 ab       	std	Y+48, r25	; 0x30
    2062:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2064:	8f a5       	ldd	r24, Y+47	; 0x2f
    2066:	98 a9       	ldd	r25, Y+48	; 0x30
    2068:	00 97       	sbiw	r24, 0x00	; 0
    206a:	69 f7       	brne	.-38     	; 0x2046 <HCLCD_vidInit+0x1e4>
    206c:	14 c0       	rjmp	.+40     	; 0x2096 <HCLCD_vidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    206e:	69 a9       	ldd	r22, Y+49	; 0x31
    2070:	7a a9       	ldd	r23, Y+50	; 0x32
    2072:	8b a9       	ldd	r24, Y+51	; 0x33
    2074:	9c a9       	ldd	r25, Y+52	; 0x34
    2076:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	98 ab       	std	Y+48, r25	; 0x30
    2080:	8f a7       	std	Y+47, r24	; 0x2f
    2082:	8f a5       	ldd	r24, Y+47	; 0x2f
    2084:	98 a9       	ldd	r25, Y+48	; 0x30
    2086:	9c a7       	std	Y+44, r25	; 0x2c
    2088:	8b a7       	std	Y+43, r24	; 0x2b
    208a:	8b a5       	ldd	r24, Y+43	; 0x2b
    208c:	9c a5       	ldd	r25, Y+44	; 0x2c
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	f1 f7       	brne	.-4      	; 0x208e <HCLCD_vidInit+0x22c>
    2092:	9c a7       	std	Y+44, r25	; 0x2c
    2094:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	HCLCD_vidSendCommand(0b00001110);
    2096:	8e e0       	ldi	r24, 0x0E	; 14
    2098:	0e 94 b6 11 	call	0x236c	; 0x236c <HCLCD_vidSendCommand>
    209c:	80 e0       	ldi	r24, 0x00	; 0
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	a0 e8       	ldi	r26, 0x80	; 128
    20a2:	bf e3       	ldi	r27, 0x3F	; 63
    20a4:	8f a3       	std	Y+39, r24	; 0x27
    20a6:	98 a7       	std	Y+40, r25	; 0x28
    20a8:	a9 a7       	std	Y+41, r26	; 0x29
    20aa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ac:	6f a1       	ldd	r22, Y+39	; 0x27
    20ae:	78 a5       	ldd	r23, Y+40	; 0x28
    20b0:	89 a5       	ldd	r24, Y+41	; 0x29
    20b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	4a e7       	ldi	r20, 0x7A	; 122
    20ba:	55 e4       	ldi	r21, 0x45	; 69
    20bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	8b a3       	std	Y+35, r24	; 0x23
    20c6:	9c a3       	std	Y+36, r25	; 0x24
    20c8:	ad a3       	std	Y+37, r26	; 0x25
    20ca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20cc:	6b a1       	ldd	r22, Y+35	; 0x23
    20ce:	7c a1       	ldd	r23, Y+36	; 0x24
    20d0:	8d a1       	ldd	r24, Y+37	; 0x25
    20d2:	9e a1       	ldd	r25, Y+38	; 0x26
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	40 e8       	ldi	r20, 0x80	; 128
    20da:	5f e3       	ldi	r21, 0x3F	; 63
    20dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20e0:	88 23       	and	r24, r24
    20e2:	2c f4       	brge	.+10     	; 0x20ee <HCLCD_vidInit+0x28c>
		__ticks = 1;
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	9a a3       	std	Y+34, r25	; 0x22
    20ea:	89 a3       	std	Y+33, r24	; 0x21
    20ec:	3f c0       	rjmp	.+126    	; 0x216c <HCLCD_vidInit+0x30a>
	else if (__tmp > 65535)
    20ee:	6b a1       	ldd	r22, Y+35	; 0x23
    20f0:	7c a1       	ldd	r23, Y+36	; 0x24
    20f2:	8d a1       	ldd	r24, Y+37	; 0x25
    20f4:	9e a1       	ldd	r25, Y+38	; 0x26
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	3f ef       	ldi	r19, 0xFF	; 255
    20fa:	4f e7       	ldi	r20, 0x7F	; 127
    20fc:	57 e4       	ldi	r21, 0x47	; 71
    20fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2102:	18 16       	cp	r1, r24
    2104:	4c f5       	brge	.+82     	; 0x2158 <HCLCD_vidInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2106:	6f a1       	ldd	r22, Y+39	; 0x27
    2108:	78 a5       	ldd	r23, Y+40	; 0x28
    210a:	89 a5       	ldd	r24, Y+41	; 0x29
    210c:	9a a5       	ldd	r25, Y+42	; 0x2a
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	40 e2       	ldi	r20, 0x20	; 32
    2114:	51 e4       	ldi	r21, 0x41	; 65
    2116:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	bc 01       	movw	r22, r24
    2120:	cd 01       	movw	r24, r26
    2122:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	9a a3       	std	Y+34, r25	; 0x22
    212c:	89 a3       	std	Y+33, r24	; 0x21
    212e:	0f c0       	rjmp	.+30     	; 0x214e <HCLCD_vidInit+0x2ec>
    2130:	80 e9       	ldi	r24, 0x90	; 144
    2132:	91 e0       	ldi	r25, 0x01	; 1
    2134:	98 a3       	std	Y+32, r25	; 0x20
    2136:	8f 8f       	std	Y+31, r24	; 0x1f
    2138:	8f 8d       	ldd	r24, Y+31	; 0x1f
    213a:	98 a1       	ldd	r25, Y+32	; 0x20
    213c:	01 97       	sbiw	r24, 0x01	; 1
    213e:	f1 f7       	brne	.-4      	; 0x213c <HCLCD_vidInit+0x2da>
    2140:	98 a3       	std	Y+32, r25	; 0x20
    2142:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2144:	89 a1       	ldd	r24, Y+33	; 0x21
    2146:	9a a1       	ldd	r25, Y+34	; 0x22
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	9a a3       	std	Y+34, r25	; 0x22
    214c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    214e:	89 a1       	ldd	r24, Y+33	; 0x21
    2150:	9a a1       	ldd	r25, Y+34	; 0x22
    2152:	00 97       	sbiw	r24, 0x00	; 0
    2154:	69 f7       	brne	.-38     	; 0x2130 <HCLCD_vidInit+0x2ce>
    2156:	14 c0       	rjmp	.+40     	; 0x2180 <HCLCD_vidInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2158:	6b a1       	ldd	r22, Y+35	; 0x23
    215a:	7c a1       	ldd	r23, Y+36	; 0x24
    215c:	8d a1       	ldd	r24, Y+37	; 0x25
    215e:	9e a1       	ldd	r25, Y+38	; 0x26
    2160:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	9a a3       	std	Y+34, r25	; 0x22
    216a:	89 a3       	std	Y+33, r24	; 0x21
    216c:	89 a1       	ldd	r24, Y+33	; 0x21
    216e:	9a a1       	ldd	r25, Y+34	; 0x22
    2170:	9e 8f       	std	Y+30, r25	; 0x1e
    2172:	8d 8f       	std	Y+29, r24	; 0x1d
    2174:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2176:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2178:	01 97       	sbiw	r24, 0x01	; 1
    217a:	f1 f7       	brne	.-4      	; 0x2178 <HCLCD_vidInit+0x316>
    217c:	9e 8f       	std	Y+30, r25	; 0x1e
    217e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	HCLCD_vidSendCommand(0b00000001);
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	0e 94 b6 11 	call	0x236c	; 0x236c <HCLCD_vidSendCommand>
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	a0 e0       	ldi	r26, 0x00	; 0
    218c:	b0 e4       	ldi	r27, 0x40	; 64
    218e:	89 8f       	std	Y+25, r24	; 0x19
    2190:	9a 8f       	std	Y+26, r25	; 0x1a
    2192:	ab 8f       	std	Y+27, r26	; 0x1b
    2194:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2196:	69 8d       	ldd	r22, Y+25	; 0x19
    2198:	7a 8d       	ldd	r23, Y+26	; 0x1a
    219a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    219c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	4a e7       	ldi	r20, 0x7A	; 122
    21a4:	55 e4       	ldi	r21, 0x45	; 69
    21a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	8d 8b       	std	Y+21, r24	; 0x15
    21b0:	9e 8b       	std	Y+22, r25	; 0x16
    21b2:	af 8b       	std	Y+23, r26	; 0x17
    21b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21b6:	6d 89       	ldd	r22, Y+21	; 0x15
    21b8:	7e 89       	ldd	r23, Y+22	; 0x16
    21ba:	8f 89       	ldd	r24, Y+23	; 0x17
    21bc:	98 8d       	ldd	r25, Y+24	; 0x18
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	40 e8       	ldi	r20, 0x80	; 128
    21c4:	5f e3       	ldi	r21, 0x3F	; 63
    21c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21ca:	88 23       	and	r24, r24
    21cc:	2c f4       	brge	.+10     	; 0x21d8 <HCLCD_vidInit+0x376>
		__ticks = 1;
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	9c 8b       	std	Y+20, r25	; 0x14
    21d4:	8b 8b       	std	Y+19, r24	; 0x13
    21d6:	3f c0       	rjmp	.+126    	; 0x2256 <HCLCD_vidInit+0x3f4>
	else if (__tmp > 65535)
    21d8:	6d 89       	ldd	r22, Y+21	; 0x15
    21da:	7e 89       	ldd	r23, Y+22	; 0x16
    21dc:	8f 89       	ldd	r24, Y+23	; 0x17
    21de:	98 8d       	ldd	r25, Y+24	; 0x18
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	3f ef       	ldi	r19, 0xFF	; 255
    21e4:	4f e7       	ldi	r20, 0x7F	; 127
    21e6:	57 e4       	ldi	r21, 0x47	; 71
    21e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21ec:	18 16       	cp	r1, r24
    21ee:	4c f5       	brge	.+82     	; 0x2242 <HCLCD_vidInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f0:	69 8d       	ldd	r22, Y+25	; 0x19
    21f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	40 e2       	ldi	r20, 0x20	; 32
    21fe:	51 e4       	ldi	r21, 0x41	; 65
    2200:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	bc 01       	movw	r22, r24
    220a:	cd 01       	movw	r24, r26
    220c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	9c 8b       	std	Y+20, r25	; 0x14
    2216:	8b 8b       	std	Y+19, r24	; 0x13
    2218:	0f c0       	rjmp	.+30     	; 0x2238 <HCLCD_vidInit+0x3d6>
    221a:	80 e9       	ldi	r24, 0x90	; 144
    221c:	91 e0       	ldi	r25, 0x01	; 1
    221e:	9a 8b       	std	Y+18, r25	; 0x12
    2220:	89 8b       	std	Y+17, r24	; 0x11
    2222:	89 89       	ldd	r24, Y+17	; 0x11
    2224:	9a 89       	ldd	r25, Y+18	; 0x12
    2226:	01 97       	sbiw	r24, 0x01	; 1
    2228:	f1 f7       	brne	.-4      	; 0x2226 <HCLCD_vidInit+0x3c4>
    222a:	9a 8b       	std	Y+18, r25	; 0x12
    222c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    222e:	8b 89       	ldd	r24, Y+19	; 0x13
    2230:	9c 89       	ldd	r25, Y+20	; 0x14
    2232:	01 97       	sbiw	r24, 0x01	; 1
    2234:	9c 8b       	std	Y+20, r25	; 0x14
    2236:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2238:	8b 89       	ldd	r24, Y+19	; 0x13
    223a:	9c 89       	ldd	r25, Y+20	; 0x14
    223c:	00 97       	sbiw	r24, 0x00	; 0
    223e:	69 f7       	brne	.-38     	; 0x221a <HCLCD_vidInit+0x3b8>
    2240:	14 c0       	rjmp	.+40     	; 0x226a <HCLCD_vidInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2242:	6d 89       	ldd	r22, Y+21	; 0x15
    2244:	7e 89       	ldd	r23, Y+22	; 0x16
    2246:	8f 89       	ldd	r24, Y+23	; 0x17
    2248:	98 8d       	ldd	r25, Y+24	; 0x18
    224a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	9c 8b       	std	Y+20, r25	; 0x14
    2254:	8b 8b       	std	Y+19, r24	; 0x13
    2256:	8b 89       	ldd	r24, Y+19	; 0x13
    2258:	9c 89       	ldd	r25, Y+20	; 0x14
    225a:	98 8b       	std	Y+16, r25	; 0x10
    225c:	8f 87       	std	Y+15, r24	; 0x0f
    225e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2260:	98 89       	ldd	r25, Y+16	; 0x10
    2262:	01 97       	sbiw	r24, 0x01	; 1
    2264:	f1 f7       	brne	.-4      	; 0x2262 <HCLCD_vidInit+0x400>
    2266:	98 8b       	std	Y+16, r25	; 0x10
    2268:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	HCLCD_vidSendCommand(0b00000110);
    226a:	86 e0       	ldi	r24, 0x06	; 6
    226c:	0e 94 b6 11 	call	0x236c	; 0x236c <HCLCD_vidSendCommand>
    2270:	80 e0       	ldi	r24, 0x00	; 0
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	a0 e8       	ldi	r26, 0x80	; 128
    2276:	bf e3       	ldi	r27, 0x3F	; 63
    2278:	8b 87       	std	Y+11, r24	; 0x0b
    227a:	9c 87       	std	Y+12, r25	; 0x0c
    227c:	ad 87       	std	Y+13, r26	; 0x0d
    227e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2280:	6b 85       	ldd	r22, Y+11	; 0x0b
    2282:	7c 85       	ldd	r23, Y+12	; 0x0c
    2284:	8d 85       	ldd	r24, Y+13	; 0x0d
    2286:	9e 85       	ldd	r25, Y+14	; 0x0e
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	4a e7       	ldi	r20, 0x7A	; 122
    228e:	55 e4       	ldi	r21, 0x45	; 69
    2290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	8f 83       	std	Y+7, r24	; 0x07
    229a:	98 87       	std	Y+8, r25	; 0x08
    229c:	a9 87       	std	Y+9, r26	; 0x09
    229e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22a0:	6f 81       	ldd	r22, Y+7	; 0x07
    22a2:	78 85       	ldd	r23, Y+8	; 0x08
    22a4:	89 85       	ldd	r24, Y+9	; 0x09
    22a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	40 e8       	ldi	r20, 0x80	; 128
    22ae:	5f e3       	ldi	r21, 0x3F	; 63
    22b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22b4:	88 23       	and	r24, r24
    22b6:	2c f4       	brge	.+10     	; 0x22c2 <HCLCD_vidInit+0x460>
		__ticks = 1;
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	9e 83       	std	Y+6, r25	; 0x06
    22be:	8d 83       	std	Y+5, r24	; 0x05
    22c0:	3f c0       	rjmp	.+126    	; 0x2340 <HCLCD_vidInit+0x4de>
	else if (__tmp > 65535)
    22c2:	6f 81       	ldd	r22, Y+7	; 0x07
    22c4:	78 85       	ldd	r23, Y+8	; 0x08
    22c6:	89 85       	ldd	r24, Y+9	; 0x09
    22c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	3f ef       	ldi	r19, 0xFF	; 255
    22ce:	4f e7       	ldi	r20, 0x7F	; 127
    22d0:	57 e4       	ldi	r21, 0x47	; 71
    22d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22d6:	18 16       	cp	r1, r24
    22d8:	4c f5       	brge	.+82     	; 0x232c <HCLCD_vidInit+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22da:	6b 85       	ldd	r22, Y+11	; 0x0b
    22dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    22de:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	40 e2       	ldi	r20, 0x20	; 32
    22e8:	51 e4       	ldi	r21, 0x41	; 65
    22ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	bc 01       	movw	r22, r24
    22f4:	cd 01       	movw	r24, r26
    22f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	9e 83       	std	Y+6, r25	; 0x06
    2300:	8d 83       	std	Y+5, r24	; 0x05
    2302:	0f c0       	rjmp	.+30     	; 0x2322 <HCLCD_vidInit+0x4c0>
    2304:	80 e9       	ldi	r24, 0x90	; 144
    2306:	91 e0       	ldi	r25, 0x01	; 1
    2308:	9c 83       	std	Y+4, r25	; 0x04
    230a:	8b 83       	std	Y+3, r24	; 0x03
    230c:	8b 81       	ldd	r24, Y+3	; 0x03
    230e:	9c 81       	ldd	r25, Y+4	; 0x04
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	f1 f7       	brne	.-4      	; 0x2310 <HCLCD_vidInit+0x4ae>
    2314:	9c 83       	std	Y+4, r25	; 0x04
    2316:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2318:	8d 81       	ldd	r24, Y+5	; 0x05
    231a:	9e 81       	ldd	r25, Y+6	; 0x06
    231c:	01 97       	sbiw	r24, 0x01	; 1
    231e:	9e 83       	std	Y+6, r25	; 0x06
    2320:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2322:	8d 81       	ldd	r24, Y+5	; 0x05
    2324:	9e 81       	ldd	r25, Y+6	; 0x06
    2326:	00 97       	sbiw	r24, 0x00	; 0
    2328:	69 f7       	brne	.-38     	; 0x2304 <HCLCD_vidInit+0x4a2>
    232a:	14 c0       	rjmp	.+40     	; 0x2354 <HCLCD_vidInit+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    232c:	6f 81       	ldd	r22, Y+7	; 0x07
    232e:	78 85       	ldd	r23, Y+8	; 0x08
    2330:	89 85       	ldd	r24, Y+9	; 0x09
    2332:	9a 85       	ldd	r25, Y+10	; 0x0a
    2334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	9e 83       	std	Y+6, r25	; 0x06
    233e:	8d 83       	std	Y+5, r24	; 0x05
    2340:	8d 81       	ldd	r24, Y+5	; 0x05
    2342:	9e 81       	ldd	r25, Y+6	; 0x06
    2344:	9a 83       	std	Y+2, r25	; 0x02
    2346:	89 83       	std	Y+1, r24	; 0x01
    2348:	89 81       	ldd	r24, Y+1	; 0x01
    234a:	9a 81       	ldd	r25, Y+2	; 0x02
    234c:	01 97       	sbiw	r24, 0x01	; 1
    234e:	f1 f7       	brne	.-4      	; 0x234c <HCLCD_vidInit+0x4ea>
    2350:	9a 83       	std	Y+2, r25	; 0x02
    2352:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);


}
    2354:	ca 5b       	subi	r28, 0xBA	; 186
    2356:	df 4f       	sbci	r29, 0xFF	; 255
    2358:	0f b6       	in	r0, 0x3f	; 63
    235a:	f8 94       	cli
    235c:	de bf       	out	0x3e, r29	; 62
    235e:	0f be       	out	0x3f, r0	; 63
    2360:	cd bf       	out	0x3d, r28	; 61
    2362:	cf 91       	pop	r28
    2364:	df 91       	pop	r29
    2366:	1f 91       	pop	r17
    2368:	0f 91       	pop	r16
    236a:	08 95       	ret

0000236c <HCLCD_vidSendCommand>:
/*to send command write at IR RW must be low and RW must be low*/
void HCLCD_vidSendCommand(u8 cpy_u8Command){
    236c:	df 93       	push	r29
    236e:	cf 93       	push	r28
    2370:	cd b7       	in	r28, 0x3d	; 61
    2372:	de b7       	in	r29, 0x3e	; 62
    2374:	6d 97       	sbiw	r28, 0x1d	; 29
    2376:	0f b6       	in	r0, 0x3f	; 63
    2378:	f8 94       	cli
    237a:	de bf       	out	0x3e, r29	; 62
    237c:	0f be       	out	0x3f, r0	; 63
    237e:	cd bf       	out	0x3d, r28	; 61
    2380:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_VIDSetPinValue(CONTROL_PORT,RS_PIN,LOW);
    2382:	81 e4       	ldi	r24, 0x41	; 65
    2384:	60 e0       	ldi	r22, 0x00	; 0
    2386:	40 e0       	ldi	r20, 0x00	; 0
    2388:	0e 94 85 09 	call	0x130a	; 0x130a <DIO_VIDSetPinValue>
	DIO_VIDSetPinValue(CONTROL_PORT,RW_PIN,LOW);
    238c:	81 e4       	ldi	r24, 0x41	; 65
    238e:	61 e0       	ldi	r22, 0x01	; 1
    2390:	40 e0       	ldi	r20, 0x00	; 0
    2392:	0e 94 85 09 	call	0x130a	; 0x130a <DIO_VIDSetPinValue>
	DIO_VIDSetPortValue(DATA_PORT, cpy_u8Command);
    2396:	83 e6       	ldi	r24, 0x63	; 99
    2398:	6d 8d       	ldd	r22, Y+29	; 0x1d
    239a:	0e 94 56 0b 	call	0x16ac	; 0x16ac <DIO_VIDSetPortValue>
	DIO_VIDSetPinValue(CONTROL_PORT,EN_PIN,HIGH);
    239e:	81 e4       	ldi	r24, 0x41	; 65
    23a0:	62 e0       	ldi	r22, 0x02	; 2
    23a2:	41 e0       	ldi	r20, 0x01	; 1
    23a4:	0e 94 85 09 	call	0x130a	; 0x130a <DIO_VIDSetPinValue>
    23a8:	80 e0       	ldi	r24, 0x00	; 0
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	a0 e8       	ldi	r26, 0x80	; 128
    23ae:	bf e3       	ldi	r27, 0x3F	; 63
    23b0:	89 8f       	std	Y+25, r24	; 0x19
    23b2:	9a 8f       	std	Y+26, r25	; 0x1a
    23b4:	ab 8f       	std	Y+27, r26	; 0x1b
    23b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b8:	69 8d       	ldd	r22, Y+25	; 0x19
    23ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	4a e7       	ldi	r20, 0x7A	; 122
    23c6:	55 e4       	ldi	r21, 0x45	; 69
    23c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	8d 8b       	std	Y+21, r24	; 0x15
    23d2:	9e 8b       	std	Y+22, r25	; 0x16
    23d4:	af 8b       	std	Y+23, r26	; 0x17
    23d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23d8:	6d 89       	ldd	r22, Y+21	; 0x15
    23da:	7e 89       	ldd	r23, Y+22	; 0x16
    23dc:	8f 89       	ldd	r24, Y+23	; 0x17
    23de:	98 8d       	ldd	r25, Y+24	; 0x18
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	40 e8       	ldi	r20, 0x80	; 128
    23e6:	5f e3       	ldi	r21, 0x3F	; 63
    23e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23ec:	88 23       	and	r24, r24
    23ee:	2c f4       	brge	.+10     	; 0x23fa <HCLCD_vidSendCommand+0x8e>
		__ticks = 1;
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	9c 8b       	std	Y+20, r25	; 0x14
    23f6:	8b 8b       	std	Y+19, r24	; 0x13
    23f8:	3f c0       	rjmp	.+126    	; 0x2478 <HCLCD_vidSendCommand+0x10c>
	else if (__tmp > 65535)
    23fa:	6d 89       	ldd	r22, Y+21	; 0x15
    23fc:	7e 89       	ldd	r23, Y+22	; 0x16
    23fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2400:	98 8d       	ldd	r25, Y+24	; 0x18
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	3f ef       	ldi	r19, 0xFF	; 255
    2406:	4f e7       	ldi	r20, 0x7F	; 127
    2408:	57 e4       	ldi	r21, 0x47	; 71
    240a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    240e:	18 16       	cp	r1, r24
    2410:	4c f5       	brge	.+82     	; 0x2464 <HCLCD_vidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2412:	69 8d       	ldd	r22, Y+25	; 0x19
    2414:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2416:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2418:	9c 8d       	ldd	r25, Y+28	; 0x1c
    241a:	20 e0       	ldi	r18, 0x00	; 0
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	40 e2       	ldi	r20, 0x20	; 32
    2420:	51 e4       	ldi	r21, 0x41	; 65
    2422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2426:	dc 01       	movw	r26, r24
    2428:	cb 01       	movw	r24, r22
    242a:	bc 01       	movw	r22, r24
    242c:	cd 01       	movw	r24, r26
    242e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2432:	dc 01       	movw	r26, r24
    2434:	cb 01       	movw	r24, r22
    2436:	9c 8b       	std	Y+20, r25	; 0x14
    2438:	8b 8b       	std	Y+19, r24	; 0x13
    243a:	0f c0       	rjmp	.+30     	; 0x245a <HCLCD_vidSendCommand+0xee>
    243c:	80 e9       	ldi	r24, 0x90	; 144
    243e:	91 e0       	ldi	r25, 0x01	; 1
    2440:	9a 8b       	std	Y+18, r25	; 0x12
    2442:	89 8b       	std	Y+17, r24	; 0x11
    2444:	89 89       	ldd	r24, Y+17	; 0x11
    2446:	9a 89       	ldd	r25, Y+18	; 0x12
    2448:	01 97       	sbiw	r24, 0x01	; 1
    244a:	f1 f7       	brne	.-4      	; 0x2448 <HCLCD_vidSendCommand+0xdc>
    244c:	9a 8b       	std	Y+18, r25	; 0x12
    244e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2450:	8b 89       	ldd	r24, Y+19	; 0x13
    2452:	9c 89       	ldd	r25, Y+20	; 0x14
    2454:	01 97       	sbiw	r24, 0x01	; 1
    2456:	9c 8b       	std	Y+20, r25	; 0x14
    2458:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    245a:	8b 89       	ldd	r24, Y+19	; 0x13
    245c:	9c 89       	ldd	r25, Y+20	; 0x14
    245e:	00 97       	sbiw	r24, 0x00	; 0
    2460:	69 f7       	brne	.-38     	; 0x243c <HCLCD_vidSendCommand+0xd0>
    2462:	14 c0       	rjmp	.+40     	; 0x248c <HCLCD_vidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2464:	6d 89       	ldd	r22, Y+21	; 0x15
    2466:	7e 89       	ldd	r23, Y+22	; 0x16
    2468:	8f 89       	ldd	r24, Y+23	; 0x17
    246a:	98 8d       	ldd	r25, Y+24	; 0x18
    246c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	9c 8b       	std	Y+20, r25	; 0x14
    2476:	8b 8b       	std	Y+19, r24	; 0x13
    2478:	8b 89       	ldd	r24, Y+19	; 0x13
    247a:	9c 89       	ldd	r25, Y+20	; 0x14
    247c:	98 8b       	std	Y+16, r25	; 0x10
    247e:	8f 87       	std	Y+15, r24	; 0x0f
    2480:	8f 85       	ldd	r24, Y+15	; 0x0f
    2482:	98 89       	ldd	r25, Y+16	; 0x10
    2484:	01 97       	sbiw	r24, 0x01	; 1
    2486:	f1 f7       	brne	.-4      	; 0x2484 <HCLCD_vidSendCommand+0x118>
    2488:	98 8b       	std	Y+16, r25	; 0x10
    248a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VIDSetPinValue(CONTROL_PORT,EN_PIN,LOW);
    248c:	81 e4       	ldi	r24, 0x41	; 65
    248e:	62 e0       	ldi	r22, 0x02	; 2
    2490:	40 e0       	ldi	r20, 0x00	; 0
    2492:	0e 94 85 09 	call	0x130a	; 0x130a <DIO_VIDSetPinValue>
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	a0 e8       	ldi	r26, 0x80	; 128
    249c:	bf e3       	ldi	r27, 0x3F	; 63
    249e:	8b 87       	std	Y+11, r24	; 0x0b
    24a0:	9c 87       	std	Y+12, r25	; 0x0c
    24a2:	ad 87       	std	Y+13, r26	; 0x0d
    24a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    24a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    24aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	4a e7       	ldi	r20, 0x7A	; 122
    24b4:	55 e4       	ldi	r21, 0x45	; 69
    24b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	8f 83       	std	Y+7, r24	; 0x07
    24c0:	98 87       	std	Y+8, r25	; 0x08
    24c2:	a9 87       	std	Y+9, r26	; 0x09
    24c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24c6:	6f 81       	ldd	r22, Y+7	; 0x07
    24c8:	78 85       	ldd	r23, Y+8	; 0x08
    24ca:	89 85       	ldd	r24, Y+9	; 0x09
    24cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	40 e8       	ldi	r20, 0x80	; 128
    24d4:	5f e3       	ldi	r21, 0x3F	; 63
    24d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24da:	88 23       	and	r24, r24
    24dc:	2c f4       	brge	.+10     	; 0x24e8 <HCLCD_vidSendCommand+0x17c>
		__ticks = 1;
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	9e 83       	std	Y+6, r25	; 0x06
    24e4:	8d 83       	std	Y+5, r24	; 0x05
    24e6:	3f c0       	rjmp	.+126    	; 0x2566 <HCLCD_vidSendCommand+0x1fa>
	else if (__tmp > 65535)
    24e8:	6f 81       	ldd	r22, Y+7	; 0x07
    24ea:	78 85       	ldd	r23, Y+8	; 0x08
    24ec:	89 85       	ldd	r24, Y+9	; 0x09
    24ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	3f ef       	ldi	r19, 0xFF	; 255
    24f4:	4f e7       	ldi	r20, 0x7F	; 127
    24f6:	57 e4       	ldi	r21, 0x47	; 71
    24f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24fc:	18 16       	cp	r1, r24
    24fe:	4c f5       	brge	.+82     	; 0x2552 <HCLCD_vidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2500:	6b 85       	ldd	r22, Y+11	; 0x0b
    2502:	7c 85       	ldd	r23, Y+12	; 0x0c
    2504:	8d 85       	ldd	r24, Y+13	; 0x0d
    2506:	9e 85       	ldd	r25, Y+14	; 0x0e
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	40 e2       	ldi	r20, 0x20	; 32
    250e:	51 e4       	ldi	r21, 0x41	; 65
    2510:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2514:	dc 01       	movw	r26, r24
    2516:	cb 01       	movw	r24, r22
    2518:	bc 01       	movw	r22, r24
    251a:	cd 01       	movw	r24, r26
    251c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22
    2524:	9e 83       	std	Y+6, r25	; 0x06
    2526:	8d 83       	std	Y+5, r24	; 0x05
    2528:	0f c0       	rjmp	.+30     	; 0x2548 <HCLCD_vidSendCommand+0x1dc>
    252a:	80 e9       	ldi	r24, 0x90	; 144
    252c:	91 e0       	ldi	r25, 0x01	; 1
    252e:	9c 83       	std	Y+4, r25	; 0x04
    2530:	8b 83       	std	Y+3, r24	; 0x03
    2532:	8b 81       	ldd	r24, Y+3	; 0x03
    2534:	9c 81       	ldd	r25, Y+4	; 0x04
    2536:	01 97       	sbiw	r24, 0x01	; 1
    2538:	f1 f7       	brne	.-4      	; 0x2536 <HCLCD_vidSendCommand+0x1ca>
    253a:	9c 83       	std	Y+4, r25	; 0x04
    253c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    253e:	8d 81       	ldd	r24, Y+5	; 0x05
    2540:	9e 81       	ldd	r25, Y+6	; 0x06
    2542:	01 97       	sbiw	r24, 0x01	; 1
    2544:	9e 83       	std	Y+6, r25	; 0x06
    2546:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2548:	8d 81       	ldd	r24, Y+5	; 0x05
    254a:	9e 81       	ldd	r25, Y+6	; 0x06
    254c:	00 97       	sbiw	r24, 0x00	; 0
    254e:	69 f7       	brne	.-38     	; 0x252a <HCLCD_vidSendCommand+0x1be>
    2550:	14 c0       	rjmp	.+40     	; 0x257a <HCLCD_vidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2552:	6f 81       	ldd	r22, Y+7	; 0x07
    2554:	78 85       	ldd	r23, Y+8	; 0x08
    2556:	89 85       	ldd	r24, Y+9	; 0x09
    2558:	9a 85       	ldd	r25, Y+10	; 0x0a
    255a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	9e 83       	std	Y+6, r25	; 0x06
    2564:	8d 83       	std	Y+5, r24	; 0x05
    2566:	8d 81       	ldd	r24, Y+5	; 0x05
    2568:	9e 81       	ldd	r25, Y+6	; 0x06
    256a:	9a 83       	std	Y+2, r25	; 0x02
    256c:	89 83       	std	Y+1, r24	; 0x01
    256e:	89 81       	ldd	r24, Y+1	; 0x01
    2570:	9a 81       	ldd	r25, Y+2	; 0x02
    2572:	01 97       	sbiw	r24, 0x01	; 1
    2574:	f1 f7       	brne	.-4      	; 0x2572 <HCLCD_vidSendCommand+0x206>
    2576:	9a 83       	std	Y+2, r25	; 0x02
    2578:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    257a:	6d 96       	adiw	r28, 0x1d	; 29
    257c:	0f b6       	in	r0, 0x3f	; 63
    257e:	f8 94       	cli
    2580:	de bf       	out	0x3e, r29	; 62
    2582:	0f be       	out	0x3f, r0	; 63
    2584:	cd bf       	out	0x3d, r28	; 61
    2586:	cf 91       	pop	r28
    2588:	df 91       	pop	r29
    258a:	08 95       	ret

0000258c <HCLCD_vidSendData>:
void HCLCD_vidSendData(u8 cpy_u8Data){
    258c:	df 93       	push	r29
    258e:	cf 93       	push	r28
    2590:	cd b7       	in	r28, 0x3d	; 61
    2592:	de b7       	in	r29, 0x3e	; 62
    2594:	6d 97       	sbiw	r28, 0x1d	; 29
    2596:	0f b6       	in	r0, 0x3f	; 63
    2598:	f8 94       	cli
    259a:	de bf       	out	0x3e, r29	; 62
    259c:	0f be       	out	0x3f, r0	; 63
    259e:	cd bf       	out	0x3d, r28	; 61
    25a0:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_VIDSetPinValue(CONTROL_PORT,RS_PIN,HIGH);
    25a2:	81 e4       	ldi	r24, 0x41	; 65
    25a4:	60 e0       	ldi	r22, 0x00	; 0
    25a6:	41 e0       	ldi	r20, 0x01	; 1
    25a8:	0e 94 85 09 	call	0x130a	; 0x130a <DIO_VIDSetPinValue>
	DIO_VIDSetPortValue(DATA_PORT, cpy_u8Data);
    25ac:	83 e6       	ldi	r24, 0x63	; 99
    25ae:	6d 8d       	ldd	r22, Y+29	; 0x1d
    25b0:	0e 94 56 0b 	call	0x16ac	; 0x16ac <DIO_VIDSetPortValue>
	DIO_VIDSetPinValue(CONTROL_PORT,EN_PIN,HIGH);
    25b4:	81 e4       	ldi	r24, 0x41	; 65
    25b6:	62 e0       	ldi	r22, 0x02	; 2
    25b8:	41 e0       	ldi	r20, 0x01	; 1
    25ba:	0e 94 85 09 	call	0x130a	; 0x130a <DIO_VIDSetPinValue>
    25be:	80 e0       	ldi	r24, 0x00	; 0
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	a0 e8       	ldi	r26, 0x80	; 128
    25c4:	bf e3       	ldi	r27, 0x3F	; 63
    25c6:	89 8f       	std	Y+25, r24	; 0x19
    25c8:	9a 8f       	std	Y+26, r25	; 0x1a
    25ca:	ab 8f       	std	Y+27, r26	; 0x1b
    25cc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ce:	69 8d       	ldd	r22, Y+25	; 0x19
    25d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	4a e7       	ldi	r20, 0x7A	; 122
    25dc:	55 e4       	ldi	r21, 0x45	; 69
    25de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	8d 8b       	std	Y+21, r24	; 0x15
    25e8:	9e 8b       	std	Y+22, r25	; 0x16
    25ea:	af 8b       	std	Y+23, r26	; 0x17
    25ec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25ee:	6d 89       	ldd	r22, Y+21	; 0x15
    25f0:	7e 89       	ldd	r23, Y+22	; 0x16
    25f2:	8f 89       	ldd	r24, Y+23	; 0x17
    25f4:	98 8d       	ldd	r25, Y+24	; 0x18
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	40 e8       	ldi	r20, 0x80	; 128
    25fc:	5f e3       	ldi	r21, 0x3F	; 63
    25fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2602:	88 23       	and	r24, r24
    2604:	2c f4       	brge	.+10     	; 0x2610 <HCLCD_vidSendData+0x84>
		__ticks = 1;
    2606:	81 e0       	ldi	r24, 0x01	; 1
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	9c 8b       	std	Y+20, r25	; 0x14
    260c:	8b 8b       	std	Y+19, r24	; 0x13
    260e:	3f c0       	rjmp	.+126    	; 0x268e <HCLCD_vidSendData+0x102>
	else if (__tmp > 65535)
    2610:	6d 89       	ldd	r22, Y+21	; 0x15
    2612:	7e 89       	ldd	r23, Y+22	; 0x16
    2614:	8f 89       	ldd	r24, Y+23	; 0x17
    2616:	98 8d       	ldd	r25, Y+24	; 0x18
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	3f ef       	ldi	r19, 0xFF	; 255
    261c:	4f e7       	ldi	r20, 0x7F	; 127
    261e:	57 e4       	ldi	r21, 0x47	; 71
    2620:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2624:	18 16       	cp	r1, r24
    2626:	4c f5       	brge	.+82     	; 0x267a <HCLCD_vidSendData+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2628:	69 8d       	ldd	r22, Y+25	; 0x19
    262a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    262c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    262e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	40 e2       	ldi	r20, 0x20	; 32
    2636:	51 e4       	ldi	r21, 0x41	; 65
    2638:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    263c:	dc 01       	movw	r26, r24
    263e:	cb 01       	movw	r24, r22
    2640:	bc 01       	movw	r22, r24
    2642:	cd 01       	movw	r24, r26
    2644:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2648:	dc 01       	movw	r26, r24
    264a:	cb 01       	movw	r24, r22
    264c:	9c 8b       	std	Y+20, r25	; 0x14
    264e:	8b 8b       	std	Y+19, r24	; 0x13
    2650:	0f c0       	rjmp	.+30     	; 0x2670 <HCLCD_vidSendData+0xe4>
    2652:	80 e9       	ldi	r24, 0x90	; 144
    2654:	91 e0       	ldi	r25, 0x01	; 1
    2656:	9a 8b       	std	Y+18, r25	; 0x12
    2658:	89 8b       	std	Y+17, r24	; 0x11
    265a:	89 89       	ldd	r24, Y+17	; 0x11
    265c:	9a 89       	ldd	r25, Y+18	; 0x12
    265e:	01 97       	sbiw	r24, 0x01	; 1
    2660:	f1 f7       	brne	.-4      	; 0x265e <HCLCD_vidSendData+0xd2>
    2662:	9a 8b       	std	Y+18, r25	; 0x12
    2664:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2666:	8b 89       	ldd	r24, Y+19	; 0x13
    2668:	9c 89       	ldd	r25, Y+20	; 0x14
    266a:	01 97       	sbiw	r24, 0x01	; 1
    266c:	9c 8b       	std	Y+20, r25	; 0x14
    266e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2670:	8b 89       	ldd	r24, Y+19	; 0x13
    2672:	9c 89       	ldd	r25, Y+20	; 0x14
    2674:	00 97       	sbiw	r24, 0x00	; 0
    2676:	69 f7       	brne	.-38     	; 0x2652 <HCLCD_vidSendData+0xc6>
    2678:	14 c0       	rjmp	.+40     	; 0x26a2 <HCLCD_vidSendData+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    267a:	6d 89       	ldd	r22, Y+21	; 0x15
    267c:	7e 89       	ldd	r23, Y+22	; 0x16
    267e:	8f 89       	ldd	r24, Y+23	; 0x17
    2680:	98 8d       	ldd	r25, Y+24	; 0x18
    2682:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2686:	dc 01       	movw	r26, r24
    2688:	cb 01       	movw	r24, r22
    268a:	9c 8b       	std	Y+20, r25	; 0x14
    268c:	8b 8b       	std	Y+19, r24	; 0x13
    268e:	8b 89       	ldd	r24, Y+19	; 0x13
    2690:	9c 89       	ldd	r25, Y+20	; 0x14
    2692:	98 8b       	std	Y+16, r25	; 0x10
    2694:	8f 87       	std	Y+15, r24	; 0x0f
    2696:	8f 85       	ldd	r24, Y+15	; 0x0f
    2698:	98 89       	ldd	r25, Y+16	; 0x10
    269a:	01 97       	sbiw	r24, 0x01	; 1
    269c:	f1 f7       	brne	.-4      	; 0x269a <HCLCD_vidSendData+0x10e>
    269e:	98 8b       	std	Y+16, r25	; 0x10
    26a0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VIDSetPinValue(CONTROL_PORT,EN_PIN,LOW);
    26a2:	81 e4       	ldi	r24, 0x41	; 65
    26a4:	62 e0       	ldi	r22, 0x02	; 2
    26a6:	40 e0       	ldi	r20, 0x00	; 0
    26a8:	0e 94 85 09 	call	0x130a	; 0x130a <DIO_VIDSetPinValue>
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	a0 e8       	ldi	r26, 0x80	; 128
    26b2:	bf e3       	ldi	r27, 0x3F	; 63
    26b4:	8b 87       	std	Y+11, r24	; 0x0b
    26b6:	9c 87       	std	Y+12, r25	; 0x0c
    26b8:	ad 87       	std	Y+13, r26	; 0x0d
    26ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    26be:	7c 85       	ldd	r23, Y+12	; 0x0c
    26c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    26c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	4a e7       	ldi	r20, 0x7A	; 122
    26ca:	55 e4       	ldi	r21, 0x45	; 69
    26cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d0:	dc 01       	movw	r26, r24
    26d2:	cb 01       	movw	r24, r22
    26d4:	8f 83       	std	Y+7, r24	; 0x07
    26d6:	98 87       	std	Y+8, r25	; 0x08
    26d8:	a9 87       	std	Y+9, r26	; 0x09
    26da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26dc:	6f 81       	ldd	r22, Y+7	; 0x07
    26de:	78 85       	ldd	r23, Y+8	; 0x08
    26e0:	89 85       	ldd	r24, Y+9	; 0x09
    26e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e4:	20 e0       	ldi	r18, 0x00	; 0
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	40 e8       	ldi	r20, 0x80	; 128
    26ea:	5f e3       	ldi	r21, 0x3F	; 63
    26ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26f0:	88 23       	and	r24, r24
    26f2:	2c f4       	brge	.+10     	; 0x26fe <HCLCD_vidSendData+0x172>
		__ticks = 1;
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	9e 83       	std	Y+6, r25	; 0x06
    26fa:	8d 83       	std	Y+5, r24	; 0x05
    26fc:	3f c0       	rjmp	.+126    	; 0x277c <HCLCD_vidSendData+0x1f0>
	else if (__tmp > 65535)
    26fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2700:	78 85       	ldd	r23, Y+8	; 0x08
    2702:	89 85       	ldd	r24, Y+9	; 0x09
    2704:	9a 85       	ldd	r25, Y+10	; 0x0a
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	3f ef       	ldi	r19, 0xFF	; 255
    270a:	4f e7       	ldi	r20, 0x7F	; 127
    270c:	57 e4       	ldi	r21, 0x47	; 71
    270e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2712:	18 16       	cp	r1, r24
    2714:	4c f5       	brge	.+82     	; 0x2768 <HCLCD_vidSendData+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2716:	6b 85       	ldd	r22, Y+11	; 0x0b
    2718:	7c 85       	ldd	r23, Y+12	; 0x0c
    271a:	8d 85       	ldd	r24, Y+13	; 0x0d
    271c:	9e 85       	ldd	r25, Y+14	; 0x0e
    271e:	20 e0       	ldi	r18, 0x00	; 0
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	40 e2       	ldi	r20, 0x20	; 32
    2724:	51 e4       	ldi	r21, 0x41	; 65
    2726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272a:	dc 01       	movw	r26, r24
    272c:	cb 01       	movw	r24, r22
    272e:	bc 01       	movw	r22, r24
    2730:	cd 01       	movw	r24, r26
    2732:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	9e 83       	std	Y+6, r25	; 0x06
    273c:	8d 83       	std	Y+5, r24	; 0x05
    273e:	0f c0       	rjmp	.+30     	; 0x275e <HCLCD_vidSendData+0x1d2>
    2740:	80 e9       	ldi	r24, 0x90	; 144
    2742:	91 e0       	ldi	r25, 0x01	; 1
    2744:	9c 83       	std	Y+4, r25	; 0x04
    2746:	8b 83       	std	Y+3, r24	; 0x03
    2748:	8b 81       	ldd	r24, Y+3	; 0x03
    274a:	9c 81       	ldd	r25, Y+4	; 0x04
    274c:	01 97       	sbiw	r24, 0x01	; 1
    274e:	f1 f7       	brne	.-4      	; 0x274c <HCLCD_vidSendData+0x1c0>
    2750:	9c 83       	std	Y+4, r25	; 0x04
    2752:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2754:	8d 81       	ldd	r24, Y+5	; 0x05
    2756:	9e 81       	ldd	r25, Y+6	; 0x06
    2758:	01 97       	sbiw	r24, 0x01	; 1
    275a:	9e 83       	std	Y+6, r25	; 0x06
    275c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    275e:	8d 81       	ldd	r24, Y+5	; 0x05
    2760:	9e 81       	ldd	r25, Y+6	; 0x06
    2762:	00 97       	sbiw	r24, 0x00	; 0
    2764:	69 f7       	brne	.-38     	; 0x2740 <HCLCD_vidSendData+0x1b4>
    2766:	14 c0       	rjmp	.+40     	; 0x2790 <HCLCD_vidSendData+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2768:	6f 81       	ldd	r22, Y+7	; 0x07
    276a:	78 85       	ldd	r23, Y+8	; 0x08
    276c:	89 85       	ldd	r24, Y+9	; 0x09
    276e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2770:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	9e 83       	std	Y+6, r25	; 0x06
    277a:	8d 83       	std	Y+5, r24	; 0x05
    277c:	8d 81       	ldd	r24, Y+5	; 0x05
    277e:	9e 81       	ldd	r25, Y+6	; 0x06
    2780:	9a 83       	std	Y+2, r25	; 0x02
    2782:	89 83       	std	Y+1, r24	; 0x01
    2784:	89 81       	ldd	r24, Y+1	; 0x01
    2786:	9a 81       	ldd	r25, Y+2	; 0x02
    2788:	01 97       	sbiw	r24, 0x01	; 1
    278a:	f1 f7       	brne	.-4      	; 0x2788 <HCLCD_vidSendData+0x1fc>
    278c:	9a 83       	std	Y+2, r25	; 0x02
    278e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    2790:	6d 96       	adiw	r28, 0x1d	; 29
    2792:	0f b6       	in	r0, 0x3f	; 63
    2794:	f8 94       	cli
    2796:	de bf       	out	0x3e, r29	; 62
    2798:	0f be       	out	0x3f, r0	; 63
    279a:	cd bf       	out	0x3d, r28	; 61
    279c:	cf 91       	pop	r28
    279e:	df 91       	pop	r29
    27a0:	08 95       	ret

000027a2 <HCLCD_vidSendString>:
void HCLCD_vidSendString(const u8* add_pu8String){
    27a2:	df 93       	push	r29
    27a4:	cf 93       	push	r28
    27a6:	00 d0       	rcall	.+0      	; 0x27a8 <HCLCD_vidSendString+0x6>
    27a8:	0f 92       	push	r0
    27aa:	cd b7       	in	r28, 0x3d	; 61
    27ac:	de b7       	in	r29, 0x3e	; 62
    27ae:	9b 83       	std	Y+3, r25	; 0x03
    27b0:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 i = 0;add_pu8String[i];i++){
    27b2:	19 82       	std	Y+1, r1	; 0x01
    27b4:	15 c0       	rjmp	.+42     	; 0x27e0 <HCLCD_vidSendString+0x3e>
		if(i==SCREEN_WIDTH){
    27b6:	89 81       	ldd	r24, Y+1	; 0x01
    27b8:	80 31       	cpi	r24, 0x10	; 16
    27ba:	21 f4       	brne	.+8      	; 0x27c4 <HCLCD_vidSendString+0x22>
			HCLCD_vidGoTo(0,1);
    27bc:	80 e0       	ldi	r24, 0x00	; 0
    27be:	61 e0       	ldi	r22, 0x01	; 1
    27c0:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <HCLCD_vidGoTo>
		}
		HCLCD_vidSendData(*(add_pu8String+i));
    27c4:	89 81       	ldd	r24, Y+1	; 0x01
    27c6:	28 2f       	mov	r18, r24
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	8a 81       	ldd	r24, Y+2	; 0x02
    27cc:	9b 81       	ldd	r25, Y+3	; 0x03
    27ce:	fc 01       	movw	r30, r24
    27d0:	e2 0f       	add	r30, r18
    27d2:	f3 1f       	adc	r31, r19
    27d4:	80 81       	ld	r24, Z
    27d6:	0e 94 c6 12 	call	0x258c	; 0x258c <HCLCD_vidSendData>
	DIO_VIDSetPinValue(CONTROL_PORT,EN_PIN,LOW);
	_delay_ms(1);

}
void HCLCD_vidSendString(const u8* add_pu8String){
	for(u8 i = 0;add_pu8String[i];i++){
    27da:	89 81       	ldd	r24, Y+1	; 0x01
    27dc:	8f 5f       	subi	r24, 0xFF	; 255
    27de:	89 83       	std	Y+1, r24	; 0x01
    27e0:	89 81       	ldd	r24, Y+1	; 0x01
    27e2:	28 2f       	mov	r18, r24
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	8a 81       	ldd	r24, Y+2	; 0x02
    27e8:	9b 81       	ldd	r25, Y+3	; 0x03
    27ea:	fc 01       	movw	r30, r24
    27ec:	e2 0f       	add	r30, r18
    27ee:	f3 1f       	adc	r31, r19
    27f0:	80 81       	ld	r24, Z
    27f2:	88 23       	and	r24, r24
    27f4:	01 f7       	brne	.-64     	; 0x27b6 <HCLCD_vidSendString+0x14>
		if(i==SCREEN_WIDTH){
			HCLCD_vidGoTo(0,1);
		}
		HCLCD_vidSendData(*(add_pu8String+i));
	}
}
    27f6:	0f 90       	pop	r0
    27f8:	0f 90       	pop	r0
    27fa:	0f 90       	pop	r0
    27fc:	cf 91       	pop	r28
    27fe:	df 91       	pop	r29
    2800:	08 95       	ret

00002802 <HCLCD_vidSendNumber>:
void HCLCD_vidSendNumber(s32 cpy_s32Number){
    2802:	df 93       	push	r29
    2804:	cf 93       	push	r28
    2806:	cd b7       	in	r28, 0x3d	; 61
    2808:	de b7       	in	r29, 0x3e	; 62
    280a:	2c 97       	sbiw	r28, 0x0c	; 12
    280c:	0f b6       	in	r0, 0x3f	; 63
    280e:	f8 94       	cli
    2810:	de bf       	out	0x3e, r29	; 62
    2812:	0f be       	out	0x3f, r0	; 63
    2814:	cd bf       	out	0x3d, r28	; 61
    2816:	69 87       	std	Y+9, r22	; 0x09
    2818:	7a 87       	std	Y+10, r23	; 0x0a
    281a:	8b 87       	std	Y+11, r24	; 0x0b
    281c:	9c 87       	std	Y+12, r25	; 0x0c
	if(!cpy_s32Number){
    281e:	89 85       	ldd	r24, Y+9	; 0x09
    2820:	9a 85       	ldd	r25, Y+10	; 0x0a
    2822:	ab 85       	ldd	r26, Y+11	; 0x0b
    2824:	bc 85       	ldd	r27, Y+12	; 0x0c
    2826:	00 97       	sbiw	r24, 0x00	; 0
    2828:	a1 05       	cpc	r26, r1
    282a:	b1 05       	cpc	r27, r1
    282c:	21 f4       	brne	.+8      	; 0x2836 <HCLCD_vidSendNumber+0x34>
		HCLCD_vidSendData('0');
    282e:	80 e3       	ldi	r24, 0x30	; 48
    2830:	0e 94 c6 12 	call	0x258c	; 0x258c <HCLCD_vidSendData>
    2834:	18 c0       	rjmp	.+48     	; 0x2866 <HCLCD_vidSendNumber+0x64>
	}else if(cpy_s32Number<0){
    2836:	89 85       	ldd	r24, Y+9	; 0x09
    2838:	9a 85       	ldd	r25, Y+10	; 0x0a
    283a:	ab 85       	ldd	r26, Y+11	; 0x0b
    283c:	bc 85       	ldd	r27, Y+12	; 0x0c
    283e:	bb 23       	and	r27, r27
    2840:	94 f4       	brge	.+36     	; 0x2866 <HCLCD_vidSendNumber+0x64>
		HCLCD_vidSendData('-');
    2842:	8d e2       	ldi	r24, 0x2D	; 45
    2844:	0e 94 c6 12 	call	0x258c	; 0x258c <HCLCD_vidSendData>
		cpy_s32Number *=-1;
    2848:	89 85       	ldd	r24, Y+9	; 0x09
    284a:	9a 85       	ldd	r25, Y+10	; 0x0a
    284c:	ab 85       	ldd	r26, Y+11	; 0x0b
    284e:	bc 85       	ldd	r27, Y+12	; 0x0c
    2850:	b0 95       	com	r27
    2852:	a0 95       	com	r26
    2854:	90 95       	com	r25
    2856:	81 95       	neg	r24
    2858:	9f 4f       	sbci	r25, 0xFF	; 255
    285a:	af 4f       	sbci	r26, 0xFF	; 255
    285c:	bf 4f       	sbci	r27, 0xFF	; 255
    285e:	89 87       	std	Y+9, r24	; 0x09
    2860:	9a 87       	std	Y+10, r25	; 0x0a
    2862:	ab 87       	std	Y+11, r26	; 0x0b
    2864:	bc 87       	std	Y+12, r27	; 0x0c
	}
	u32 counter=1;
    2866:	81 e0       	ldi	r24, 0x01	; 1
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	a0 e0       	ldi	r26, 0x00	; 0
    286c:	b0 e0       	ldi	r27, 0x00	; 0
    286e:	8d 83       	std	Y+5, r24	; 0x05
    2870:	9e 83       	std	Y+6, r25	; 0x06
    2872:	af 83       	std	Y+7, r26	; 0x07
    2874:	b8 87       	std	Y+8, r27	; 0x08
	s32 numValue = cpy_s32Number;
    2876:	89 85       	ldd	r24, Y+9	; 0x09
    2878:	9a 85       	ldd	r25, Y+10	; 0x0a
    287a:	ab 85       	ldd	r26, Y+11	; 0x0b
    287c:	bc 85       	ldd	r27, Y+12	; 0x0c
    287e:	89 83       	std	Y+1, r24	; 0x01
    2880:	9a 83       	std	Y+2, r25	; 0x02
    2882:	ab 83       	std	Y+3, r26	; 0x03
    2884:	bc 83       	std	Y+4, r27	; 0x04
    2886:	24 c0       	rjmp	.+72     	; 0x28d0 <HCLCD_vidSendNumber+0xce>
	while(cpy_s32Number){
		cpy_s32Number= cpy_s32Number/10;
    2888:	89 85       	ldd	r24, Y+9	; 0x09
    288a:	9a 85       	ldd	r25, Y+10	; 0x0a
    288c:	ab 85       	ldd	r26, Y+11	; 0x0b
    288e:	bc 85       	ldd	r27, Y+12	; 0x0c
    2890:	2a e0       	ldi	r18, 0x0A	; 10
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	40 e0       	ldi	r20, 0x00	; 0
    2896:	50 e0       	ldi	r21, 0x00	; 0
    2898:	bc 01       	movw	r22, r24
    289a:	cd 01       	movw	r24, r26
    289c:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__divmodsi4>
    28a0:	da 01       	movw	r26, r20
    28a2:	c9 01       	movw	r24, r18
    28a4:	89 87       	std	Y+9, r24	; 0x09
    28a6:	9a 87       	std	Y+10, r25	; 0x0a
    28a8:	ab 87       	std	Y+11, r26	; 0x0b
    28aa:	bc 87       	std	Y+12, r27	; 0x0c
		counter= counter*10;
    28ac:	8d 81       	ldd	r24, Y+5	; 0x05
    28ae:	9e 81       	ldd	r25, Y+6	; 0x06
    28b0:	af 81       	ldd	r26, Y+7	; 0x07
    28b2:	b8 85       	ldd	r27, Y+8	; 0x08
    28b4:	2a e0       	ldi	r18, 0x0A	; 10
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	40 e0       	ldi	r20, 0x00	; 0
    28ba:	50 e0       	ldi	r21, 0x00	; 0
    28bc:	bc 01       	movw	r22, r24
    28be:	cd 01       	movw	r24, r26
    28c0:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__mulsi3>
    28c4:	dc 01       	movw	r26, r24
    28c6:	cb 01       	movw	r24, r22
    28c8:	8d 83       	std	Y+5, r24	; 0x05
    28ca:	9e 83       	std	Y+6, r25	; 0x06
    28cc:	af 83       	std	Y+7, r26	; 0x07
    28ce:	b8 87       	std	Y+8, r27	; 0x08
		HCLCD_vidSendData('-');
		cpy_s32Number *=-1;
	}
	u32 counter=1;
	s32 numValue = cpy_s32Number;
	while(cpy_s32Number){
    28d0:	89 85       	ldd	r24, Y+9	; 0x09
    28d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d4:	ab 85       	ldd	r26, Y+11	; 0x0b
    28d6:	bc 85       	ldd	r27, Y+12	; 0x0c
    28d8:	00 97       	sbiw	r24, 0x00	; 0
    28da:	a1 05       	cpc	r26, r1
    28dc:	b1 05       	cpc	r27, r1
    28de:	a1 f6       	brne	.-88     	; 0x2888 <HCLCD_vidSendNumber+0x86>
    28e0:	35 c0       	rjmp	.+106    	; 0x294c <HCLCD_vidSendNumber+0x14a>
		cpy_s32Number= cpy_s32Number/10;
		counter= counter*10;
	}
	while(counter>1){
		counter= counter/10;
    28e2:	8d 81       	ldd	r24, Y+5	; 0x05
    28e4:	9e 81       	ldd	r25, Y+6	; 0x06
    28e6:	af 81       	ldd	r26, Y+7	; 0x07
    28e8:	b8 85       	ldd	r27, Y+8	; 0x08
    28ea:	2a e0       	ldi	r18, 0x0A	; 10
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	40 e0       	ldi	r20, 0x00	; 0
    28f0:	50 e0       	ldi	r21, 0x00	; 0
    28f2:	bc 01       	movw	r22, r24
    28f4:	cd 01       	movw	r24, r26
    28f6:	0e 94 2d 1d 	call	0x3a5a	; 0x3a5a <__udivmodsi4>
    28fa:	da 01       	movw	r26, r20
    28fc:	c9 01       	movw	r24, r18
    28fe:	8d 83       	std	Y+5, r24	; 0x05
    2900:	9e 83       	std	Y+6, r25	; 0x06
    2902:	af 83       	std	Y+7, r26	; 0x07
    2904:	b8 87       	std	Y+8, r27	; 0x08
		HCLCD_vidSendData((numValue/counter)+'0');
    2906:	89 81       	ldd	r24, Y+1	; 0x01
    2908:	9a 81       	ldd	r25, Y+2	; 0x02
    290a:	ab 81       	ldd	r26, Y+3	; 0x03
    290c:	bc 81       	ldd	r27, Y+4	; 0x04
    290e:	2d 81       	ldd	r18, Y+5	; 0x05
    2910:	3e 81       	ldd	r19, Y+6	; 0x06
    2912:	4f 81       	ldd	r20, Y+7	; 0x07
    2914:	58 85       	ldd	r21, Y+8	; 0x08
    2916:	bc 01       	movw	r22, r24
    2918:	cd 01       	movw	r24, r26
    291a:	0e 94 2d 1d 	call	0x3a5a	; 0x3a5a <__udivmodsi4>
    291e:	da 01       	movw	r26, r20
    2920:	c9 01       	movw	r24, r18
    2922:	80 5d       	subi	r24, 0xD0	; 208
    2924:	0e 94 c6 12 	call	0x258c	; 0x258c <HCLCD_vidSendData>
		numValue%=counter;
    2928:	89 81       	ldd	r24, Y+1	; 0x01
    292a:	9a 81       	ldd	r25, Y+2	; 0x02
    292c:	ab 81       	ldd	r26, Y+3	; 0x03
    292e:	bc 81       	ldd	r27, Y+4	; 0x04
    2930:	2d 81       	ldd	r18, Y+5	; 0x05
    2932:	3e 81       	ldd	r19, Y+6	; 0x06
    2934:	4f 81       	ldd	r20, Y+7	; 0x07
    2936:	58 85       	ldd	r21, Y+8	; 0x08
    2938:	bc 01       	movw	r22, r24
    293a:	cd 01       	movw	r24, r26
    293c:	0e 94 2d 1d 	call	0x3a5a	; 0x3a5a <__udivmodsi4>
    2940:	dc 01       	movw	r26, r24
    2942:	cb 01       	movw	r24, r22
    2944:	89 83       	std	Y+1, r24	; 0x01
    2946:	9a 83       	std	Y+2, r25	; 0x02
    2948:	ab 83       	std	Y+3, r26	; 0x03
    294a:	bc 83       	std	Y+4, r27	; 0x04
	s32 numValue = cpy_s32Number;
	while(cpy_s32Number){
		cpy_s32Number= cpy_s32Number/10;
		counter= counter*10;
	}
	while(counter>1){
    294c:	8d 81       	ldd	r24, Y+5	; 0x05
    294e:	9e 81       	ldd	r25, Y+6	; 0x06
    2950:	af 81       	ldd	r26, Y+7	; 0x07
    2952:	b8 85       	ldd	r27, Y+8	; 0x08
    2954:	82 30       	cpi	r24, 0x02	; 2
    2956:	91 05       	cpc	r25, r1
    2958:	a1 05       	cpc	r26, r1
    295a:	b1 05       	cpc	r27, r1
    295c:	10 f6       	brcc	.-124    	; 0x28e2 <HCLCD_vidSendNumber+0xe0>
		counter= counter/10;
		HCLCD_vidSendData((numValue/counter)+'0');
		numValue%=counter;
	}
}
    295e:	2c 96       	adiw	r28, 0x0c	; 12
    2960:	0f b6       	in	r0, 0x3f	; 63
    2962:	f8 94       	cli
    2964:	de bf       	out	0x3e, r29	; 62
    2966:	0f be       	out	0x3f, r0	; 63
    2968:	cd bf       	out	0x3d, r28	; 61
    296a:	cf 91       	pop	r28
    296c:	df 91       	pop	r29
    296e:	08 95       	ret

00002970 <HCLCD_vidSendFloat>:
/*with 3 digit after floated point*/
void HCLCD_vidSendFloat(f32 cpy_f32Float){
    2970:	df 93       	push	r29
    2972:	cf 93       	push	r28
    2974:	cd b7       	in	r28, 0x3d	; 61
    2976:	de b7       	in	r29, 0x3e	; 62
    2978:	28 97       	sbiw	r28, 0x08	; 8
    297a:	0f b6       	in	r0, 0x3f	; 63
    297c:	f8 94       	cli
    297e:	de bf       	out	0x3e, r29	; 62
    2980:	0f be       	out	0x3f, r0	; 63
    2982:	cd bf       	out	0x3d, r28	; 61
    2984:	6d 83       	std	Y+5, r22	; 0x05
    2986:	7e 83       	std	Y+6, r23	; 0x06
    2988:	8f 83       	std	Y+7, r24	; 0x07
    298a:	98 87       	std	Y+8, r25	; 0x08
	HCLCD_vidSendNumber((s32)cpy_f32Float);
    298c:	6d 81       	ldd	r22, Y+5	; 0x05
    298e:	7e 81       	ldd	r23, Y+6	; 0x06
    2990:	8f 81       	ldd	r24, Y+7	; 0x07
    2992:	98 85       	ldd	r25, Y+8	; 0x08
    2994:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	bc 01       	movw	r22, r24
    299e:	cd 01       	movw	r24, r26
    29a0:	0e 94 01 14 	call	0x2802	; 0x2802 <HCLCD_vidSendNumber>
	cpy_f32Float-=(s32)cpy_f32Float;
    29a4:	6d 81       	ldd	r22, Y+5	; 0x05
    29a6:	7e 81       	ldd	r23, Y+6	; 0x06
    29a8:	8f 81       	ldd	r24, Y+7	; 0x07
    29aa:	98 85       	ldd	r25, Y+8	; 0x08
    29ac:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	bc 01       	movw	r22, r24
    29b6:	cd 01       	movw	r24, r26
    29b8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    29bc:	9b 01       	movw	r18, r22
    29be:	ac 01       	movw	r20, r24
    29c0:	6d 81       	ldd	r22, Y+5	; 0x05
    29c2:	7e 81       	ldd	r23, Y+6	; 0x06
    29c4:	8f 81       	ldd	r24, Y+7	; 0x07
    29c6:	98 85       	ldd	r25, Y+8	; 0x08
    29c8:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	8d 83       	std	Y+5, r24	; 0x05
    29d2:	9e 83       	std	Y+6, r25	; 0x06
    29d4:	af 83       	std	Y+7, r26	; 0x07
    29d6:	b8 87       	std	Y+8, r27	; 0x08
	HCLCD_vidSendData('.');
    29d8:	8e e2       	ldi	r24, 0x2E	; 46
    29da:	0e 94 c6 12 	call	0x258c	; 0x258c <HCLCD_vidSendData>
	u32 counter = 0;
    29de:	19 82       	std	Y+1, r1	; 0x01
    29e0:	1a 82       	std	Y+2, r1	; 0x02
    29e2:	1b 82       	std	Y+3, r1	; 0x03
    29e4:	1c 82       	std	Y+4, r1	; 0x04
    29e6:	40 c0       	rjmp	.+128    	; 0x2a68 <HCLCD_vidSendFloat+0xf8>
	while(  counter<PERCISION ){
		cpy_f32Float =(cpy_f32Float*10);
    29e8:	6d 81       	ldd	r22, Y+5	; 0x05
    29ea:	7e 81       	ldd	r23, Y+6	; 0x06
    29ec:	8f 81       	ldd	r24, Y+7	; 0x07
    29ee:	98 85       	ldd	r25, Y+8	; 0x08
    29f0:	20 e0       	ldi	r18, 0x00	; 0
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	40 e2       	ldi	r20, 0x20	; 32
    29f6:	51 e4       	ldi	r21, 0x41	; 65
    29f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29fc:	dc 01       	movw	r26, r24
    29fe:	cb 01       	movw	r24, r22
    2a00:	8d 83       	std	Y+5, r24	; 0x05
    2a02:	9e 83       	std	Y+6, r25	; 0x06
    2a04:	af 83       	std	Y+7, r26	; 0x07
    2a06:	b8 87       	std	Y+8, r27	; 0x08
		HCLCD_vidSendData('0'+(u8)cpy_f32Float);
    2a08:	6d 81       	ldd	r22, Y+5	; 0x05
    2a0a:	7e 81       	ldd	r23, Y+6	; 0x06
    2a0c:	8f 81       	ldd	r24, Y+7	; 0x07
    2a0e:	98 85       	ldd	r25, Y+8	; 0x08
    2a10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	80 5d       	subi	r24, 0xD0	; 208
    2a1a:	0e 94 c6 12 	call	0x258c	; 0x258c <HCLCD_vidSendData>
		cpy_f32Float -= (s32)cpy_f32Float;
    2a1e:	6d 81       	ldd	r22, Y+5	; 0x05
    2a20:	7e 81       	ldd	r23, Y+6	; 0x06
    2a22:	8f 81       	ldd	r24, Y+7	; 0x07
    2a24:	98 85       	ldd	r25, Y+8	; 0x08
    2a26:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    2a2a:	dc 01       	movw	r26, r24
    2a2c:	cb 01       	movw	r24, r22
    2a2e:	bc 01       	movw	r22, r24
    2a30:	cd 01       	movw	r24, r26
    2a32:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2a36:	9b 01       	movw	r18, r22
    2a38:	ac 01       	movw	r20, r24
    2a3a:	6d 81       	ldd	r22, Y+5	; 0x05
    2a3c:	7e 81       	ldd	r23, Y+6	; 0x06
    2a3e:	8f 81       	ldd	r24, Y+7	; 0x07
    2a40:	98 85       	ldd	r25, Y+8	; 0x08
    2a42:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2a46:	dc 01       	movw	r26, r24
    2a48:	cb 01       	movw	r24, r22
    2a4a:	8d 83       	std	Y+5, r24	; 0x05
    2a4c:	9e 83       	std	Y+6, r25	; 0x06
    2a4e:	af 83       	std	Y+7, r26	; 0x07
    2a50:	b8 87       	std	Y+8, r27	; 0x08
		counter++;
    2a52:	89 81       	ldd	r24, Y+1	; 0x01
    2a54:	9a 81       	ldd	r25, Y+2	; 0x02
    2a56:	ab 81       	ldd	r26, Y+3	; 0x03
    2a58:	bc 81       	ldd	r27, Y+4	; 0x04
    2a5a:	01 96       	adiw	r24, 0x01	; 1
    2a5c:	a1 1d       	adc	r26, r1
    2a5e:	b1 1d       	adc	r27, r1
    2a60:	89 83       	std	Y+1, r24	; 0x01
    2a62:	9a 83       	std	Y+2, r25	; 0x02
    2a64:	ab 83       	std	Y+3, r26	; 0x03
    2a66:	bc 83       	std	Y+4, r27	; 0x04
void HCLCD_vidSendFloat(f32 cpy_f32Float){
	HCLCD_vidSendNumber((s32)cpy_f32Float);
	cpy_f32Float-=(s32)cpy_f32Float;
	HCLCD_vidSendData('.');
	u32 counter = 0;
	while(  counter<PERCISION ){
    2a68:	89 81       	ldd	r24, Y+1	; 0x01
    2a6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a6c:	ab 81       	ldd	r26, Y+3	; 0x03
    2a6e:	bc 81       	ldd	r27, Y+4	; 0x04
    2a70:	84 30       	cpi	r24, 0x04	; 4
    2a72:	91 05       	cpc	r25, r1
    2a74:	a1 05       	cpc	r26, r1
    2a76:	b1 05       	cpc	r27, r1
    2a78:	08 f4       	brcc	.+2      	; 0x2a7c <HCLCD_vidSendFloat+0x10c>
    2a7a:	b6 cf       	rjmp	.-148    	; 0x29e8 <HCLCD_vidSendFloat+0x78>
		cpy_f32Float =(cpy_f32Float*10);
		HCLCD_vidSendData('0'+(u8)cpy_f32Float);
		cpy_f32Float -= (s32)cpy_f32Float;
		counter++;
	}
}
    2a7c:	28 96       	adiw	r28, 0x08	; 8
    2a7e:	0f b6       	in	r0, 0x3f	; 63
    2a80:	f8 94       	cli
    2a82:	de bf       	out	0x3e, r29	; 62
    2a84:	0f be       	out	0x3f, r0	; 63
    2a86:	cd bf       	out	0x3d, r28	; 61
    2a88:	cf 91       	pop	r28
    2a8a:	df 91       	pop	r29
    2a8c:	08 95       	ret

00002a8e <HCLCD_vidGoTo>:
void HCLCD_vidGoTo(u8 cpy_u8X, u8 cpy_u8Y){
    2a8e:	df 93       	push	r29
    2a90:	cf 93       	push	r28
    2a92:	00 d0       	rcall	.+0      	; 0x2a94 <HCLCD_vidGoTo+0x6>
    2a94:	cd b7       	in	r28, 0x3d	; 61
    2a96:	de b7       	in	r29, 0x3e	; 62
    2a98:	89 83       	std	Y+1, r24	; 0x01
    2a9a:	6a 83       	std	Y+2, r22	; 0x02
	setBit(cpy_u8X,7);
    2a9c:	89 81       	ldd	r24, Y+1	; 0x01
    2a9e:	80 68       	ori	r24, 0x80	; 128
    2aa0:	89 83       	std	Y+1, r24	; 0x01
	if(cpy_u8Y!=0){
    2aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa4:	88 23       	and	r24, r24
    2aa6:	19 f0       	breq	.+6      	; 0x2aae <HCLCD_vidGoTo+0x20>
		setBit(cpy_u8X,6);
    2aa8:	89 81       	ldd	r24, Y+1	; 0x01
    2aaa:	80 64       	ori	r24, 0x40	; 64
    2aac:	89 83       	std	Y+1, r24	; 0x01
	}
	HCLCD_vidSendCommand(cpy_u8X);
    2aae:	89 81       	ldd	r24, Y+1	; 0x01
    2ab0:	0e 94 b6 11 	call	0x236c	; 0x236c <HCLCD_vidSendCommand>
}
    2ab4:	0f 90       	pop	r0
    2ab6:	0f 90       	pop	r0
    2ab8:	cf 91       	pop	r28
    2aba:	df 91       	pop	r29
    2abc:	08 95       	ret

00002abe <HCLCD_vidClear>:
void HCLCD_vidClear(){
    2abe:	df 93       	push	r29
    2ac0:	cf 93       	push	r28
    2ac2:	cd b7       	in	r28, 0x3d	; 61
    2ac4:	de b7       	in	r29, 0x3e	; 62
    2ac6:	2e 97       	sbiw	r28, 0x0e	; 14
    2ac8:	0f b6       	in	r0, 0x3f	; 63
    2aca:	f8 94       	cli
    2acc:	de bf       	out	0x3e, r29	; 62
    2ace:	0f be       	out	0x3f, r0	; 63
    2ad0:	cd bf       	out	0x3d, r28	; 61
	HCLCD_vidSendCommand(0x01);
    2ad2:	81 e0       	ldi	r24, 0x01	; 1
    2ad4:	0e 94 b6 11 	call	0x236c	; 0x236c <HCLCD_vidSendCommand>
    2ad8:	80 e0       	ldi	r24, 0x00	; 0
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	a0 e0       	ldi	r26, 0x00	; 0
    2ade:	b0 e4       	ldi	r27, 0x40	; 64
    2ae0:	8b 87       	std	Y+11, r24	; 0x0b
    2ae2:	9c 87       	std	Y+12, r25	; 0x0c
    2ae4:	ad 87       	std	Y+13, r26	; 0x0d
    2ae6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ae8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aea:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aec:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aee:	9e 85       	ldd	r25, Y+14	; 0x0e
    2af0:	20 e0       	ldi	r18, 0x00	; 0
    2af2:	30 e0       	ldi	r19, 0x00	; 0
    2af4:	4a e7       	ldi	r20, 0x7A	; 122
    2af6:	55 e4       	ldi	r21, 0x45	; 69
    2af8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2afc:	dc 01       	movw	r26, r24
    2afe:	cb 01       	movw	r24, r22
    2b00:	8f 83       	std	Y+7, r24	; 0x07
    2b02:	98 87       	std	Y+8, r25	; 0x08
    2b04:	a9 87       	std	Y+9, r26	; 0x09
    2b06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b08:	6f 81       	ldd	r22, Y+7	; 0x07
    2b0a:	78 85       	ldd	r23, Y+8	; 0x08
    2b0c:	89 85       	ldd	r24, Y+9	; 0x09
    2b0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b10:	20 e0       	ldi	r18, 0x00	; 0
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	40 e8       	ldi	r20, 0x80	; 128
    2b16:	5f e3       	ldi	r21, 0x3F	; 63
    2b18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b1c:	88 23       	and	r24, r24
    2b1e:	2c f4       	brge	.+10     	; 0x2b2a <HCLCD_vidClear+0x6c>
		__ticks = 1;
    2b20:	81 e0       	ldi	r24, 0x01	; 1
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	9e 83       	std	Y+6, r25	; 0x06
    2b26:	8d 83       	std	Y+5, r24	; 0x05
    2b28:	3f c0       	rjmp	.+126    	; 0x2ba8 <HCLCD_vidClear+0xea>
	else if (__tmp > 65535)
    2b2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b2c:	78 85       	ldd	r23, Y+8	; 0x08
    2b2e:	89 85       	ldd	r24, Y+9	; 0x09
    2b30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b32:	20 e0       	ldi	r18, 0x00	; 0
    2b34:	3f ef       	ldi	r19, 0xFF	; 255
    2b36:	4f e7       	ldi	r20, 0x7F	; 127
    2b38:	57 e4       	ldi	r21, 0x47	; 71
    2b3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b3e:	18 16       	cp	r1, r24
    2b40:	4c f5       	brge	.+82     	; 0x2b94 <HCLCD_vidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b42:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b44:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b46:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b48:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	40 e2       	ldi	r20, 0x20	; 32
    2b50:	51 e4       	ldi	r21, 0x41	; 65
    2b52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b56:	dc 01       	movw	r26, r24
    2b58:	cb 01       	movw	r24, r22
    2b5a:	bc 01       	movw	r22, r24
    2b5c:	cd 01       	movw	r24, r26
    2b5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b62:	dc 01       	movw	r26, r24
    2b64:	cb 01       	movw	r24, r22
    2b66:	9e 83       	std	Y+6, r25	; 0x06
    2b68:	8d 83       	std	Y+5, r24	; 0x05
    2b6a:	0f c0       	rjmp	.+30     	; 0x2b8a <HCLCD_vidClear+0xcc>
    2b6c:	80 e9       	ldi	r24, 0x90	; 144
    2b6e:	91 e0       	ldi	r25, 0x01	; 1
    2b70:	9c 83       	std	Y+4, r25	; 0x04
    2b72:	8b 83       	std	Y+3, r24	; 0x03
    2b74:	8b 81       	ldd	r24, Y+3	; 0x03
    2b76:	9c 81       	ldd	r25, Y+4	; 0x04
    2b78:	01 97       	sbiw	r24, 0x01	; 1
    2b7a:	f1 f7       	brne	.-4      	; 0x2b78 <HCLCD_vidClear+0xba>
    2b7c:	9c 83       	std	Y+4, r25	; 0x04
    2b7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b80:	8d 81       	ldd	r24, Y+5	; 0x05
    2b82:	9e 81       	ldd	r25, Y+6	; 0x06
    2b84:	01 97       	sbiw	r24, 0x01	; 1
    2b86:	9e 83       	std	Y+6, r25	; 0x06
    2b88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b8e:	00 97       	sbiw	r24, 0x00	; 0
    2b90:	69 f7       	brne	.-38     	; 0x2b6c <HCLCD_vidClear+0xae>
    2b92:	14 c0       	rjmp	.+40     	; 0x2bbc <HCLCD_vidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b94:	6f 81       	ldd	r22, Y+7	; 0x07
    2b96:	78 85       	ldd	r23, Y+8	; 0x08
    2b98:	89 85       	ldd	r24, Y+9	; 0x09
    2b9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	cb 01       	movw	r24, r22
    2ba4:	9e 83       	std	Y+6, r25	; 0x06
    2ba6:	8d 83       	std	Y+5, r24	; 0x05
    2ba8:	8d 81       	ldd	r24, Y+5	; 0x05
    2baa:	9e 81       	ldd	r25, Y+6	; 0x06
    2bac:	9a 83       	std	Y+2, r25	; 0x02
    2bae:	89 83       	std	Y+1, r24	; 0x01
    2bb0:	89 81       	ldd	r24, Y+1	; 0x01
    2bb2:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb4:	01 97       	sbiw	r24, 0x01	; 1
    2bb6:	f1 f7       	brne	.-4      	; 0x2bb4 <HCLCD_vidClear+0xf6>
    2bb8:	9a 83       	std	Y+2, r25	; 0x02
    2bba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2bbc:	2e 96       	adiw	r28, 0x0e	; 14
    2bbe:	0f b6       	in	r0, 0x3f	; 63
    2bc0:	f8 94       	cli
    2bc2:	de bf       	out	0x3e, r29	; 62
    2bc4:	0f be       	out	0x3f, r0	; 63
    2bc6:	cd bf       	out	0x3d, r28	; 61
    2bc8:	cf 91       	pop	r28
    2bca:	df 91       	pop	r29
    2bcc:	08 95       	ret

00002bce <HCLCD_vidSendSpecialChar>:
void HCLCD_vidSendSpecialChar(const u8* arr_u8Char, u8 cpy_u8BlockNumber){
    2bce:	df 93       	push	r29
    2bd0:	cf 93       	push	r28
    2bd2:	00 d0       	rcall	.+0      	; 0x2bd4 <HCLCD_vidSendSpecialChar+0x6>
    2bd4:	00 d0       	rcall	.+0      	; 0x2bd6 <HCLCD_vidSendSpecialChar+0x8>
    2bd6:	cd b7       	in	r28, 0x3d	; 61
    2bd8:	de b7       	in	r29, 0x3e	; 62
    2bda:	9b 83       	std	Y+3, r25	; 0x03
    2bdc:	8a 83       	std	Y+2, r24	; 0x02
    2bde:	6c 83       	std	Y+4, r22	; 0x04
	HCLCD_vidSendCommand(0x40+(cpy_u8BlockNumber*8));
    2be0:	8c 81       	ldd	r24, Y+4	; 0x04
    2be2:	88 2f       	mov	r24, r24
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	08 96       	adiw	r24, 0x08	; 8
    2be8:	88 0f       	add	r24, r24
    2bea:	99 1f       	adc	r25, r25
    2bec:	88 0f       	add	r24, r24
    2bee:	99 1f       	adc	r25, r25
    2bf0:	88 0f       	add	r24, r24
    2bf2:	99 1f       	adc	r25, r25
    2bf4:	0e 94 b6 11 	call	0x236c	; 0x236c <HCLCD_vidSendCommand>
	for(u8 i=0;i<8;i++)
    2bf8:	19 82       	std	Y+1, r1	; 0x01
    2bfa:	0e c0       	rjmp	.+28     	; 0x2c18 <HCLCD_vidSendSpecialChar+0x4a>
	{
     	 HCLCD_vidSendData(arr_u8Char[i]);
    2bfc:	89 81       	ldd	r24, Y+1	; 0x01
    2bfe:	28 2f       	mov	r18, r24
    2c00:	30 e0       	ldi	r19, 0x00	; 0
    2c02:	8a 81       	ldd	r24, Y+2	; 0x02
    2c04:	9b 81       	ldd	r25, Y+3	; 0x03
    2c06:	fc 01       	movw	r30, r24
    2c08:	e2 0f       	add	r30, r18
    2c0a:	f3 1f       	adc	r31, r19
    2c0c:	80 81       	ld	r24, Z
    2c0e:	0e 94 c6 12 	call	0x258c	; 0x258c <HCLCD_vidSendData>
	HCLCD_vidSendCommand(0x01);
	_delay_ms(2);
}
void HCLCD_vidSendSpecialChar(const u8* arr_u8Char, u8 cpy_u8BlockNumber){
	HCLCD_vidSendCommand(0x40+(cpy_u8BlockNumber*8));
	for(u8 i=0;i<8;i++)
    2c12:	89 81       	ldd	r24, Y+1	; 0x01
    2c14:	8f 5f       	subi	r24, 0xFF	; 255
    2c16:	89 83       	std	Y+1, r24	; 0x01
    2c18:	89 81       	ldd	r24, Y+1	; 0x01
    2c1a:	88 30       	cpi	r24, 0x08	; 8
    2c1c:	78 f3       	brcs	.-34     	; 0x2bfc <HCLCD_vidSendSpecialChar+0x2e>
	{
     	 HCLCD_vidSendData(arr_u8Char[i]);
	}
	HCLCD_vidSendCommand(0x80);
    2c1e:	80 e8       	ldi	r24, 0x80	; 128
    2c20:	0e 94 b6 11 	call	0x236c	; 0x236c <HCLCD_vidSendCommand>
	HCLCD_vidSendCommand(0b00000010);
    2c24:	82 e0       	ldi	r24, 0x02	; 2
    2c26:	0e 94 b6 11 	call	0x236c	; 0x236c <HCLCD_vidSendCommand>



}
    2c2a:	0f 90       	pop	r0
    2c2c:	0f 90       	pop	r0
    2c2e:	0f 90       	pop	r0
    2c30:	0f 90       	pop	r0
    2c32:	cf 91       	pop	r28
    2c34:	df 91       	pop	r29
    2c36:	08 95       	ret

00002c38 <HKEYPAD_vidinit>:
#include "../../LIB/math/datatypes.h"
#include "../../MCAL/dio/dio.h"
#include "keypad.h"
#include "avr/delay.h"
void HKEYPAD_vidinit()
{
    2c38:	df 93       	push	r29
    2c3a:	cf 93       	push	r28
    2c3c:	cd b7       	in	r28, 0x3d	; 61
    2c3e:	de b7       	in	r29, 0x3e	; 62
	DIO_VIDSetPortDirection(PORT_NUM,0x0F);
    2c40:	82 e4       	ldi	r24, 0x42	; 66
    2c42:	6f e0       	ldi	r22, 0x0F	; 15
    2c44:	0e 94 14 0b 	call	0x1628	; 0x1628 <DIO_VIDSetPortDirection>
	DIO_VIDSetPortValue(PORT_NUM,0x7F);
    2c48:	82 e4       	ldi	r24, 0x42	; 66
    2c4a:	6f e7       	ldi	r22, 0x7F	; 127
    2c4c:	0e 94 56 0b 	call	0x16ac	; 0x16ac <DIO_VIDSetPortValue>
}
    2c50:	cf 91       	pop	r28
    2c52:	df 91       	pop	r29
    2c54:	08 95       	ret

00002c56 <HKEYPAD_u8getPressedValue>:
u8 HKEYPAD_u8getPressedValue(){
    2c56:	df 93       	push	r29
    2c58:	cf 93       	push	r28
    2c5a:	cd b7       	in	r28, 0x3d	; 61
    2c5c:	de b7       	in	r29, 0x3e	; 62
    2c5e:	a3 97       	sbiw	r28, 0x23	; 35
    2c60:	0f b6       	in	r0, 0x3f	; 63
    2c62:	f8 94       	cli
    2c64:	de bf       	out	0x3e, r29	; 62
    2c66:	0f be       	out	0x3f, r0	; 63
    2c68:	cd bf       	out	0x3d, r28	; 61
	u8 key ='+';
    2c6a:	8b e2       	ldi	r24, 0x2B	; 43
    2c6c:	89 8b       	std	Y+17, r24	; 0x11
	u8 keys[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
    2c6e:	ce 01       	movw	r24, r28
    2c70:	42 96       	adiw	r24, 0x12	; 18
    2c72:	98 a3       	std	Y+32, r25	; 0x20
    2c74:	8f 8f       	std	Y+31, r24	; 0x1f
    2c76:	ee e2       	ldi	r30, 0x2E	; 46
    2c78:	f2 e0       	ldi	r31, 0x02	; 2
    2c7a:	fa a3       	std	Y+34, r31	; 0x22
    2c7c:	e9 a3       	std	Y+33, r30	; 0x21
    2c7e:	fc e0       	ldi	r31, 0x0C	; 12
    2c80:	fb a3       	std	Y+35, r31	; 0x23
    2c82:	e9 a1       	ldd	r30, Y+33	; 0x21
    2c84:	fa a1       	ldd	r31, Y+34	; 0x22
    2c86:	00 80       	ld	r0, Z
    2c88:	89 a1       	ldd	r24, Y+33	; 0x21
    2c8a:	9a a1       	ldd	r25, Y+34	; 0x22
    2c8c:	01 96       	adiw	r24, 0x01	; 1
    2c8e:	9a a3       	std	Y+34, r25	; 0x22
    2c90:	89 a3       	std	Y+33, r24	; 0x21
    2c92:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2c94:	f8 a1       	ldd	r31, Y+32	; 0x20
    2c96:	00 82       	st	Z, r0
    2c98:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c9a:	98 a1       	ldd	r25, Y+32	; 0x20
    2c9c:	01 96       	adiw	r24, 0x01	; 1
    2c9e:	98 a3       	std	Y+32, r25	; 0x20
    2ca0:	8f 8f       	std	Y+31, r24	; 0x1f
    2ca2:	9b a1       	ldd	r25, Y+35	; 0x23
    2ca4:	91 50       	subi	r25, 0x01	; 1
    2ca6:	9b a3       	std	Y+35, r25	; 0x23
    2ca8:	eb a1       	ldd	r30, Y+35	; 0x23
    2caa:	ee 23       	and	r30, r30
    2cac:	51 f7       	brne	.-44     	; 0x2c82 <HKEYPAD_u8getPressedValue+0x2c>
	u8 i , j;
	for( i=0; i<4; i++){
    2cae:	18 8a       	std	Y+16, r1	; 0x10
    2cb0:	ae c0       	rjmp	.+348    	; 0x2e0e <HKEYPAD_u8getPressedValue+0x1b8>
		DIO_VIDSetPinValue(PORT_NUM,i,LOW);
    2cb2:	82 e4       	ldi	r24, 0x42	; 66
    2cb4:	68 89       	ldd	r22, Y+16	; 0x10
    2cb6:	40 e0       	ldi	r20, 0x00	; 0
    2cb8:	0e 94 85 09 	call	0x130a	; 0x130a <DIO_VIDSetPinValue>
		for(j=4; j<7; j++){
    2cbc:	84 e0       	ldi	r24, 0x04	; 4
    2cbe:	8f 87       	std	Y+15, r24	; 0x0f
    2cc0:	9a c0       	rjmp	.+308    	; 0x2df6 <HKEYPAD_u8getPressedValue+0x1a0>
			u8 buffer=0;
    2cc2:	1e 8e       	std	Y+30, r1	; 0x1e
			DIO_VIDgetPinDirection(PORT_NUM,j,&buffer);
    2cc4:	9e 01       	movw	r18, r28
    2cc6:	22 5e       	subi	r18, 0xE2	; 226
    2cc8:	3f 4f       	sbci	r19, 0xFF	; 255
    2cca:	82 e4       	ldi	r24, 0x42	; 66
    2ccc:	6f 85       	ldd	r22, Y+15	; 0x0f
    2cce:	a9 01       	movw	r20, r18
    2cd0:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VIDgetPinDirection>
			if(buffer!=1){
    2cd4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2cd6:	81 30       	cpi	r24, 0x01	; 1
    2cd8:	c9 f0       	breq	.+50     	; 0x2d0c <HKEYPAD_u8getPressedValue+0xb6>
				key = keys[i][j-4];
    2cda:	88 89       	ldd	r24, Y+16	; 0x10
    2cdc:	28 2f       	mov	r18, r24
    2cde:	30 e0       	ldi	r19, 0x00	; 0
    2ce0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ce2:	88 2f       	mov	r24, r24
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	ac 01       	movw	r20, r24
    2ce8:	44 50       	subi	r20, 0x04	; 4
    2cea:	50 40       	sbci	r21, 0x00	; 0
    2cec:	c9 01       	movw	r24, r18
    2cee:	88 0f       	add	r24, r24
    2cf0:	99 1f       	adc	r25, r25
    2cf2:	82 0f       	add	r24, r18
    2cf4:	93 1f       	adc	r25, r19
    2cf6:	9e 01       	movw	r18, r28
    2cf8:	2f 5f       	subi	r18, 0xFF	; 255
    2cfa:	3f 4f       	sbci	r19, 0xFF	; 255
    2cfc:	82 0f       	add	r24, r18
    2cfe:	93 1f       	adc	r25, r19
    2d00:	84 0f       	add	r24, r20
    2d02:	95 1f       	adc	r25, r21
    2d04:	fc 01       	movw	r30, r24
    2d06:	71 96       	adiw	r30, 0x11	; 17
    2d08:	80 81       	ld	r24, Z
    2d0a:	89 8b       	std	Y+17, r24	; 0x11
    2d0c:	80 e0       	ldi	r24, 0x00	; 0
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	a0 ea       	ldi	r26, 0xA0	; 160
    2d12:	b1 e4       	ldi	r27, 0x41	; 65
    2d14:	8b 87       	std	Y+11, r24	; 0x0b
    2d16:	9c 87       	std	Y+12, r25	; 0x0c
    2d18:	ad 87       	std	Y+13, r26	; 0x0d
    2d1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d20:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d22:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d24:	20 e0       	ldi	r18, 0x00	; 0
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	4a e7       	ldi	r20, 0x7A	; 122
    2d2a:	55 e4       	ldi	r21, 0x45	; 69
    2d2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d30:	dc 01       	movw	r26, r24
    2d32:	cb 01       	movw	r24, r22
    2d34:	8f 83       	std	Y+7, r24	; 0x07
    2d36:	98 87       	std	Y+8, r25	; 0x08
    2d38:	a9 87       	std	Y+9, r26	; 0x09
    2d3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d3e:	78 85       	ldd	r23, Y+8	; 0x08
    2d40:	89 85       	ldd	r24, Y+9	; 0x09
    2d42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	40 e8       	ldi	r20, 0x80	; 128
    2d4a:	5f e3       	ldi	r21, 0x3F	; 63
    2d4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d50:	88 23       	and	r24, r24
    2d52:	2c f4       	brge	.+10     	; 0x2d5e <HKEYPAD_u8getPressedValue+0x108>
		__ticks = 1;
    2d54:	81 e0       	ldi	r24, 0x01	; 1
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	9e 83       	std	Y+6, r25	; 0x06
    2d5a:	8d 83       	std	Y+5, r24	; 0x05
    2d5c:	3f c0       	rjmp	.+126    	; 0x2ddc <HKEYPAD_u8getPressedValue+0x186>
	else if (__tmp > 65535)
    2d5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d60:	78 85       	ldd	r23, Y+8	; 0x08
    2d62:	89 85       	ldd	r24, Y+9	; 0x09
    2d64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	3f ef       	ldi	r19, 0xFF	; 255
    2d6a:	4f e7       	ldi	r20, 0x7F	; 127
    2d6c:	57 e4       	ldi	r21, 0x47	; 71
    2d6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d72:	18 16       	cp	r1, r24
    2d74:	4c f5       	brge	.+82     	; 0x2dc8 <HKEYPAD_u8getPressedValue+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d76:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d78:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	40 e2       	ldi	r20, 0x20	; 32
    2d84:	51 e4       	ldi	r21, 0x41	; 65
    2d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	cb 01       	movw	r24, r22
    2d8e:	bc 01       	movw	r22, r24
    2d90:	cd 01       	movw	r24, r26
    2d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d96:	dc 01       	movw	r26, r24
    2d98:	cb 01       	movw	r24, r22
    2d9a:	9e 83       	std	Y+6, r25	; 0x06
    2d9c:	8d 83       	std	Y+5, r24	; 0x05
    2d9e:	0f c0       	rjmp	.+30     	; 0x2dbe <HKEYPAD_u8getPressedValue+0x168>
    2da0:	80 e9       	ldi	r24, 0x90	; 144
    2da2:	91 e0       	ldi	r25, 0x01	; 1
    2da4:	9c 83       	std	Y+4, r25	; 0x04
    2da6:	8b 83       	std	Y+3, r24	; 0x03
    2da8:	8b 81       	ldd	r24, Y+3	; 0x03
    2daa:	9c 81       	ldd	r25, Y+4	; 0x04
    2dac:	01 97       	sbiw	r24, 0x01	; 1
    2dae:	f1 f7       	brne	.-4      	; 0x2dac <HKEYPAD_u8getPressedValue+0x156>
    2db0:	9c 83       	std	Y+4, r25	; 0x04
    2db2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2db4:	8d 81       	ldd	r24, Y+5	; 0x05
    2db6:	9e 81       	ldd	r25, Y+6	; 0x06
    2db8:	01 97       	sbiw	r24, 0x01	; 1
    2dba:	9e 83       	std	Y+6, r25	; 0x06
    2dbc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dbe:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc0:	9e 81       	ldd	r25, Y+6	; 0x06
    2dc2:	00 97       	sbiw	r24, 0x00	; 0
    2dc4:	69 f7       	brne	.-38     	; 0x2da0 <HKEYPAD_u8getPressedValue+0x14a>
    2dc6:	14 c0       	rjmp	.+40     	; 0x2df0 <HKEYPAD_u8getPressedValue+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dc8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dca:	78 85       	ldd	r23, Y+8	; 0x08
    2dcc:	89 85       	ldd	r24, Y+9	; 0x09
    2dce:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd4:	dc 01       	movw	r26, r24
    2dd6:	cb 01       	movw	r24, r22
    2dd8:	9e 83       	std	Y+6, r25	; 0x06
    2dda:	8d 83       	std	Y+5, r24	; 0x05
    2ddc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dde:	9e 81       	ldd	r25, Y+6	; 0x06
    2de0:	9a 83       	std	Y+2, r25	; 0x02
    2de2:	89 83       	std	Y+1, r24	; 0x01
    2de4:	89 81       	ldd	r24, Y+1	; 0x01
    2de6:	9a 81       	ldd	r25, Y+2	; 0x02
    2de8:	01 97       	sbiw	r24, 0x01	; 1
    2dea:	f1 f7       	brne	.-4      	; 0x2de8 <HKEYPAD_u8getPressedValue+0x192>
    2dec:	9a 83       	std	Y+2, r25	; 0x02
    2dee:	89 83       	std	Y+1, r24	; 0x01
	u8 key ='+';
	u8 keys[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
	u8 i , j;
	for( i=0; i<4; i++){
		DIO_VIDSetPinValue(PORT_NUM,i,LOW);
		for(j=4; j<7; j++){
    2df0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2df2:	8f 5f       	subi	r24, 0xFF	; 255
    2df4:	8f 87       	std	Y+15, r24	; 0x0f
    2df6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2df8:	87 30       	cpi	r24, 0x07	; 7
    2dfa:	08 f4       	brcc	.+2      	; 0x2dfe <HKEYPAD_u8getPressedValue+0x1a8>
    2dfc:	62 cf       	rjmp	.-316    	; 0x2cc2 <HKEYPAD_u8getPressedValue+0x6c>
				key = keys[i][j-4];
			}
			_delay_ms(20);
		}

		DIO_VIDSetPinValue(PORT_NUM,i,HIGH);
    2dfe:	82 e4       	ldi	r24, 0x42	; 66
    2e00:	68 89       	ldd	r22, Y+16	; 0x10
    2e02:	41 e0       	ldi	r20, 0x01	; 1
    2e04:	0e 94 85 09 	call	0x130a	; 0x130a <DIO_VIDSetPinValue>
}
u8 HKEYPAD_u8getPressedValue(){
	u8 key ='+';
	u8 keys[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
	u8 i , j;
	for( i=0; i<4; i++){
    2e08:	88 89       	ldd	r24, Y+16	; 0x10
    2e0a:	8f 5f       	subi	r24, 0xFF	; 255
    2e0c:	88 8b       	std	Y+16, r24	; 0x10
    2e0e:	88 89       	ldd	r24, Y+16	; 0x10
    2e10:	84 30       	cpi	r24, 0x04	; 4
    2e12:	08 f4       	brcc	.+2      	; 0x2e16 <HKEYPAD_u8getPressedValue+0x1c0>
    2e14:	4e cf       	rjmp	.-356    	; 0x2cb2 <HKEYPAD_u8getPressedValue+0x5c>
			_delay_ms(20);
		}

		DIO_VIDSetPinValue(PORT_NUM,i,HIGH);
	}
	return key;
    2e16:	89 89       	ldd	r24, Y+17	; 0x11
}
    2e18:	a3 96       	adiw	r28, 0x23	; 35
    2e1a:	0f b6       	in	r0, 0x3f	; 63
    2e1c:	f8 94       	cli
    2e1e:	de bf       	out	0x3e, r29	; 62
    2e20:	0f be       	out	0x3f, r0	; 63
    2e22:	cd bf       	out	0x3d, r28	; 61
    2e24:	cf 91       	pop	r28
    2e26:	df 91       	pop	r29
    2e28:	08 95       	ret

00002e2a <HKEYPAD_u8getCharecterValue>:
u8 HKEYPAD_u8getCharecterValue(){
    2e2a:	df 93       	push	r29
    2e2c:	cf 93       	push	r28
    2e2e:	cd b7       	in	r28, 0x3d	; 61
    2e30:	de b7       	in	r29, 0x3e	; 62
    2e32:	a7 97       	sbiw	r28, 0x27	; 39
    2e34:	0f b6       	in	r0, 0x3f	; 63
    2e36:	f8 94       	cli
    2e38:	de bf       	out	0x3e, r29	; 62
    2e3a:	0f be       	out	0x3f, r0	; 63
    2e3c:	cd bf       	out	0x3d, r28	; 61
	u8 key =  '+';
    2e3e:	8b e2       	ldi	r24, 0x2B	; 43
    2e40:	8b 8b       	std	Y+19, r24	; 0x13
	u8 bufferData = '+';
    2e42:	8b e2       	ldi	r24, 0x2B	; 43
    2e44:	8a 8b       	std	Y+18, r24	; 0x12
	u8 keys[4][3]={{'a','d','g'},{'j','m','p'},{'s','v','y'},{'*','0','#'}};
    2e46:	ce 01       	movw	r24, r28
    2e48:	44 96       	adiw	r24, 0x14	; 20
    2e4a:	9c a3       	std	Y+36, r25	; 0x24
    2e4c:	8b a3       	std	Y+35, r24	; 0x23
    2e4e:	ea e3       	ldi	r30, 0x3A	; 58
    2e50:	f2 e0       	ldi	r31, 0x02	; 2
    2e52:	fe a3       	std	Y+38, r31	; 0x26
    2e54:	ed a3       	std	Y+37, r30	; 0x25
    2e56:	fc e0       	ldi	r31, 0x0C	; 12
    2e58:	ff a3       	std	Y+39, r31	; 0x27
    2e5a:	ed a1       	ldd	r30, Y+37	; 0x25
    2e5c:	fe a1       	ldd	r31, Y+38	; 0x26
    2e5e:	00 80       	ld	r0, Z
    2e60:	8d a1       	ldd	r24, Y+37	; 0x25
    2e62:	9e a1       	ldd	r25, Y+38	; 0x26
    2e64:	01 96       	adiw	r24, 0x01	; 1
    2e66:	9e a3       	std	Y+38, r25	; 0x26
    2e68:	8d a3       	std	Y+37, r24	; 0x25
    2e6a:	eb a1       	ldd	r30, Y+35	; 0x23
    2e6c:	fc a1       	ldd	r31, Y+36	; 0x24
    2e6e:	00 82       	st	Z, r0
    2e70:	8b a1       	ldd	r24, Y+35	; 0x23
    2e72:	9c a1       	ldd	r25, Y+36	; 0x24
    2e74:	01 96       	adiw	r24, 0x01	; 1
    2e76:	9c a3       	std	Y+36, r25	; 0x24
    2e78:	8b a3       	std	Y+35, r24	; 0x23
    2e7a:	9f a1       	ldd	r25, Y+39	; 0x27
    2e7c:	91 50       	subi	r25, 0x01	; 1
    2e7e:	9f a3       	std	Y+39, r25	; 0x27
    2e80:	ef a1       	ldd	r30, Y+39	; 0x27
    2e82:	ee 23       	and	r30, r30
    2e84:	51 f7       	brne	.-44     	; 0x2e5a <HKEYPAD_u8getCharecterValue+0x30>
	u8 i , j, k =0;
    2e86:	1f 86       	std	Y+15, r1	; 0x0f
    2e88:	f6 c0       	rjmp	.+492    	; 0x3076 <HKEYPAD_u8getCharecterValue+0x24c>
	while( key!='0' && k<3 ){
		for( i=0; i<4; i++){
    2e8a:	19 8a       	std	Y+17, r1	; 0x11
    2e8c:	f0 c0       	rjmp	.+480    	; 0x306e <HKEYPAD_u8getCharecterValue+0x244>
			DIO_VIDSetPinValue(PORT_NUM,i,LOW);
    2e8e:	82 e4       	ldi	r24, 0x42	; 66
    2e90:	69 89       	ldd	r22, Y+17	; 0x11
    2e92:	40 e0       	ldi	r20, 0x00	; 0
    2e94:	0e 94 85 09 	call	0x130a	; 0x130a <DIO_VIDSetPinValue>
			for(j=4; j<7; j++){
    2e98:	84 e0       	ldi	r24, 0x04	; 4
    2e9a:	88 8b       	std	Y+16, r24	; 0x10
    2e9c:	dc c0       	rjmp	.+440    	; 0x3056 <HKEYPAD_u8getCharecterValue+0x22c>
				u8 buffer=0;
    2e9e:	18 a2       	std	Y+32, r1	; 0x20
				DIO_VIDgetPinDirection(PORT_NUM,j,&buffer);
    2ea0:	9e 01       	movw	r18, r28
    2ea2:	20 5e       	subi	r18, 0xE0	; 224
    2ea4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ea6:	82 e4       	ldi	r24, 0x42	; 66
    2ea8:	68 89       	ldd	r22, Y+16	; 0x10
    2eaa:	a9 01       	movw	r20, r18
    2eac:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_VIDgetPinDirection>
				if(buffer!=1){
    2eb0:	88 a1       	ldd	r24, Y+32	; 0x20
    2eb2:	81 30       	cpi	r24, 0x01	; 1
    2eb4:	09 f4       	brne	.+2      	; 0x2eb8 <HKEYPAD_u8getCharecterValue+0x8e>
    2eb6:	5a c0       	rjmp	.+180    	; 0x2f6c <HKEYPAD_u8getCharecterValue+0x142>
					key = keys[i][j-4];
    2eb8:	89 89       	ldd	r24, Y+17	; 0x11
    2eba:	28 2f       	mov	r18, r24
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	88 89       	ldd	r24, Y+16	; 0x10
    2ec0:	88 2f       	mov	r24, r24
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	ac 01       	movw	r20, r24
    2ec6:	44 50       	subi	r20, 0x04	; 4
    2ec8:	50 40       	sbci	r21, 0x00	; 0
    2eca:	c9 01       	movw	r24, r18
    2ecc:	88 0f       	add	r24, r24
    2ece:	99 1f       	adc	r25, r25
    2ed0:	82 0f       	add	r24, r18
    2ed2:	93 1f       	adc	r25, r19
    2ed4:	9e 01       	movw	r18, r28
    2ed6:	2f 5f       	subi	r18, 0xFF	; 255
    2ed8:	3f 4f       	sbci	r19, 0xFF	; 255
    2eda:	82 0f       	add	r24, r18
    2edc:	93 1f       	adc	r25, r19
    2ede:	84 0f       	add	r24, r20
    2ee0:	95 1f       	adc	r25, r21
    2ee2:	fc 01       	movw	r30, r24
    2ee4:	73 96       	adiw	r30, 0x13	; 19
    2ee6:	80 81       	ld	r24, Z
    2ee8:	8b 8b       	std	Y+19, r24	; 0x13
					if(bufferData == '+'){
    2eea:	8a 89       	ldd	r24, Y+18	; 0x12
    2eec:	8b 32       	cpi	r24, 0x2B	; 43
    2eee:	c9 f4       	brne	.+50     	; 0x2f22 <HKEYPAD_u8getCharecterValue+0xf8>
						bufferData = keys[i][j-4];
    2ef0:	89 89       	ldd	r24, Y+17	; 0x11
    2ef2:	28 2f       	mov	r18, r24
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	88 89       	ldd	r24, Y+16	; 0x10
    2ef8:	88 2f       	mov	r24, r24
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	ac 01       	movw	r20, r24
    2efe:	44 50       	subi	r20, 0x04	; 4
    2f00:	50 40       	sbci	r21, 0x00	; 0
    2f02:	c9 01       	movw	r24, r18
    2f04:	88 0f       	add	r24, r24
    2f06:	99 1f       	adc	r25, r25
    2f08:	82 0f       	add	r24, r18
    2f0a:	93 1f       	adc	r25, r19
    2f0c:	9e 01       	movw	r18, r28
    2f0e:	2f 5f       	subi	r18, 0xFF	; 255
    2f10:	3f 4f       	sbci	r19, 0xFF	; 255
    2f12:	82 0f       	add	r24, r18
    2f14:	93 1f       	adc	r25, r19
    2f16:	84 0f       	add	r24, r20
    2f18:	95 1f       	adc	r25, r21
    2f1a:	fc 01       	movw	r30, r24
    2f1c:	73 96       	adiw	r30, 0x13	; 19
    2f1e:	80 81       	ld	r24, Z
    2f20:	8a 8b       	std	Y+18, r24	; 0x12
					}

					if( key==bufferData ){
    2f22:	9b 89       	ldd	r25, Y+19	; 0x13
    2f24:	8a 89       	ldd	r24, Y+18	; 0x12
    2f26:	98 17       	cp	r25, r24
    2f28:	21 f4       	brne	.+8      	; 0x2f32 <HKEYPAD_u8getCharecterValue+0x108>
						k++;
    2f2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f2c:	8f 5f       	subi	r24, 0xFF	; 255
    2f2e:	8f 87       	std	Y+15, r24	; 0x0f
    2f30:	0b c0       	rjmp	.+22     	; 0x2f48 <HKEYPAD_u8getCharecterValue+0x11e>
					}else if( (key != bufferData) && key !='0'){
    2f32:	9b 89       	ldd	r25, Y+19	; 0x13
    2f34:	8a 89       	ldd	r24, Y+18	; 0x12
    2f36:	98 17       	cp	r25, r24
    2f38:	39 f0       	breq	.+14     	; 0x2f48 <HKEYPAD_u8getCharecterValue+0x11e>
    2f3a:	8b 89       	ldd	r24, Y+19	; 0x13
    2f3c:	80 33       	cpi	r24, 0x30	; 48
    2f3e:	21 f0       	breq	.+8      	; 0x2f48 <HKEYPAD_u8getCharecterValue+0x11e>
						k=1;
    2f40:	81 e0       	ldi	r24, 0x01	; 1
    2f42:	8f 87       	std	Y+15, r24	; 0x0f
						bufferData = key;
    2f44:	8b 89       	ldd	r24, Y+19	; 0x13
    2f46:	8a 8b       	std	Y+18, r24	; 0x12
					}

					if(bufferData=='y' && k==3){
    2f48:	8a 89       	ldd	r24, Y+18	; 0x12
    2f4a:	89 37       	cpi	r24, 0x79	; 121
    2f4c:	31 f4       	brne	.+12     	; 0x2f5a <HKEYPAD_u8getCharecterValue+0x130>
    2f4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f50:	83 30       	cpi	r24, 0x03	; 3
    2f52:	19 f4       	brne	.+6      	; 0x2f5a <HKEYPAD_u8getCharecterValue+0x130>
						return '\b';
    2f54:	f8 e0       	ldi	r31, 0x08	; 8
    2f56:	fa a3       	std	Y+34, r31	; 0x22
    2f58:	b8 c0       	rjmp	.+368    	; 0x30ca <HKEYPAD_u8getCharecterValue+0x2a0>
					}
					if (key=='*' || key == '#'){
    2f5a:	8b 89       	ldd	r24, Y+19	; 0x13
    2f5c:	8a 32       	cpi	r24, 0x2A	; 42
    2f5e:	19 f0       	breq	.+6      	; 0x2f66 <HKEYPAD_u8getCharecterValue+0x13c>
    2f60:	8b 89       	ldd	r24, Y+19	; 0x13
    2f62:	83 32       	cpi	r24, 0x23	; 35
    2f64:	19 f4       	brne	.+6      	; 0x2f6c <HKEYPAD_u8getCharecterValue+0x142>
						return key;
    2f66:	8b 89       	ldd	r24, Y+19	; 0x13
    2f68:	8a a3       	std	Y+34, r24	; 0x22
    2f6a:	af c0       	rjmp	.+350    	; 0x30ca <HKEYPAD_u8getCharecterValue+0x2a0>
    2f6c:	80 e0       	ldi	r24, 0x00	; 0
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	a0 ea       	ldi	r26, 0xA0	; 160
    2f72:	b1 e4       	ldi	r27, 0x41	; 65
    2f74:	8b 87       	std	Y+11, r24	; 0x0b
    2f76:	9c 87       	std	Y+12, r25	; 0x0c
    2f78:	ad 87       	std	Y+13, r26	; 0x0d
    2f7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f80:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f82:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f84:	20 e0       	ldi	r18, 0x00	; 0
    2f86:	30 e0       	ldi	r19, 0x00	; 0
    2f88:	4a e7       	ldi	r20, 0x7A	; 122
    2f8a:	55 e4       	ldi	r21, 0x45	; 69
    2f8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f90:	dc 01       	movw	r26, r24
    2f92:	cb 01       	movw	r24, r22
    2f94:	8f 83       	std	Y+7, r24	; 0x07
    2f96:	98 87       	std	Y+8, r25	; 0x08
    2f98:	a9 87       	std	Y+9, r26	; 0x09
    2f9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f9c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f9e:	78 85       	ldd	r23, Y+8	; 0x08
    2fa0:	89 85       	ldd	r24, Y+9	; 0x09
    2fa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa4:	20 e0       	ldi	r18, 0x00	; 0
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    2fa8:	40 e8       	ldi	r20, 0x80	; 128
    2faa:	5f e3       	ldi	r21, 0x3F	; 63
    2fac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fb0:	88 23       	and	r24, r24
    2fb2:	2c f4       	brge	.+10     	; 0x2fbe <HKEYPAD_u8getCharecterValue+0x194>
		__ticks = 1;
    2fb4:	81 e0       	ldi	r24, 0x01	; 1
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	9e 83       	std	Y+6, r25	; 0x06
    2fba:	8d 83       	std	Y+5, r24	; 0x05
    2fbc:	3f c0       	rjmp	.+126    	; 0x303c <HKEYPAD_u8getCharecterValue+0x212>
	else if (__tmp > 65535)
    2fbe:	6f 81       	ldd	r22, Y+7	; 0x07
    2fc0:	78 85       	ldd	r23, Y+8	; 0x08
    2fc2:	89 85       	ldd	r24, Y+9	; 0x09
    2fc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fc6:	20 e0       	ldi	r18, 0x00	; 0
    2fc8:	3f ef       	ldi	r19, 0xFF	; 255
    2fca:	4f e7       	ldi	r20, 0x7F	; 127
    2fcc:	57 e4       	ldi	r21, 0x47	; 71
    2fce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fd2:	18 16       	cp	r1, r24
    2fd4:	4c f5       	brge	.+82     	; 0x3028 <HKEYPAD_u8getCharecterValue+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fda:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fde:	20 e0       	ldi	r18, 0x00	; 0
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	40 e2       	ldi	r20, 0x20	; 32
    2fe4:	51 e4       	ldi	r21, 0x41	; 65
    2fe6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fea:	dc 01       	movw	r26, r24
    2fec:	cb 01       	movw	r24, r22
    2fee:	bc 01       	movw	r22, r24
    2ff0:	cd 01       	movw	r24, r26
    2ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ff6:	dc 01       	movw	r26, r24
    2ff8:	cb 01       	movw	r24, r22
    2ffa:	9e 83       	std	Y+6, r25	; 0x06
    2ffc:	8d 83       	std	Y+5, r24	; 0x05
    2ffe:	0f c0       	rjmp	.+30     	; 0x301e <HKEYPAD_u8getCharecterValue+0x1f4>
    3000:	80 e9       	ldi	r24, 0x90	; 144
    3002:	91 e0       	ldi	r25, 0x01	; 1
    3004:	9c 83       	std	Y+4, r25	; 0x04
    3006:	8b 83       	std	Y+3, r24	; 0x03
    3008:	8b 81       	ldd	r24, Y+3	; 0x03
    300a:	9c 81       	ldd	r25, Y+4	; 0x04
    300c:	01 97       	sbiw	r24, 0x01	; 1
    300e:	f1 f7       	brne	.-4      	; 0x300c <HKEYPAD_u8getCharecterValue+0x1e2>
    3010:	9c 83       	std	Y+4, r25	; 0x04
    3012:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3014:	8d 81       	ldd	r24, Y+5	; 0x05
    3016:	9e 81       	ldd	r25, Y+6	; 0x06
    3018:	01 97       	sbiw	r24, 0x01	; 1
    301a:	9e 83       	std	Y+6, r25	; 0x06
    301c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    301e:	8d 81       	ldd	r24, Y+5	; 0x05
    3020:	9e 81       	ldd	r25, Y+6	; 0x06
    3022:	00 97       	sbiw	r24, 0x00	; 0
    3024:	69 f7       	brne	.-38     	; 0x3000 <HKEYPAD_u8getCharecterValue+0x1d6>
    3026:	14 c0       	rjmp	.+40     	; 0x3050 <HKEYPAD_u8getCharecterValue+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3028:	6f 81       	ldd	r22, Y+7	; 0x07
    302a:	78 85       	ldd	r23, Y+8	; 0x08
    302c:	89 85       	ldd	r24, Y+9	; 0x09
    302e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3034:	dc 01       	movw	r26, r24
    3036:	cb 01       	movw	r24, r22
    3038:	9e 83       	std	Y+6, r25	; 0x06
    303a:	8d 83       	std	Y+5, r24	; 0x05
    303c:	8d 81       	ldd	r24, Y+5	; 0x05
    303e:	9e 81       	ldd	r25, Y+6	; 0x06
    3040:	9a 83       	std	Y+2, r25	; 0x02
    3042:	89 83       	std	Y+1, r24	; 0x01
    3044:	89 81       	ldd	r24, Y+1	; 0x01
    3046:	9a 81       	ldd	r25, Y+2	; 0x02
    3048:	01 97       	sbiw	r24, 0x01	; 1
    304a:	f1 f7       	brne	.-4      	; 0x3048 <HKEYPAD_u8getCharecterValue+0x21e>
    304c:	9a 83       	std	Y+2, r25	; 0x02
    304e:	89 83       	std	Y+1, r24	; 0x01
	u8 keys[4][3]={{'a','d','g'},{'j','m','p'},{'s','v','y'},{'*','0','#'}};
	u8 i , j, k =0;
	while( key!='0' && k<3 ){
		for( i=0; i<4; i++){
			DIO_VIDSetPinValue(PORT_NUM,i,LOW);
			for(j=4; j<7; j++){
    3050:	88 89       	ldd	r24, Y+16	; 0x10
    3052:	8f 5f       	subi	r24, 0xFF	; 255
    3054:	88 8b       	std	Y+16, r24	; 0x10
    3056:	88 89       	ldd	r24, Y+16	; 0x10
    3058:	87 30       	cpi	r24, 0x07	; 7
    305a:	08 f4       	brcc	.+2      	; 0x305e <HKEYPAD_u8getCharecterValue+0x234>
    305c:	20 cf       	rjmp	.-448    	; 0x2e9e <HKEYPAD_u8getCharecterValue+0x74>
						return key;
					}
				}
				_delay_ms(20);
			}
			DIO_VIDSetPinValue(PORT_NUM,i,HIGH);
    305e:	82 e4       	ldi	r24, 0x42	; 66
    3060:	69 89       	ldd	r22, Y+17	; 0x11
    3062:	41 e0       	ldi	r20, 0x01	; 1
    3064:	0e 94 85 09 	call	0x130a	; 0x130a <DIO_VIDSetPinValue>
	u8 key =  '+';
	u8 bufferData = '+';
	u8 keys[4][3]={{'a','d','g'},{'j','m','p'},{'s','v','y'},{'*','0','#'}};
	u8 i , j, k =0;
	while( key!='0' && k<3 ){
		for( i=0; i<4; i++){
    3068:	89 89       	ldd	r24, Y+17	; 0x11
    306a:	8f 5f       	subi	r24, 0xFF	; 255
    306c:	89 8b       	std	Y+17, r24	; 0x11
    306e:	89 89       	ldd	r24, Y+17	; 0x11
    3070:	84 30       	cpi	r24, 0x04	; 4
    3072:	08 f4       	brcc	.+2      	; 0x3076 <HKEYPAD_u8getCharecterValue+0x24c>
    3074:	0c cf       	rjmp	.-488    	; 0x2e8e <HKEYPAD_u8getCharecterValue+0x64>
u8 HKEYPAD_u8getCharecterValue(){
	u8 key =  '+';
	u8 bufferData = '+';
	u8 keys[4][3]={{'a','d','g'},{'j','m','p'},{'s','v','y'},{'*','0','#'}};
	u8 i , j, k =0;
	while( key!='0' && k<3 ){
    3076:	8b 89       	ldd	r24, Y+19	; 0x13
    3078:	80 33       	cpi	r24, 0x30	; 48
    307a:	21 f0       	breq	.+8      	; 0x3084 <HKEYPAD_u8getCharecterValue+0x25a>
    307c:	8f 85       	ldd	r24, Y+15	; 0x0f
    307e:	83 30       	cpi	r24, 0x03	; 3
    3080:	08 f4       	brcc	.+2      	; 0x3084 <HKEYPAD_u8getCharecterValue+0x25a>
    3082:	03 cf       	rjmp	.-506    	; 0x2e8a <HKEYPAD_u8getCharecterValue+0x60>
			}
			DIO_VIDSetPinValue(PORT_NUM,i,HIGH);
		}
	}

	return ((bufferData+k-1)>='a' && (bufferData+k-1)<='z')?(bufferData+k-1):'+';
    3084:	8a 89       	ldd	r24, Y+18	; 0x12
    3086:	28 2f       	mov	r18, r24
    3088:	30 e0       	ldi	r19, 0x00	; 0
    308a:	8f 85       	ldd	r24, Y+15	; 0x0f
    308c:	88 2f       	mov	r24, r24
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	82 0f       	add	r24, r18
    3092:	93 1f       	adc	r25, r19
    3094:	01 97       	sbiw	r24, 0x01	; 1
    3096:	81 36       	cpi	r24, 0x61	; 97
    3098:	91 05       	cpc	r25, r1
    309a:	9c f0       	brlt	.+38     	; 0x30c2 <HKEYPAD_u8getCharecterValue+0x298>
    309c:	8a 89       	ldd	r24, Y+18	; 0x12
    309e:	28 2f       	mov	r18, r24
    30a0:	30 e0       	ldi	r19, 0x00	; 0
    30a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    30a4:	88 2f       	mov	r24, r24
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	82 0f       	add	r24, r18
    30aa:	93 1f       	adc	r25, r19
    30ac:	01 97       	sbiw	r24, 0x01	; 1
    30ae:	8b 37       	cpi	r24, 0x7B	; 123
    30b0:	91 05       	cpc	r25, r1
    30b2:	3c f4       	brge	.+14     	; 0x30c2 <HKEYPAD_u8getCharecterValue+0x298>
    30b4:	8a 89       	ldd	r24, Y+18	; 0x12
    30b6:	9f 85       	ldd	r25, Y+15	; 0x0f
    30b8:	89 0f       	add	r24, r25
    30ba:	98 2f       	mov	r25, r24
    30bc:	91 50       	subi	r25, 0x01	; 1
    30be:	99 a3       	std	Y+33, r25	; 0x21
    30c0:	02 c0       	rjmp	.+4      	; 0x30c6 <HKEYPAD_u8getCharecterValue+0x29c>
    30c2:	eb e2       	ldi	r30, 0x2B	; 43
    30c4:	e9 a3       	std	Y+33, r30	; 0x21
    30c6:	f9 a1       	ldd	r31, Y+33	; 0x21
    30c8:	fa a3       	std	Y+34, r31	; 0x22
    30ca:	8a a1       	ldd	r24, Y+34	; 0x22

}
    30cc:	a7 96       	adiw	r28, 0x27	; 39
    30ce:	0f b6       	in	r0, 0x3f	; 63
    30d0:	f8 94       	cli
    30d2:	de bf       	out	0x3e, r29	; 62
    30d4:	0f be       	out	0x3f, r0	; 63
    30d6:	cd bf       	out	0x3d, r28	; 61
    30d8:	cf 91       	pop	r28
    30da:	df 91       	pop	r29
    30dc:	08 95       	ret

000030de <vid_displayHome>:
#include "../../../MCAL/dio/dio.h"
#include "stdlib.h"
#include "avr/delay.h"
#include "./transmiter.h"
u8* pattern = NULL;
void vid_displayHome(){
    30de:	df 93       	push	r29
    30e0:	cf 93       	push	r28
    30e2:	00 d0       	rcall	.+0      	; 0x30e4 <vid_displayHome+0x6>
    30e4:	0f 92       	push	r0
    30e6:	cd b7       	in	r28, 0x3d	; 61
    30e8:	de b7       	in	r29, 0x3e	; 62
	HCLCD_vidGoTo(5,0);
    30ea:	85 e0       	ldi	r24, 0x05	; 5
    30ec:	60 e0       	ldi	r22, 0x00	; 0
    30ee:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <HCLCD_vidGoTo>
	HCLCD_vidSendString("select");
    30f2:	80 e6       	ldi	r24, 0x60	; 96
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <HCLCD_vidSendString>
	HCLCD_vidGoTo(0,1);
    30fa:	80 e0       	ldi	r24, 0x00	; 0
    30fc:	61 e0       	ldi	r22, 0x01	; 1
    30fe:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <HCLCD_vidGoTo>
	HCLCD_vidSendString("*number#charcter");
    3102:	87 e6       	ldi	r24, 0x67	; 103
    3104:	90 e0       	ldi	r25, 0x00	; 0
    3106:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <HCLCD_vidSendString>
	u8 letter = '+';
    310a:	8b e2       	ldi	r24, 0x2B	; 43
    310c:	89 83       	std	Y+1, r24	; 0x01
    310e:	03 c0       	rjmp	.+6      	; 0x3116 <vid_displayHome+0x38>
	while(letter != '*' && letter!='#'){
		letter = HKEYPAD_u8getPressedValue();
    3110:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <HKEYPAD_u8getPressedValue>
    3114:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_vidGoTo(5,0);
	HCLCD_vidSendString("select");
	HCLCD_vidGoTo(0,1);
	HCLCD_vidSendString("*number#charcter");
	u8 letter = '+';
	while(letter != '*' && letter!='#'){
    3116:	89 81       	ldd	r24, Y+1	; 0x01
    3118:	8a 32       	cpi	r24, 0x2A	; 42
    311a:	19 f0       	breq	.+6      	; 0x3122 <vid_displayHome+0x44>
    311c:	89 81       	ldd	r24, Y+1	; 0x01
    311e:	83 32       	cpi	r24, 0x23	; 35
    3120:	b9 f7       	brne	.-18     	; 0x3110 <vid_displayHome+0x32>
		letter = HKEYPAD_u8getPressedValue();
	}
	HCLCD_vidClear();
    3122:	0e 94 5f 15 	call	0x2abe	; 0x2abe <HCLCD_vidClear>
	switch (letter){
    3126:	89 81       	ldd	r24, Y+1	; 0x01
    3128:	28 2f       	mov	r18, r24
    312a:	30 e0       	ldi	r19, 0x00	; 0
    312c:	3b 83       	std	Y+3, r19	; 0x03
    312e:	2a 83       	std	Y+2, r18	; 0x02
    3130:	8a 81       	ldd	r24, Y+2	; 0x02
    3132:	9b 81       	ldd	r25, Y+3	; 0x03
    3134:	83 32       	cpi	r24, 0x23	; 35
    3136:	91 05       	cpc	r25, r1
    3138:	31 f0       	breq	.+12     	; 0x3146 <vid_displayHome+0x68>
    313a:	2a 81       	ldd	r18, Y+2	; 0x02
    313c:	3b 81       	ldd	r19, Y+3	; 0x03
    313e:	2a 32       	cpi	r18, 0x2A	; 42
    3140:	31 05       	cpc	r19, r1
    3142:	21 f0       	breq	.+8      	; 0x314c <vid_displayHome+0x6e>
    3144:	05 c0       	rjmp	.+10     	; 0x3150 <vid_displayHome+0x72>
		case '#':
			vid_transmitCharcters();
    3146:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <vid_transmitCharcters>
    314a:	02 c0       	rjmp	.+4      	; 0x3150 <vid_displayHome+0x72>
			break;
		case '*':
			vid_transmitNumbers();
    314c:	0e 94 a6 1a 	call	0x354c	; 0x354c <vid_transmitNumbers>
			break;
	}
}
    3150:	0f 90       	pop	r0
    3152:	0f 90       	pop	r0
    3154:	0f 90       	pop	r0
    3156:	cf 91       	pop	r28
    3158:	df 91       	pop	r29
    315a:	08 95       	ret

0000315c <vid_initProgram>:
void vid_initProgram(){
    315c:	df 93       	push	r29
    315e:	cf 93       	push	r28
    3160:	cd b7       	in	r28, 0x3d	; 61
    3162:	de b7       	in	r29, 0x3e	; 62
		HCLCD_vidInit();
    3164:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <HCLCD_vidInit>
		HKEYPAD_vidinit();
    3168:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <HKEYPAD_vidinit>
		DIO_VIDSetPinDirection(PORT_D,0,OUTPUT);
    316c:	84 e4       	ldi	r24, 0x44	; 68
    316e:	60 e0       	ldi	r22, 0x00	; 0
    3170:	41 e0       	ldi	r20, 0x01	; 1
    3172:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_VIDSetPinDirection>
		pattern = malloc(5*sizeof(u8));
    3176:	85 e0       	ldi	r24, 0x05	; 5
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <malloc>
    317e:	90 93 47 02 	sts	0x0247, r25
    3182:	80 93 46 02 	sts	0x0246, r24
}
    3186:	cf 91       	pop	r28
    3188:	df 91       	pop	r29
    318a:	08 95       	ret

0000318c <vid_convertToSignal>:
void vid_convertToSignal(u8*pattern){
    318c:	df 93       	push	r29
    318e:	cf 93       	push	r28
    3190:	cd b7       	in	r28, 0x3d	; 61
    3192:	de b7       	in	r29, 0x3e	; 62
    3194:	ad 97       	sbiw	r28, 0x2d	; 45
    3196:	0f b6       	in	r0, 0x3f	; 63
    3198:	f8 94       	cli
    319a:	de bf       	out	0x3e, r29	; 62
    319c:	0f be       	out	0x3f, r0	; 63
    319e:	cd bf       	out	0x3d, r28	; 61
    31a0:	9d a7       	std	Y+45, r25	; 0x2d
    31a2:	8c a7       	std	Y+44, r24	; 0x2c
	for(u8 i = 0; pattern[i]; i++){
    31a4:	1b a6       	std	Y+43, r1	; 0x2b
    31a6:	81 c1       	rjmp	.+770    	; 0x34aa <vid_convertToSignal+0x31e>
		if(pattern[i]=='.'){
    31a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    31aa:	28 2f       	mov	r18, r24
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	8c a5       	ldd	r24, Y+44	; 0x2c
    31b0:	9d a5       	ldd	r25, Y+45	; 0x2d
    31b2:	fc 01       	movw	r30, r24
    31b4:	e2 0f       	add	r30, r18
    31b6:	f3 1f       	adc	r31, r19
    31b8:	80 81       	ld	r24, Z
    31ba:	8e 32       	cpi	r24, 0x2E	; 46
    31bc:	09 f0       	breq	.+2      	; 0x31c0 <vid_convertToSignal+0x34>
    31be:	78 c0       	rjmp	.+240    	; 0x32b0 <vid_convertToSignal+0x124>
			DIO_VIDSetPinValue(PORT_D,0,HIGH);
    31c0:	84 e4       	ldi	r24, 0x44	; 68
    31c2:	60 e0       	ldi	r22, 0x00	; 0
    31c4:	41 e0       	ldi	r20, 0x01	; 1
    31c6:	0e 94 85 09 	call	0x130a	; 0x130a <DIO_VIDSetPinValue>
    31ca:	80 e0       	ldi	r24, 0x00	; 0
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	a8 ec       	ldi	r26, 0xC8	; 200
    31d0:	b3 e4       	ldi	r27, 0x43	; 67
    31d2:	8f a3       	std	Y+39, r24	; 0x27
    31d4:	98 a7       	std	Y+40, r25	; 0x28
    31d6:	a9 a7       	std	Y+41, r26	; 0x29
    31d8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31da:	6f a1       	ldd	r22, Y+39	; 0x27
    31dc:	78 a5       	ldd	r23, Y+40	; 0x28
    31de:	89 a5       	ldd	r24, Y+41	; 0x29
    31e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    31e2:	20 e0       	ldi	r18, 0x00	; 0
    31e4:	30 e0       	ldi	r19, 0x00	; 0
    31e6:	4a e7       	ldi	r20, 0x7A	; 122
    31e8:	55 e4       	ldi	r21, 0x45	; 69
    31ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ee:	dc 01       	movw	r26, r24
    31f0:	cb 01       	movw	r24, r22
    31f2:	8b a3       	std	Y+35, r24	; 0x23
    31f4:	9c a3       	std	Y+36, r25	; 0x24
    31f6:	ad a3       	std	Y+37, r26	; 0x25
    31f8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    31fa:	6b a1       	ldd	r22, Y+35	; 0x23
    31fc:	7c a1       	ldd	r23, Y+36	; 0x24
    31fe:	8d a1       	ldd	r24, Y+37	; 0x25
    3200:	9e a1       	ldd	r25, Y+38	; 0x26
    3202:	20 e0       	ldi	r18, 0x00	; 0
    3204:	30 e0       	ldi	r19, 0x00	; 0
    3206:	40 e8       	ldi	r20, 0x80	; 128
    3208:	5f e3       	ldi	r21, 0x3F	; 63
    320a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    320e:	88 23       	and	r24, r24
    3210:	2c f4       	brge	.+10     	; 0x321c <vid_convertToSignal+0x90>
		__ticks = 1;
    3212:	81 e0       	ldi	r24, 0x01	; 1
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	9a a3       	std	Y+34, r25	; 0x22
    3218:	89 a3       	std	Y+33, r24	; 0x21
    321a:	3f c0       	rjmp	.+126    	; 0x329a <vid_convertToSignal+0x10e>
	else if (__tmp > 65535)
    321c:	6b a1       	ldd	r22, Y+35	; 0x23
    321e:	7c a1       	ldd	r23, Y+36	; 0x24
    3220:	8d a1       	ldd	r24, Y+37	; 0x25
    3222:	9e a1       	ldd	r25, Y+38	; 0x26
    3224:	20 e0       	ldi	r18, 0x00	; 0
    3226:	3f ef       	ldi	r19, 0xFF	; 255
    3228:	4f e7       	ldi	r20, 0x7F	; 127
    322a:	57 e4       	ldi	r21, 0x47	; 71
    322c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3230:	18 16       	cp	r1, r24
    3232:	4c f5       	brge	.+82     	; 0x3286 <vid_convertToSignal+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3234:	6f a1       	ldd	r22, Y+39	; 0x27
    3236:	78 a5       	ldd	r23, Y+40	; 0x28
    3238:	89 a5       	ldd	r24, Y+41	; 0x29
    323a:	9a a5       	ldd	r25, Y+42	; 0x2a
    323c:	20 e0       	ldi	r18, 0x00	; 0
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	40 e2       	ldi	r20, 0x20	; 32
    3242:	51 e4       	ldi	r21, 0x41	; 65
    3244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3248:	dc 01       	movw	r26, r24
    324a:	cb 01       	movw	r24, r22
    324c:	bc 01       	movw	r22, r24
    324e:	cd 01       	movw	r24, r26
    3250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3254:	dc 01       	movw	r26, r24
    3256:	cb 01       	movw	r24, r22
    3258:	9a a3       	std	Y+34, r25	; 0x22
    325a:	89 a3       	std	Y+33, r24	; 0x21
    325c:	0f c0       	rjmp	.+30     	; 0x327c <vid_convertToSignal+0xf0>
    325e:	80 e9       	ldi	r24, 0x90	; 144
    3260:	91 e0       	ldi	r25, 0x01	; 1
    3262:	98 a3       	std	Y+32, r25	; 0x20
    3264:	8f 8f       	std	Y+31, r24	; 0x1f
    3266:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3268:	98 a1       	ldd	r25, Y+32	; 0x20
    326a:	01 97       	sbiw	r24, 0x01	; 1
    326c:	f1 f7       	brne	.-4      	; 0x326a <vid_convertToSignal+0xde>
    326e:	98 a3       	std	Y+32, r25	; 0x20
    3270:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3272:	89 a1       	ldd	r24, Y+33	; 0x21
    3274:	9a a1       	ldd	r25, Y+34	; 0x22
    3276:	01 97       	sbiw	r24, 0x01	; 1
    3278:	9a a3       	std	Y+34, r25	; 0x22
    327a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    327c:	89 a1       	ldd	r24, Y+33	; 0x21
    327e:	9a a1       	ldd	r25, Y+34	; 0x22
    3280:	00 97       	sbiw	r24, 0x00	; 0
    3282:	69 f7       	brne	.-38     	; 0x325e <vid_convertToSignal+0xd2>
    3284:	98 c0       	rjmp	.+304    	; 0x33b6 <vid_convertToSignal+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3286:	6b a1       	ldd	r22, Y+35	; 0x23
    3288:	7c a1       	ldd	r23, Y+36	; 0x24
    328a:	8d a1       	ldd	r24, Y+37	; 0x25
    328c:	9e a1       	ldd	r25, Y+38	; 0x26
    328e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3292:	dc 01       	movw	r26, r24
    3294:	cb 01       	movw	r24, r22
    3296:	9a a3       	std	Y+34, r25	; 0x22
    3298:	89 a3       	std	Y+33, r24	; 0x21
    329a:	89 a1       	ldd	r24, Y+33	; 0x21
    329c:	9a a1       	ldd	r25, Y+34	; 0x22
    329e:	9e 8f       	std	Y+30, r25	; 0x1e
    32a0:	8d 8f       	std	Y+29, r24	; 0x1d
    32a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32a6:	01 97       	sbiw	r24, 0x01	; 1
    32a8:	f1 f7       	brne	.-4      	; 0x32a6 <vid_convertToSignal+0x11a>
    32aa:	9e 8f       	std	Y+30, r25	; 0x1e
    32ac:	8d 8f       	std	Y+29, r24	; 0x1d
    32ae:	83 c0       	rjmp	.+262    	; 0x33b6 <vid_convertToSignal+0x22a>
			_delay_ms(400);
		}else if(pattern[i] == '-'){
    32b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    32b2:	28 2f       	mov	r18, r24
    32b4:	30 e0       	ldi	r19, 0x00	; 0
    32b6:	8c a5       	ldd	r24, Y+44	; 0x2c
    32b8:	9d a5       	ldd	r25, Y+45	; 0x2d
    32ba:	fc 01       	movw	r30, r24
    32bc:	e2 0f       	add	r30, r18
    32be:	f3 1f       	adc	r31, r19
    32c0:	80 81       	ld	r24, Z
    32c2:	8d 32       	cpi	r24, 0x2D	; 45
    32c4:	09 f0       	breq	.+2      	; 0x32c8 <vid_convertToSignal+0x13c>
    32c6:	77 c0       	rjmp	.+238    	; 0x33b6 <vid_convertToSignal+0x22a>
			DIO_VIDSetPinValue(PORT_D,0,HIGH);
    32c8:	84 e4       	ldi	r24, 0x44	; 68
    32ca:	60 e0       	ldi	r22, 0x00	; 0
    32cc:	41 e0       	ldi	r20, 0x01	; 1
    32ce:	0e 94 85 09 	call	0x130a	; 0x130a <DIO_VIDSetPinValue>
    32d2:	80 e0       	ldi	r24, 0x00	; 0
    32d4:	90 e0       	ldi	r25, 0x00	; 0
    32d6:	a8 e4       	ldi	r26, 0x48	; 72
    32d8:	b4 e4       	ldi	r27, 0x44	; 68
    32da:	89 8f       	std	Y+25, r24	; 0x19
    32dc:	9a 8f       	std	Y+26, r25	; 0x1a
    32de:	ab 8f       	std	Y+27, r26	; 0x1b
    32e0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32e2:	69 8d       	ldd	r22, Y+25	; 0x19
    32e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32ea:	20 e0       	ldi	r18, 0x00	; 0
    32ec:	30 e0       	ldi	r19, 0x00	; 0
    32ee:	4a e7       	ldi	r20, 0x7A	; 122
    32f0:	55 e4       	ldi	r21, 0x45	; 69
    32f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f6:	dc 01       	movw	r26, r24
    32f8:	cb 01       	movw	r24, r22
    32fa:	8d 8b       	std	Y+21, r24	; 0x15
    32fc:	9e 8b       	std	Y+22, r25	; 0x16
    32fe:	af 8b       	std	Y+23, r26	; 0x17
    3300:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3302:	6d 89       	ldd	r22, Y+21	; 0x15
    3304:	7e 89       	ldd	r23, Y+22	; 0x16
    3306:	8f 89       	ldd	r24, Y+23	; 0x17
    3308:	98 8d       	ldd	r25, Y+24	; 0x18
    330a:	20 e0       	ldi	r18, 0x00	; 0
    330c:	30 e0       	ldi	r19, 0x00	; 0
    330e:	40 e8       	ldi	r20, 0x80	; 128
    3310:	5f e3       	ldi	r21, 0x3F	; 63
    3312:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3316:	88 23       	and	r24, r24
    3318:	2c f4       	brge	.+10     	; 0x3324 <vid_convertToSignal+0x198>
		__ticks = 1;
    331a:	81 e0       	ldi	r24, 0x01	; 1
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	9c 8b       	std	Y+20, r25	; 0x14
    3320:	8b 8b       	std	Y+19, r24	; 0x13
    3322:	3f c0       	rjmp	.+126    	; 0x33a2 <vid_convertToSignal+0x216>
	else if (__tmp > 65535)
    3324:	6d 89       	ldd	r22, Y+21	; 0x15
    3326:	7e 89       	ldd	r23, Y+22	; 0x16
    3328:	8f 89       	ldd	r24, Y+23	; 0x17
    332a:	98 8d       	ldd	r25, Y+24	; 0x18
    332c:	20 e0       	ldi	r18, 0x00	; 0
    332e:	3f ef       	ldi	r19, 0xFF	; 255
    3330:	4f e7       	ldi	r20, 0x7F	; 127
    3332:	57 e4       	ldi	r21, 0x47	; 71
    3334:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3338:	18 16       	cp	r1, r24
    333a:	4c f5       	brge	.+82     	; 0x338e <vid_convertToSignal+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    333c:	69 8d       	ldd	r22, Y+25	; 0x19
    333e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3340:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3342:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3344:	20 e0       	ldi	r18, 0x00	; 0
    3346:	30 e0       	ldi	r19, 0x00	; 0
    3348:	40 e2       	ldi	r20, 0x20	; 32
    334a:	51 e4       	ldi	r21, 0x41	; 65
    334c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3350:	dc 01       	movw	r26, r24
    3352:	cb 01       	movw	r24, r22
    3354:	bc 01       	movw	r22, r24
    3356:	cd 01       	movw	r24, r26
    3358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    335c:	dc 01       	movw	r26, r24
    335e:	cb 01       	movw	r24, r22
    3360:	9c 8b       	std	Y+20, r25	; 0x14
    3362:	8b 8b       	std	Y+19, r24	; 0x13
    3364:	0f c0       	rjmp	.+30     	; 0x3384 <vid_convertToSignal+0x1f8>
    3366:	80 e9       	ldi	r24, 0x90	; 144
    3368:	91 e0       	ldi	r25, 0x01	; 1
    336a:	9a 8b       	std	Y+18, r25	; 0x12
    336c:	89 8b       	std	Y+17, r24	; 0x11
    336e:	89 89       	ldd	r24, Y+17	; 0x11
    3370:	9a 89       	ldd	r25, Y+18	; 0x12
    3372:	01 97       	sbiw	r24, 0x01	; 1
    3374:	f1 f7       	brne	.-4      	; 0x3372 <vid_convertToSignal+0x1e6>
    3376:	9a 8b       	std	Y+18, r25	; 0x12
    3378:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    337a:	8b 89       	ldd	r24, Y+19	; 0x13
    337c:	9c 89       	ldd	r25, Y+20	; 0x14
    337e:	01 97       	sbiw	r24, 0x01	; 1
    3380:	9c 8b       	std	Y+20, r25	; 0x14
    3382:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3384:	8b 89       	ldd	r24, Y+19	; 0x13
    3386:	9c 89       	ldd	r25, Y+20	; 0x14
    3388:	00 97       	sbiw	r24, 0x00	; 0
    338a:	69 f7       	brne	.-38     	; 0x3366 <vid_convertToSignal+0x1da>
    338c:	14 c0       	rjmp	.+40     	; 0x33b6 <vid_convertToSignal+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    338e:	6d 89       	ldd	r22, Y+21	; 0x15
    3390:	7e 89       	ldd	r23, Y+22	; 0x16
    3392:	8f 89       	ldd	r24, Y+23	; 0x17
    3394:	98 8d       	ldd	r25, Y+24	; 0x18
    3396:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    339a:	dc 01       	movw	r26, r24
    339c:	cb 01       	movw	r24, r22
    339e:	9c 8b       	std	Y+20, r25	; 0x14
    33a0:	8b 8b       	std	Y+19, r24	; 0x13
    33a2:	8b 89       	ldd	r24, Y+19	; 0x13
    33a4:	9c 89       	ldd	r25, Y+20	; 0x14
    33a6:	98 8b       	std	Y+16, r25	; 0x10
    33a8:	8f 87       	std	Y+15, r24	; 0x0f
    33aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    33ac:	98 89       	ldd	r25, Y+16	; 0x10
    33ae:	01 97       	sbiw	r24, 0x01	; 1
    33b0:	f1 f7       	brne	.-4      	; 0x33ae <vid_convertToSignal+0x222>
    33b2:	98 8b       	std	Y+16, r25	; 0x10
    33b4:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(800);
		}
		DIO_VIDSetPinValue(PORT_D,0,LOW);
    33b6:	84 e4       	ldi	r24, 0x44	; 68
    33b8:	60 e0       	ldi	r22, 0x00	; 0
    33ba:	40 e0       	ldi	r20, 0x00	; 0
    33bc:	0e 94 85 09 	call	0x130a	; 0x130a <DIO_VIDSetPinValue>
    33c0:	80 e0       	ldi	r24, 0x00	; 0
    33c2:	90 e0       	ldi	r25, 0x00	; 0
    33c4:	a8 e4       	ldi	r26, 0x48	; 72
    33c6:	b3 e4       	ldi	r27, 0x43	; 67
    33c8:	8b 87       	std	Y+11, r24	; 0x0b
    33ca:	9c 87       	std	Y+12, r25	; 0x0c
    33cc:	ad 87       	std	Y+13, r26	; 0x0d
    33ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    33d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    33d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    33d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    33d8:	20 e0       	ldi	r18, 0x00	; 0
    33da:	30 e0       	ldi	r19, 0x00	; 0
    33dc:	4a e7       	ldi	r20, 0x7A	; 122
    33de:	55 e4       	ldi	r21, 0x45	; 69
    33e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e4:	dc 01       	movw	r26, r24
    33e6:	cb 01       	movw	r24, r22
    33e8:	8f 83       	std	Y+7, r24	; 0x07
    33ea:	98 87       	std	Y+8, r25	; 0x08
    33ec:	a9 87       	std	Y+9, r26	; 0x09
    33ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33f0:	6f 81       	ldd	r22, Y+7	; 0x07
    33f2:	78 85       	ldd	r23, Y+8	; 0x08
    33f4:	89 85       	ldd	r24, Y+9	; 0x09
    33f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    33f8:	20 e0       	ldi	r18, 0x00	; 0
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	40 e8       	ldi	r20, 0x80	; 128
    33fe:	5f e3       	ldi	r21, 0x3F	; 63
    3400:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3404:	88 23       	and	r24, r24
    3406:	2c f4       	brge	.+10     	; 0x3412 <vid_convertToSignal+0x286>
		__ticks = 1;
    3408:	81 e0       	ldi	r24, 0x01	; 1
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	9e 83       	std	Y+6, r25	; 0x06
    340e:	8d 83       	std	Y+5, r24	; 0x05
    3410:	3f c0       	rjmp	.+126    	; 0x3490 <vid_convertToSignal+0x304>
	else if (__tmp > 65535)
    3412:	6f 81       	ldd	r22, Y+7	; 0x07
    3414:	78 85       	ldd	r23, Y+8	; 0x08
    3416:	89 85       	ldd	r24, Y+9	; 0x09
    3418:	9a 85       	ldd	r25, Y+10	; 0x0a
    341a:	20 e0       	ldi	r18, 0x00	; 0
    341c:	3f ef       	ldi	r19, 0xFF	; 255
    341e:	4f e7       	ldi	r20, 0x7F	; 127
    3420:	57 e4       	ldi	r21, 0x47	; 71
    3422:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3426:	18 16       	cp	r1, r24
    3428:	4c f5       	brge	.+82     	; 0x347c <vid_convertToSignal+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    342a:	6b 85       	ldd	r22, Y+11	; 0x0b
    342c:	7c 85       	ldd	r23, Y+12	; 0x0c
    342e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3430:	9e 85       	ldd	r25, Y+14	; 0x0e
    3432:	20 e0       	ldi	r18, 0x00	; 0
    3434:	30 e0       	ldi	r19, 0x00	; 0
    3436:	40 e2       	ldi	r20, 0x20	; 32
    3438:	51 e4       	ldi	r21, 0x41	; 65
    343a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    343e:	dc 01       	movw	r26, r24
    3440:	cb 01       	movw	r24, r22
    3442:	bc 01       	movw	r22, r24
    3444:	cd 01       	movw	r24, r26
    3446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    344a:	dc 01       	movw	r26, r24
    344c:	cb 01       	movw	r24, r22
    344e:	9e 83       	std	Y+6, r25	; 0x06
    3450:	8d 83       	std	Y+5, r24	; 0x05
    3452:	0f c0       	rjmp	.+30     	; 0x3472 <vid_convertToSignal+0x2e6>
    3454:	80 e9       	ldi	r24, 0x90	; 144
    3456:	91 e0       	ldi	r25, 0x01	; 1
    3458:	9c 83       	std	Y+4, r25	; 0x04
    345a:	8b 83       	std	Y+3, r24	; 0x03
    345c:	8b 81       	ldd	r24, Y+3	; 0x03
    345e:	9c 81       	ldd	r25, Y+4	; 0x04
    3460:	01 97       	sbiw	r24, 0x01	; 1
    3462:	f1 f7       	brne	.-4      	; 0x3460 <vid_convertToSignal+0x2d4>
    3464:	9c 83       	std	Y+4, r25	; 0x04
    3466:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3468:	8d 81       	ldd	r24, Y+5	; 0x05
    346a:	9e 81       	ldd	r25, Y+6	; 0x06
    346c:	01 97       	sbiw	r24, 0x01	; 1
    346e:	9e 83       	std	Y+6, r25	; 0x06
    3470:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3472:	8d 81       	ldd	r24, Y+5	; 0x05
    3474:	9e 81       	ldd	r25, Y+6	; 0x06
    3476:	00 97       	sbiw	r24, 0x00	; 0
    3478:	69 f7       	brne	.-38     	; 0x3454 <vid_convertToSignal+0x2c8>
    347a:	14 c0       	rjmp	.+40     	; 0x34a4 <vid_convertToSignal+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    347c:	6f 81       	ldd	r22, Y+7	; 0x07
    347e:	78 85       	ldd	r23, Y+8	; 0x08
    3480:	89 85       	ldd	r24, Y+9	; 0x09
    3482:	9a 85       	ldd	r25, Y+10	; 0x0a
    3484:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3488:	dc 01       	movw	r26, r24
    348a:	cb 01       	movw	r24, r22
    348c:	9e 83       	std	Y+6, r25	; 0x06
    348e:	8d 83       	std	Y+5, r24	; 0x05
    3490:	8d 81       	ldd	r24, Y+5	; 0x05
    3492:	9e 81       	ldd	r25, Y+6	; 0x06
    3494:	9a 83       	std	Y+2, r25	; 0x02
    3496:	89 83       	std	Y+1, r24	; 0x01
    3498:	89 81       	ldd	r24, Y+1	; 0x01
    349a:	9a 81       	ldd	r25, Y+2	; 0x02
    349c:	01 97       	sbiw	r24, 0x01	; 1
    349e:	f1 f7       	brne	.-4      	; 0x349c <vid_convertToSignal+0x310>
    34a0:	9a 83       	std	Y+2, r25	; 0x02
    34a2:	89 83       	std	Y+1, r24	; 0x01
		HKEYPAD_vidinit();
		DIO_VIDSetPinDirection(PORT_D,0,OUTPUT);
		pattern = malloc(5*sizeof(u8));
}
void vid_convertToSignal(u8*pattern){
	for(u8 i = 0; pattern[i]; i++){
    34a4:	8b a5       	ldd	r24, Y+43	; 0x2b
    34a6:	8f 5f       	subi	r24, 0xFF	; 255
    34a8:	8b a7       	std	Y+43, r24	; 0x2b
    34aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    34ac:	28 2f       	mov	r18, r24
    34ae:	30 e0       	ldi	r19, 0x00	; 0
    34b0:	8c a5       	ldd	r24, Y+44	; 0x2c
    34b2:	9d a5       	ldd	r25, Y+45	; 0x2d
    34b4:	fc 01       	movw	r30, r24
    34b6:	e2 0f       	add	r30, r18
    34b8:	f3 1f       	adc	r31, r19
    34ba:	80 81       	ld	r24, Z
    34bc:	88 23       	and	r24, r24
    34be:	09 f0       	breq	.+2      	; 0x34c2 <vid_convertToSignal+0x336>
    34c0:	73 ce       	rjmp	.-794    	; 0x31a8 <vid_convertToSignal+0x1c>
			_delay_ms(800);
		}
		DIO_VIDSetPinValue(PORT_D,0,LOW);
		_delay_ms(200);
	}
}
    34c2:	ad 96       	adiw	r28, 0x2d	; 45
    34c4:	0f b6       	in	r0, 0x3f	; 63
    34c6:	f8 94       	cli
    34c8:	de bf       	out	0x3e, r29	; 62
    34ca:	0f be       	out	0x3f, r0	; 63
    34cc:	cd bf       	out	0x3d, r28	; 61
    34ce:	cf 91       	pop	r28
    34d0:	df 91       	pop	r29
    34d2:	08 95       	ret

000034d4 <vid_transmitCharcters>:
void vid_transmitCharcters(){
    34d4:	df 93       	push	r29
    34d6:	cf 93       	push	r28
    34d8:	00 d0       	rcall	.+0      	; 0x34da <vid_transmitCharcters+0x6>
    34da:	cd b7       	in	r28, 0x3d	; 61
    34dc:	de b7       	in	r29, 0x3e	; 62
	u8 letter = '+';
    34de:	8b e2       	ldi	r24, 0x2B	; 43
    34e0:	8a 83       	std	Y+2, r24	; 0x02
    34e2:	03 c0       	rjmp	.+6      	; 0x34ea <vid_transmitCharcters+0x16>
	while(1){
		while(letter =='+'){
			letter = HKEYPAD_u8getCharecterValue();
    34e4:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <HKEYPAD_u8getCharecterValue>
    34e8:	8a 83       	std	Y+2, r24	; 0x02
	}
}
void vid_transmitCharcters(){
	u8 letter = '+';
	while(1){
		while(letter =='+'){
    34ea:	8a 81       	ldd	r24, Y+2	; 0x02
    34ec:	8b 32       	cpi	r24, 0x2B	; 43
    34ee:	d1 f3       	breq	.-12     	; 0x34e4 <vid_transmitCharcters+0x10>
			letter = HKEYPAD_u8getCharecterValue();
		}
		HCLCD_vidClear();
    34f0:	0e 94 5f 15 	call	0x2abe	; 0x2abe <HCLCD_vidClear>
		HCLCD_vidGoTo(0,0);
    34f4:	80 e0       	ldi	r24, 0x00	; 0
    34f6:	60 e0       	ldi	r22, 0x00	; 0
    34f8:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <HCLCD_vidGoTo>
		HCLCD_vidSendData(letter-0x20);
    34fc:	8a 81       	ldd	r24, Y+2	; 0x02
    34fe:	80 52       	subi	r24, 0x20	; 32
    3500:	0e 94 c6 12 	call	0x258c	; 0x258c <HCLCD_vidSendData>
		u8 conversionState = convertToMorse(pattern,letter);
    3504:	80 91 46 02 	lds	r24, 0x0246
    3508:	90 91 47 02 	lds	r25, 0x0247
    350c:	2a 81       	ldd	r18, Y+2	; 0x02
    350e:	62 2f       	mov	r22, r18
    3510:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <convertToMorse>
    3514:	89 83       	std	Y+1, r24	; 0x01
		if(conversionState == CONVERTED){
    3516:	89 81       	ldd	r24, Y+1	; 0x01
    3518:	88 23       	and	r24, r24
    351a:	99 f4       	brne	.+38     	; 0x3542 <vid_transmitCharcters+0x6e>
			HCLCD_vidGoTo(0,1);
    351c:	80 e0       	ldi	r24, 0x00	; 0
    351e:	61 e0       	ldi	r22, 0x01	; 1
    3520:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <HCLCD_vidGoTo>
			HCLCD_vidSendString(pattern);
    3524:	80 91 46 02 	lds	r24, 0x0246
    3528:	90 91 47 02 	lds	r25, 0x0247
    352c:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <HCLCD_vidSendString>
			vid_convertToSignal(pattern);
    3530:	80 91 46 02 	lds	r24, 0x0246
    3534:	90 91 47 02 	lds	r25, 0x0247
    3538:	0e 94 c6 18 	call	0x318c	; 0x318c <vid_convertToSignal>
			letter = '+';
    353c:	8b e2       	ldi	r24, 0x2B	; 43
    353e:	8a 83       	std	Y+2, r24	; 0x02
    3540:	d4 cf       	rjmp	.-88     	; 0x34ea <vid_transmitCharcters+0x16>
		}else{
			vid_handle_NonConverted(&letter);
    3542:	ce 01       	movw	r24, r28
    3544:	02 96       	adiw	r24, 0x02	; 2
    3546:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <vid_handle_NonConverted>
    354a:	cf cf       	rjmp	.-98     	; 0x34ea <vid_transmitCharcters+0x16>

0000354c <vid_transmitNumbers>:
		}

	}
}
void vid_transmitNumbers(){
    354c:	df 93       	push	r29
    354e:	cf 93       	push	r28
    3550:	00 d0       	rcall	.+0      	; 0x3552 <vid_transmitNumbers+0x6>
    3552:	cd b7       	in	r28, 0x3d	; 61
    3554:	de b7       	in	r29, 0x3e	; 62
	u8 letter = '+';
    3556:	8b e2       	ldi	r24, 0x2B	; 43
    3558:	8a 83       	std	Y+2, r24	; 0x02
    355a:	03 c0       	rjmp	.+6      	; 0x3562 <vid_transmitNumbers+0x16>
	while(1){
		while(letter =='+'){
			letter = HKEYPAD_u8getPressedValue();
    355c:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <HKEYPAD_u8getPressedValue>
    3560:	8a 83       	std	Y+2, r24	; 0x02
	}
}
void vid_transmitNumbers(){
	u8 letter = '+';
	while(1){
		while(letter =='+'){
    3562:	8a 81       	ldd	r24, Y+2	; 0x02
    3564:	8b 32       	cpi	r24, 0x2B	; 43
    3566:	d1 f3       	breq	.-12     	; 0x355c <vid_transmitNumbers+0x10>
			letter = HKEYPAD_u8getPressedValue();
		}
		HCLCD_vidClear();
    3568:	0e 94 5f 15 	call	0x2abe	; 0x2abe <HCLCD_vidClear>
		HCLCD_vidGoTo(0,0);
    356c:	80 e0       	ldi	r24, 0x00	; 0
    356e:	60 e0       	ldi	r22, 0x00	; 0
    3570:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <HCLCD_vidGoTo>
		HCLCD_vidSendData(letter);
    3574:	8a 81       	ldd	r24, Y+2	; 0x02
    3576:	0e 94 c6 12 	call	0x258c	; 0x258c <HCLCD_vidSendData>
		u8 conversionState = convertToMorse(pattern,letter);
    357a:	80 91 46 02 	lds	r24, 0x0246
    357e:	90 91 47 02 	lds	r25, 0x0247
    3582:	2a 81       	ldd	r18, Y+2	; 0x02
    3584:	62 2f       	mov	r22, r18
    3586:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <convertToMorse>
    358a:	89 83       	std	Y+1, r24	; 0x01
		if(conversionState == CONVERTED){
    358c:	89 81       	ldd	r24, Y+1	; 0x01
    358e:	88 23       	and	r24, r24
    3590:	99 f4       	brne	.+38     	; 0x35b8 <vid_transmitNumbers+0x6c>
			HCLCD_vidGoTo(0,1);
    3592:	80 e0       	ldi	r24, 0x00	; 0
    3594:	61 e0       	ldi	r22, 0x01	; 1
    3596:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <HCLCD_vidGoTo>
			HCLCD_vidSendString(pattern);
    359a:	80 91 46 02 	lds	r24, 0x0246
    359e:	90 91 47 02 	lds	r25, 0x0247
    35a2:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <HCLCD_vidSendString>
			vid_convertToSignal(pattern);
    35a6:	80 91 46 02 	lds	r24, 0x0246
    35aa:	90 91 47 02 	lds	r25, 0x0247
    35ae:	0e 94 c6 18 	call	0x318c	; 0x318c <vid_convertToSignal>
			letter = '+';
    35b2:	8b e2       	ldi	r24, 0x2B	; 43
    35b4:	8a 83       	std	Y+2, r24	; 0x02
    35b6:	d5 cf       	rjmp	.-86     	; 0x3562 <vid_transmitNumbers+0x16>
		}else{
			vid_handle_NonConverted(&letter);
    35b8:	ce 01       	movw	r24, r28
    35ba:	02 96       	adiw	r24, 0x02	; 2
    35bc:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <vid_handle_NonConverted>
    35c0:	d0 cf       	rjmp	.-96     	; 0x3562 <vid_transmitNumbers+0x16>

000035c2 <vid_handle_NonConverted>:
		}

	}
}
void vid_handle_NonConverted(u8*ptrToLetter){
    35c2:	df 93       	push	r29
    35c4:	cf 93       	push	r28
    35c6:	00 d0       	rcall	.+0      	; 0x35c8 <vid_handle_NonConverted+0x6>
    35c8:	cd b7       	in	r28, 0x3d	; 61
    35ca:	de b7       	in	r29, 0x3e	; 62
    35cc:	9a 83       	std	Y+2, r25	; 0x02
    35ce:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_vidClear();
    35d0:	0e 94 5f 15 	call	0x2abe	; 0x2abe <HCLCD_vidClear>
	if(*ptrToLetter == '*'){
    35d4:	e9 81       	ldd	r30, Y+1	; 0x01
    35d6:	fa 81       	ldd	r31, Y+2	; 0x02
    35d8:	80 81       	ld	r24, Z
    35da:	8a 32       	cpi	r24, 0x2A	; 42
    35dc:	11 f4       	brne	.+4      	; 0x35e2 <vid_handle_NonConverted+0x20>
		vid_displayHome();
    35de:	0e 94 6f 18 	call	0x30de	; 0x30de <vid_displayHome>
	}
	*ptrToLetter = '+';
    35e2:	e9 81       	ldd	r30, Y+1	; 0x01
    35e4:	fa 81       	ldd	r31, Y+2	; 0x02
    35e6:	8b e2       	ldi	r24, 0x2B	; 43
    35e8:	80 83       	st	Z, r24
}
    35ea:	0f 90       	pop	r0
    35ec:	0f 90       	pop	r0
    35ee:	cf 91       	pop	r28
    35f0:	df 91       	pop	r29
    35f2:	08 95       	ret

000035f4 <convertToMorse>:
CONVERSION_STATE convertToMorse(u8*pattern,u8 character){
    35f4:	df 93       	push	r29
    35f6:	cf 93       	push	r28
    35f8:	cd b7       	in	r28, 0x3d	; 61
    35fa:	de b7       	in	r29, 0x3e	; 62
    35fc:	29 97       	sbiw	r28, 0x09	; 9
    35fe:	0f b6       	in	r0, 0x3f	; 63
    3600:	f8 94       	cli
    3602:	de bf       	out	0x3e, r29	; 62
    3604:	0f be       	out	0x3f, r0	; 63
    3606:	cd bf       	out	0x3d, r28	; 61
    3608:	9d 83       	std	Y+5, r25	; 0x05
    360a:	8c 83       	std	Y+4, r24	; 0x04
    360c:	6e 83       	std	Y+6, r22	; 0x06
	u8* encoded = NULL;
    360e:	1b 82       	std	Y+3, r1	; 0x03
    3610:	1a 82       	std	Y+2, r1	; 0x02
	encoded = malloc(5*sizeof(u8));
    3612:	85 e0       	ldi	r24, 0x05	; 5
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <malloc>
    361a:	9b 83       	std	Y+3, r25	; 0x03
    361c:	8a 83       	std	Y+2, r24	; 0x02
	switch (character){
    361e:	8e 81       	ldd	r24, Y+6	; 0x06
    3620:	28 2f       	mov	r18, r24
    3622:	30 e0       	ldi	r19, 0x00	; 0
    3624:	39 87       	std	Y+9, r19	; 0x09
    3626:	28 87       	std	Y+8, r18	; 0x08
    3628:	88 85       	ldd	r24, Y+8	; 0x08
    362a:	99 85       	ldd	r25, Y+9	; 0x09
    362c:	88 36       	cpi	r24, 0x68	; 104
    362e:	91 05       	cpc	r25, r1
    3630:	09 f4       	brne	.+2      	; 0x3634 <convertToMorse+0x40>
    3632:	1b c1       	rjmp	.+566    	; 0x386a <convertToMorse+0x276>
    3634:	28 85       	ldd	r18, Y+8	; 0x08
    3636:	39 85       	ldd	r19, Y+9	; 0x09
    3638:	29 36       	cpi	r18, 0x69	; 105
    363a:	31 05       	cpc	r19, r1
    363c:	0c f0       	brlt	.+2      	; 0x3640 <convertToMorse+0x4c>
    363e:	79 c0       	rjmp	.+242    	; 0x3732 <convertToMorse+0x13e>
    3640:	88 85       	ldd	r24, Y+8	; 0x08
    3642:	99 85       	ldd	r25, Y+9	; 0x09
    3644:	88 33       	cpi	r24, 0x38	; 56
    3646:	91 05       	cpc	r25, r1
    3648:	09 f4       	brne	.+2      	; 0x364c <convertToMorse+0x58>
    364a:	96 c1       	rjmp	.+812    	; 0x3978 <convertToMorse+0x384>
    364c:	28 85       	ldd	r18, Y+8	; 0x08
    364e:	39 85       	ldd	r19, Y+9	; 0x09
    3650:	29 33       	cpi	r18, 0x39	; 57
    3652:	31 05       	cpc	r19, r1
    3654:	bc f5       	brge	.+110    	; 0x36c4 <convertToMorse+0xd0>
    3656:	88 85       	ldd	r24, Y+8	; 0x08
    3658:	99 85       	ldd	r25, Y+9	; 0x09
    365a:	83 33       	cpi	r24, 0x33	; 51
    365c:	91 05       	cpc	r25, r1
    365e:	09 f4       	brne	.+2      	; 0x3662 <convertToMorse+0x6e>
    3660:	72 c1       	rjmp	.+740    	; 0x3946 <convertToMorse+0x352>
    3662:	28 85       	ldd	r18, Y+8	; 0x08
    3664:	39 85       	ldd	r19, Y+9	; 0x09
    3666:	24 33       	cpi	r18, 0x34	; 52
    3668:	31 05       	cpc	r19, r1
    366a:	9c f4       	brge	.+38     	; 0x3692 <convertToMorse+0x9e>
    366c:	88 85       	ldd	r24, Y+8	; 0x08
    366e:	99 85       	ldd	r25, Y+9	; 0x09
    3670:	81 33       	cpi	r24, 0x31	; 49
    3672:	91 05       	cpc	r25, r1
    3674:	09 f4       	brne	.+2      	; 0x3678 <convertToMorse+0x84>
    3676:	5d c1       	rjmp	.+698    	; 0x3932 <convertToMorse+0x33e>
    3678:	28 85       	ldd	r18, Y+8	; 0x08
    367a:	39 85       	ldd	r19, Y+9	; 0x09
    367c:	22 33       	cpi	r18, 0x32	; 50
    367e:	31 05       	cpc	r19, r1
    3680:	0c f0       	brlt	.+2      	; 0x3684 <convertToMorse+0x90>
    3682:	5c c1       	rjmp	.+696    	; 0x393c <convertToMorse+0x348>
    3684:	88 85       	ldd	r24, Y+8	; 0x08
    3686:	99 85       	ldd	r25, Y+9	; 0x09
    3688:	80 33       	cpi	r24, 0x30	; 48
    368a:	91 05       	cpc	r25, r1
    368c:	09 f4       	brne	.+2      	; 0x3690 <convertToMorse+0x9c>
    368e:	4c c1       	rjmp	.+664    	; 0x3928 <convertToMorse+0x334>
    3690:	7d c1       	rjmp	.+762    	; 0x398c <convertToMorse+0x398>
    3692:	28 85       	ldd	r18, Y+8	; 0x08
    3694:	39 85       	ldd	r19, Y+9	; 0x09
    3696:	25 33       	cpi	r18, 0x35	; 53
    3698:	31 05       	cpc	r19, r1
    369a:	09 f4       	brne	.+2      	; 0x369e <convertToMorse+0xaa>
    369c:	5e c1       	rjmp	.+700    	; 0x395a <convertToMorse+0x366>
    369e:	88 85       	ldd	r24, Y+8	; 0x08
    36a0:	99 85       	ldd	r25, Y+9	; 0x09
    36a2:	85 33       	cpi	r24, 0x35	; 53
    36a4:	91 05       	cpc	r25, r1
    36a6:	0c f4       	brge	.+2      	; 0x36aa <convertToMorse+0xb6>
    36a8:	53 c1       	rjmp	.+678    	; 0x3950 <convertToMorse+0x35c>
    36aa:	28 85       	ldd	r18, Y+8	; 0x08
    36ac:	39 85       	ldd	r19, Y+9	; 0x09
    36ae:	26 33       	cpi	r18, 0x36	; 54
    36b0:	31 05       	cpc	r19, r1
    36b2:	09 f4       	brne	.+2      	; 0x36b6 <convertToMorse+0xc2>
    36b4:	57 c1       	rjmp	.+686    	; 0x3964 <convertToMorse+0x370>
    36b6:	88 85       	ldd	r24, Y+8	; 0x08
    36b8:	99 85       	ldd	r25, Y+9	; 0x09
    36ba:	87 33       	cpi	r24, 0x37	; 55
    36bc:	91 05       	cpc	r25, r1
    36be:	09 f4       	brne	.+2      	; 0x36c2 <convertToMorse+0xce>
    36c0:	56 c1       	rjmp	.+684    	; 0x396e <convertToMorse+0x37a>
    36c2:	64 c1       	rjmp	.+712    	; 0x398c <convertToMorse+0x398>
    36c4:	28 85       	ldd	r18, Y+8	; 0x08
    36c6:	39 85       	ldd	r19, Y+9	; 0x09
    36c8:	23 36       	cpi	r18, 0x63	; 99
    36ca:	31 05       	cpc	r19, r1
    36cc:	09 f4       	brne	.+2      	; 0x36d0 <convertToMorse+0xdc>
    36ce:	b4 c0       	rjmp	.+360    	; 0x3838 <convertToMorse+0x244>
    36d0:	88 85       	ldd	r24, Y+8	; 0x08
    36d2:	99 85       	ldd	r25, Y+9	; 0x09
    36d4:	84 36       	cpi	r24, 0x64	; 100
    36d6:	91 05       	cpc	r25, r1
    36d8:	9c f4       	brge	.+38     	; 0x3700 <convertToMorse+0x10c>
    36da:	28 85       	ldd	r18, Y+8	; 0x08
    36dc:	39 85       	ldd	r19, Y+9	; 0x09
    36de:	21 36       	cpi	r18, 0x61	; 97
    36e0:	31 05       	cpc	r19, r1
    36e2:	09 f4       	brne	.+2      	; 0x36e6 <convertToMorse+0xf2>
    36e4:	9f c0       	rjmp	.+318    	; 0x3824 <convertToMorse+0x230>
    36e6:	88 85       	ldd	r24, Y+8	; 0x08
    36e8:	99 85       	ldd	r25, Y+9	; 0x09
    36ea:	82 36       	cpi	r24, 0x62	; 98
    36ec:	91 05       	cpc	r25, r1
    36ee:	0c f0       	brlt	.+2      	; 0x36f2 <convertToMorse+0xfe>
    36f0:	9e c0       	rjmp	.+316    	; 0x382e <convertToMorse+0x23a>
    36f2:	28 85       	ldd	r18, Y+8	; 0x08
    36f4:	39 85       	ldd	r19, Y+9	; 0x09
    36f6:	29 33       	cpi	r18, 0x39	; 57
    36f8:	31 05       	cpc	r19, r1
    36fa:	09 f4       	brne	.+2      	; 0x36fe <convertToMorse+0x10a>
    36fc:	42 c1       	rjmp	.+644    	; 0x3982 <convertToMorse+0x38e>
    36fe:	46 c1       	rjmp	.+652    	; 0x398c <convertToMorse+0x398>
    3700:	88 85       	ldd	r24, Y+8	; 0x08
    3702:	99 85       	ldd	r25, Y+9	; 0x09
    3704:	85 36       	cpi	r24, 0x65	; 101
    3706:	91 05       	cpc	r25, r1
    3708:	09 f4       	brne	.+2      	; 0x370c <convertToMorse+0x118>
    370a:	a0 c0       	rjmp	.+320    	; 0x384c <convertToMorse+0x258>
    370c:	28 85       	ldd	r18, Y+8	; 0x08
    370e:	39 85       	ldd	r19, Y+9	; 0x09
    3710:	25 36       	cpi	r18, 0x65	; 101
    3712:	31 05       	cpc	r19, r1
    3714:	0c f4       	brge	.+2      	; 0x3718 <convertToMorse+0x124>
    3716:	95 c0       	rjmp	.+298    	; 0x3842 <convertToMorse+0x24e>
    3718:	88 85       	ldd	r24, Y+8	; 0x08
    371a:	99 85       	ldd	r25, Y+9	; 0x09
    371c:	86 36       	cpi	r24, 0x66	; 102
    371e:	91 05       	cpc	r25, r1
    3720:	09 f4       	brne	.+2      	; 0x3724 <convertToMorse+0x130>
    3722:	99 c0       	rjmp	.+306    	; 0x3856 <convertToMorse+0x262>
    3724:	28 85       	ldd	r18, Y+8	; 0x08
    3726:	39 85       	ldd	r19, Y+9	; 0x09
    3728:	27 36       	cpi	r18, 0x67	; 103
    372a:	31 05       	cpc	r19, r1
    372c:	09 f4       	brne	.+2      	; 0x3730 <convertToMorse+0x13c>
    372e:	98 c0       	rjmp	.+304    	; 0x3860 <convertToMorse+0x26c>
    3730:	2d c1       	rjmp	.+602    	; 0x398c <convertToMorse+0x398>
    3732:	88 85       	ldd	r24, Y+8	; 0x08
    3734:	99 85       	ldd	r25, Y+9	; 0x09
    3736:	81 37       	cpi	r24, 0x71	; 113
    3738:	91 05       	cpc	r25, r1
    373a:	09 f4       	brne	.+2      	; 0x373e <convertToMorse+0x14a>
    373c:	c3 c0       	rjmp	.+390    	; 0x38c4 <convertToMorse+0x2d0>
    373e:	28 85       	ldd	r18, Y+8	; 0x08
    3740:	39 85       	ldd	r19, Y+9	; 0x09
    3742:	22 37       	cpi	r18, 0x72	; 114
    3744:	31 05       	cpc	r19, r1
    3746:	8c f5       	brge	.+98     	; 0x37aa <convertToMorse+0x1b6>
    3748:	88 85       	ldd	r24, Y+8	; 0x08
    374a:	99 85       	ldd	r25, Y+9	; 0x09
    374c:	8c 36       	cpi	r24, 0x6C	; 108
    374e:	91 05       	cpc	r25, r1
    3750:	09 f4       	brne	.+2      	; 0x3754 <convertToMorse+0x160>
    3752:	9f c0       	rjmp	.+318    	; 0x3892 <convertToMorse+0x29e>
    3754:	28 85       	ldd	r18, Y+8	; 0x08
    3756:	39 85       	ldd	r19, Y+9	; 0x09
    3758:	2d 36       	cpi	r18, 0x6D	; 109
    375a:	31 05       	cpc	r19, r1
    375c:	6c f4       	brge	.+26     	; 0x3778 <convertToMorse+0x184>
    375e:	88 85       	ldd	r24, Y+8	; 0x08
    3760:	99 85       	ldd	r25, Y+9	; 0x09
    3762:	8a 36       	cpi	r24, 0x6A	; 106
    3764:	91 05       	cpc	r25, r1
    3766:	09 f4       	brne	.+2      	; 0x376a <convertToMorse+0x176>
    3768:	8a c0       	rjmp	.+276    	; 0x387e <convertToMorse+0x28a>
    376a:	28 85       	ldd	r18, Y+8	; 0x08
    376c:	39 85       	ldd	r19, Y+9	; 0x09
    376e:	2b 36       	cpi	r18, 0x6B	; 107
    3770:	31 05       	cpc	r19, r1
    3772:	0c f0       	brlt	.+2      	; 0x3776 <convertToMorse+0x182>
    3774:	89 c0       	rjmp	.+274    	; 0x3888 <convertToMorse+0x294>
    3776:	7e c0       	rjmp	.+252    	; 0x3874 <convertToMorse+0x280>
    3778:	88 85       	ldd	r24, Y+8	; 0x08
    377a:	99 85       	ldd	r25, Y+9	; 0x09
    377c:	8e 36       	cpi	r24, 0x6E	; 110
    377e:	91 05       	cpc	r25, r1
    3780:	09 f4       	brne	.+2      	; 0x3784 <convertToMorse+0x190>
    3782:	91 c0       	rjmp	.+290    	; 0x38a6 <convertToMorse+0x2b2>
    3784:	28 85       	ldd	r18, Y+8	; 0x08
    3786:	39 85       	ldd	r19, Y+9	; 0x09
    3788:	2e 36       	cpi	r18, 0x6E	; 110
    378a:	31 05       	cpc	r19, r1
    378c:	0c f4       	brge	.+2      	; 0x3790 <convertToMorse+0x19c>
    378e:	86 c0       	rjmp	.+268    	; 0x389c <convertToMorse+0x2a8>
    3790:	88 85       	ldd	r24, Y+8	; 0x08
    3792:	99 85       	ldd	r25, Y+9	; 0x09
    3794:	8f 36       	cpi	r24, 0x6F	; 111
    3796:	91 05       	cpc	r25, r1
    3798:	09 f4       	brne	.+2      	; 0x379c <convertToMorse+0x1a8>
    379a:	8a c0       	rjmp	.+276    	; 0x38b0 <convertToMorse+0x2bc>
    379c:	28 85       	ldd	r18, Y+8	; 0x08
    379e:	39 85       	ldd	r19, Y+9	; 0x09
    37a0:	20 37       	cpi	r18, 0x70	; 112
    37a2:	31 05       	cpc	r19, r1
    37a4:	09 f4       	brne	.+2      	; 0x37a8 <convertToMorse+0x1b4>
    37a6:	89 c0       	rjmp	.+274    	; 0x38ba <convertToMorse+0x2c6>
    37a8:	f1 c0       	rjmp	.+482    	; 0x398c <convertToMorse+0x398>
    37aa:	88 85       	ldd	r24, Y+8	; 0x08
    37ac:	99 85       	ldd	r25, Y+9	; 0x09
    37ae:	86 37       	cpi	r24, 0x76	; 118
    37b0:	91 05       	cpc	r25, r1
    37b2:	09 f4       	brne	.+2      	; 0x37b6 <convertToMorse+0x1c2>
    37b4:	a0 c0       	rjmp	.+320    	; 0x38f6 <convertToMorse+0x302>
    37b6:	28 85       	ldd	r18, Y+8	; 0x08
    37b8:	39 85       	ldd	r19, Y+9	; 0x09
    37ba:	27 37       	cpi	r18, 0x77	; 119
    37bc:	31 05       	cpc	r19, r1
    37be:	cc f4       	brge	.+50     	; 0x37f2 <convertToMorse+0x1fe>
    37c0:	88 85       	ldd	r24, Y+8	; 0x08
    37c2:	99 85       	ldd	r25, Y+9	; 0x09
    37c4:	83 37       	cpi	r24, 0x73	; 115
    37c6:	91 05       	cpc	r25, r1
    37c8:	09 f4       	brne	.+2      	; 0x37cc <convertToMorse+0x1d8>
    37ca:	86 c0       	rjmp	.+268    	; 0x38d8 <convertToMorse+0x2e4>
    37cc:	28 85       	ldd	r18, Y+8	; 0x08
    37ce:	39 85       	ldd	r19, Y+9	; 0x09
    37d0:	23 37       	cpi	r18, 0x73	; 115
    37d2:	31 05       	cpc	r19, r1
    37d4:	0c f4       	brge	.+2      	; 0x37d8 <convertToMorse+0x1e4>
    37d6:	7b c0       	rjmp	.+246    	; 0x38ce <convertToMorse+0x2da>
    37d8:	88 85       	ldd	r24, Y+8	; 0x08
    37da:	99 85       	ldd	r25, Y+9	; 0x09
    37dc:	84 37       	cpi	r24, 0x74	; 116
    37de:	91 05       	cpc	r25, r1
    37e0:	09 f4       	brne	.+2      	; 0x37e4 <convertToMorse+0x1f0>
    37e2:	7f c0       	rjmp	.+254    	; 0x38e2 <convertToMorse+0x2ee>
    37e4:	28 85       	ldd	r18, Y+8	; 0x08
    37e6:	39 85       	ldd	r19, Y+9	; 0x09
    37e8:	25 37       	cpi	r18, 0x75	; 117
    37ea:	31 05       	cpc	r19, r1
    37ec:	09 f4       	brne	.+2      	; 0x37f0 <convertToMorse+0x1fc>
    37ee:	7e c0       	rjmp	.+252    	; 0x38ec <convertToMorse+0x2f8>
    37f0:	cd c0       	rjmp	.+410    	; 0x398c <convertToMorse+0x398>
    37f2:	88 85       	ldd	r24, Y+8	; 0x08
    37f4:	99 85       	ldd	r25, Y+9	; 0x09
    37f6:	88 37       	cpi	r24, 0x78	; 120
    37f8:	91 05       	cpc	r25, r1
    37fa:	09 f4       	brne	.+2      	; 0x37fe <convertToMorse+0x20a>
    37fc:	86 c0       	rjmp	.+268    	; 0x390a <convertToMorse+0x316>
    37fe:	28 85       	ldd	r18, Y+8	; 0x08
    3800:	39 85       	ldd	r19, Y+9	; 0x09
    3802:	28 37       	cpi	r18, 0x78	; 120
    3804:	31 05       	cpc	r19, r1
    3806:	0c f4       	brge	.+2      	; 0x380a <convertToMorse+0x216>
    3808:	7b c0       	rjmp	.+246    	; 0x3900 <convertToMorse+0x30c>
    380a:	88 85       	ldd	r24, Y+8	; 0x08
    380c:	99 85       	ldd	r25, Y+9	; 0x09
    380e:	89 37       	cpi	r24, 0x79	; 121
    3810:	91 05       	cpc	r25, r1
    3812:	09 f4       	brne	.+2      	; 0x3816 <convertToMorse+0x222>
    3814:	7f c0       	rjmp	.+254    	; 0x3914 <convertToMorse+0x320>
    3816:	28 85       	ldd	r18, Y+8	; 0x08
    3818:	39 85       	ldd	r19, Y+9	; 0x09
    381a:	2a 37       	cpi	r18, 0x7A	; 122
    381c:	31 05       	cpc	r19, r1
    381e:	09 f4       	brne	.+2      	; 0x3822 <convertToMorse+0x22e>
    3820:	7e c0       	rjmp	.+252    	; 0x391e <convertToMorse+0x32a>
    3822:	b4 c0       	rjmp	.+360    	; 0x398c <convertToMorse+0x398>
		case 'a':
			encoded = ".-";
    3824:	88 e7       	ldi	r24, 0x78	; 120
    3826:	90 e0       	ldi	r25, 0x00	; 0
    3828:	9b 83       	std	Y+3, r25	; 0x03
    382a:	8a 83       	std	Y+2, r24	; 0x02
    382c:	b2 c0       	rjmp	.+356    	; 0x3992 <convertToMorse+0x39e>
			break;
		case 'b':
			encoded = "-...";
    382e:	8b e7       	ldi	r24, 0x7B	; 123
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	9b 83       	std	Y+3, r25	; 0x03
    3834:	8a 83       	std	Y+2, r24	; 0x02
    3836:	ad c0       	rjmp	.+346    	; 0x3992 <convertToMorse+0x39e>
			break;
		case 'c':
			encoded = "-.-.";
    3838:	80 e8       	ldi	r24, 0x80	; 128
    383a:	90 e0       	ldi	r25, 0x00	; 0
    383c:	9b 83       	std	Y+3, r25	; 0x03
    383e:	8a 83       	std	Y+2, r24	; 0x02
    3840:	a8 c0       	rjmp	.+336    	; 0x3992 <convertToMorse+0x39e>
			break;
		case 'd':
			encoded = "-..";
    3842:	85 e8       	ldi	r24, 0x85	; 133
    3844:	90 e0       	ldi	r25, 0x00	; 0
    3846:	9b 83       	std	Y+3, r25	; 0x03
    3848:	8a 83       	std	Y+2, r24	; 0x02
    384a:	a3 c0       	rjmp	.+326    	; 0x3992 <convertToMorse+0x39e>
			break;
		case 'e':
			encoded = ".";
    384c:	89 e8       	ldi	r24, 0x89	; 137
    384e:	90 e0       	ldi	r25, 0x00	; 0
    3850:	9b 83       	std	Y+3, r25	; 0x03
    3852:	8a 83       	std	Y+2, r24	; 0x02
    3854:	9e c0       	rjmp	.+316    	; 0x3992 <convertToMorse+0x39e>
			break;
		case 'f':
			encoded = "..-.";
    3856:	8b e8       	ldi	r24, 0x8B	; 139
    3858:	90 e0       	ldi	r25, 0x00	; 0
    385a:	9b 83       	std	Y+3, r25	; 0x03
    385c:	8a 83       	std	Y+2, r24	; 0x02
    385e:	99 c0       	rjmp	.+306    	; 0x3992 <convertToMorse+0x39e>
			break;
		case 'g':
			encoded = "--.";
    3860:	80 e9       	ldi	r24, 0x90	; 144
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	9b 83       	std	Y+3, r25	; 0x03
    3866:	8a 83       	std	Y+2, r24	; 0x02
    3868:	94 c0       	rjmp	.+296    	; 0x3992 <convertToMorse+0x39e>
			break;
		case 'h':
			encoded = "....";
    386a:	84 e9       	ldi	r24, 0x94	; 148
    386c:	90 e0       	ldi	r25, 0x00	; 0
    386e:	9b 83       	std	Y+3, r25	; 0x03
    3870:	8a 83       	std	Y+2, r24	; 0x02
    3872:	8f c0       	rjmp	.+286    	; 0x3992 <convertToMorse+0x39e>
			break;
		case 'i':
			encoded = "..";
    3874:	89 e9       	ldi	r24, 0x99	; 153
    3876:	90 e0       	ldi	r25, 0x00	; 0
    3878:	9b 83       	std	Y+3, r25	; 0x03
    387a:	8a 83       	std	Y+2, r24	; 0x02
    387c:	8a c0       	rjmp	.+276    	; 0x3992 <convertToMorse+0x39e>
			break;
		case 'j':
			encoded = ".---";
    387e:	8c e9       	ldi	r24, 0x9C	; 156
    3880:	90 e0       	ldi	r25, 0x00	; 0
    3882:	9b 83       	std	Y+3, r25	; 0x03
    3884:	8a 83       	std	Y+2, r24	; 0x02
    3886:	85 c0       	rjmp	.+266    	; 0x3992 <convertToMorse+0x39e>
			break;
		case 'k':
			encoded = "-.-";
    3888:	81 ea       	ldi	r24, 0xA1	; 161
    388a:	90 e0       	ldi	r25, 0x00	; 0
    388c:	9b 83       	std	Y+3, r25	; 0x03
    388e:	8a 83       	std	Y+2, r24	; 0x02
    3890:	80 c0       	rjmp	.+256    	; 0x3992 <convertToMorse+0x39e>
			break;
		case 'l':
			encoded = ".-..";
    3892:	85 ea       	ldi	r24, 0xA5	; 165
    3894:	90 e0       	ldi	r25, 0x00	; 0
    3896:	9b 83       	std	Y+3, r25	; 0x03
    3898:	8a 83       	std	Y+2, r24	; 0x02
    389a:	7b c0       	rjmp	.+246    	; 0x3992 <convertToMorse+0x39e>
			break;
		case 'm':
			encoded = "--";
    389c:	8a ea       	ldi	r24, 0xAA	; 170
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	9b 83       	std	Y+3, r25	; 0x03
    38a2:	8a 83       	std	Y+2, r24	; 0x02
    38a4:	76 c0       	rjmp	.+236    	; 0x3992 <convertToMorse+0x39e>
			break;
		case 'n':
			encoded = "-.";
    38a6:	8d ea       	ldi	r24, 0xAD	; 173
    38a8:	90 e0       	ldi	r25, 0x00	; 0
    38aa:	9b 83       	std	Y+3, r25	; 0x03
    38ac:	8a 83       	std	Y+2, r24	; 0x02
    38ae:	71 c0       	rjmp	.+226    	; 0x3992 <convertToMorse+0x39e>
			break;
		case 'o':
			encoded = "---";
    38b0:	80 eb       	ldi	r24, 0xB0	; 176
    38b2:	90 e0       	ldi	r25, 0x00	; 0
    38b4:	9b 83       	std	Y+3, r25	; 0x03
    38b6:	8a 83       	std	Y+2, r24	; 0x02
    38b8:	6c c0       	rjmp	.+216    	; 0x3992 <convertToMorse+0x39e>
			break;
		case 'p':
			encoded = ".--.";
    38ba:	84 eb       	ldi	r24, 0xB4	; 180
    38bc:	90 e0       	ldi	r25, 0x00	; 0
    38be:	9b 83       	std	Y+3, r25	; 0x03
    38c0:	8a 83       	std	Y+2, r24	; 0x02
    38c2:	67 c0       	rjmp	.+206    	; 0x3992 <convertToMorse+0x39e>
			break;
		case 'q':
			encoded = "--.-";
    38c4:	89 eb       	ldi	r24, 0xB9	; 185
    38c6:	90 e0       	ldi	r25, 0x00	; 0
    38c8:	9b 83       	std	Y+3, r25	; 0x03
    38ca:	8a 83       	std	Y+2, r24	; 0x02
    38cc:	62 c0       	rjmp	.+196    	; 0x3992 <convertToMorse+0x39e>
			break;
		case 'r':
			encoded = ".-.";
    38ce:	8e eb       	ldi	r24, 0xBE	; 190
    38d0:	90 e0       	ldi	r25, 0x00	; 0
    38d2:	9b 83       	std	Y+3, r25	; 0x03
    38d4:	8a 83       	std	Y+2, r24	; 0x02
    38d6:	5d c0       	rjmp	.+186    	; 0x3992 <convertToMorse+0x39e>
			break;
		case 's':
			encoded = "...";
    38d8:	82 ec       	ldi	r24, 0xC2	; 194
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	9b 83       	std	Y+3, r25	; 0x03
    38de:	8a 83       	std	Y+2, r24	; 0x02
    38e0:	58 c0       	rjmp	.+176    	; 0x3992 <convertToMorse+0x39e>
			break;
		case 't':
			encoded = "-";
    38e2:	86 ec       	ldi	r24, 0xC6	; 198
    38e4:	90 e0       	ldi	r25, 0x00	; 0
    38e6:	9b 83       	std	Y+3, r25	; 0x03
    38e8:	8a 83       	std	Y+2, r24	; 0x02
    38ea:	53 c0       	rjmp	.+166    	; 0x3992 <convertToMorse+0x39e>
			break;
		case 'u':
			encoded = "..-";
    38ec:	88 ec       	ldi	r24, 0xC8	; 200
    38ee:	90 e0       	ldi	r25, 0x00	; 0
    38f0:	9b 83       	std	Y+3, r25	; 0x03
    38f2:	8a 83       	std	Y+2, r24	; 0x02
    38f4:	4e c0       	rjmp	.+156    	; 0x3992 <convertToMorse+0x39e>
			break;
		case 'v':
			encoded = "...-";
    38f6:	8c ec       	ldi	r24, 0xCC	; 204
    38f8:	90 e0       	ldi	r25, 0x00	; 0
    38fa:	9b 83       	std	Y+3, r25	; 0x03
    38fc:	8a 83       	std	Y+2, r24	; 0x02
    38fe:	49 c0       	rjmp	.+146    	; 0x3992 <convertToMorse+0x39e>
			break;
		case 'w':
			encoded = ".--";
    3900:	81 ed       	ldi	r24, 0xD1	; 209
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	9b 83       	std	Y+3, r25	; 0x03
    3906:	8a 83       	std	Y+2, r24	; 0x02
    3908:	44 c0       	rjmp	.+136    	; 0x3992 <convertToMorse+0x39e>
			break;
		case 'x':
			encoded = "-..-";
    390a:	85 ed       	ldi	r24, 0xD5	; 213
    390c:	90 e0       	ldi	r25, 0x00	; 0
    390e:	9b 83       	std	Y+3, r25	; 0x03
    3910:	8a 83       	std	Y+2, r24	; 0x02
    3912:	3f c0       	rjmp	.+126    	; 0x3992 <convertToMorse+0x39e>
			break;
		case 'y':
			encoded = "-.--";
    3914:	8a ed       	ldi	r24, 0xDA	; 218
    3916:	90 e0       	ldi	r25, 0x00	; 0
    3918:	9b 83       	std	Y+3, r25	; 0x03
    391a:	8a 83       	std	Y+2, r24	; 0x02
    391c:	3a c0       	rjmp	.+116    	; 0x3992 <convertToMorse+0x39e>
			break;
		case 'z':
			encoded = "--..";
    391e:	8f ed       	ldi	r24, 0xDF	; 223
    3920:	90 e0       	ldi	r25, 0x00	; 0
    3922:	9b 83       	std	Y+3, r25	; 0x03
    3924:	8a 83       	std	Y+2, r24	; 0x02
    3926:	35 c0       	rjmp	.+106    	; 0x3992 <convertToMorse+0x39e>
			break;
		case '0':
			encoded = "-----";
    3928:	84 ee       	ldi	r24, 0xE4	; 228
    392a:	90 e0       	ldi	r25, 0x00	; 0
    392c:	9b 83       	std	Y+3, r25	; 0x03
    392e:	8a 83       	std	Y+2, r24	; 0x02
    3930:	30 c0       	rjmp	.+96     	; 0x3992 <convertToMorse+0x39e>
			break;
		case '1':
			encoded = ".----";
    3932:	8a ee       	ldi	r24, 0xEA	; 234
    3934:	90 e0       	ldi	r25, 0x00	; 0
    3936:	9b 83       	std	Y+3, r25	; 0x03
    3938:	8a 83       	std	Y+2, r24	; 0x02
    393a:	2b c0       	rjmp	.+86     	; 0x3992 <convertToMorse+0x39e>
			break;
		case '2':
			encoded = "..---";
    393c:	80 ef       	ldi	r24, 0xF0	; 240
    393e:	90 e0       	ldi	r25, 0x00	; 0
    3940:	9b 83       	std	Y+3, r25	; 0x03
    3942:	8a 83       	std	Y+2, r24	; 0x02
    3944:	26 c0       	rjmp	.+76     	; 0x3992 <convertToMorse+0x39e>
			break;
		case '3':
			encoded = "...--";
    3946:	86 ef       	ldi	r24, 0xF6	; 246
    3948:	90 e0       	ldi	r25, 0x00	; 0
    394a:	9b 83       	std	Y+3, r25	; 0x03
    394c:	8a 83       	std	Y+2, r24	; 0x02
    394e:	21 c0       	rjmp	.+66     	; 0x3992 <convertToMorse+0x39e>
			break;
		case '4':
			encoded = "....-";
    3950:	8c ef       	ldi	r24, 0xFC	; 252
    3952:	90 e0       	ldi	r25, 0x00	; 0
    3954:	9b 83       	std	Y+3, r25	; 0x03
    3956:	8a 83       	std	Y+2, r24	; 0x02
    3958:	1c c0       	rjmp	.+56     	; 0x3992 <convertToMorse+0x39e>
			break;
		case '5':
			encoded = ".....";
    395a:	82 e0       	ldi	r24, 0x02	; 2
    395c:	91 e0       	ldi	r25, 0x01	; 1
    395e:	9b 83       	std	Y+3, r25	; 0x03
    3960:	8a 83       	std	Y+2, r24	; 0x02
    3962:	17 c0       	rjmp	.+46     	; 0x3992 <convertToMorse+0x39e>
			break;
		case '6':
			encoded = "-....";
    3964:	88 e0       	ldi	r24, 0x08	; 8
    3966:	91 e0       	ldi	r25, 0x01	; 1
    3968:	9b 83       	std	Y+3, r25	; 0x03
    396a:	8a 83       	std	Y+2, r24	; 0x02
    396c:	12 c0       	rjmp	.+36     	; 0x3992 <convertToMorse+0x39e>
			break;
		case '7':
			encoded = "--...";
    396e:	8e e0       	ldi	r24, 0x0E	; 14
    3970:	91 e0       	ldi	r25, 0x01	; 1
    3972:	9b 83       	std	Y+3, r25	; 0x03
    3974:	8a 83       	std	Y+2, r24	; 0x02
    3976:	0d c0       	rjmp	.+26     	; 0x3992 <convertToMorse+0x39e>
			break;
		case '8':
			encoded = "---..";
    3978:	84 e1       	ldi	r24, 0x14	; 20
    397a:	91 e0       	ldi	r25, 0x01	; 1
    397c:	9b 83       	std	Y+3, r25	; 0x03
    397e:	8a 83       	std	Y+2, r24	; 0x02
    3980:	08 c0       	rjmp	.+16     	; 0x3992 <convertToMorse+0x39e>
			break;
		case '9':
			encoded = "----.";
    3982:	8a e1       	ldi	r24, 0x1A	; 26
    3984:	91 e0       	ldi	r25, 0x01	; 1
    3986:	9b 83       	std	Y+3, r25	; 0x03
    3988:	8a 83       	std	Y+2, r24	; 0x02
    398a:	03 c0       	rjmp	.+6      	; 0x3992 <convertToMorse+0x39e>
			break;
		default:
			return NON_CONVERTED;
    398c:	31 e0       	ldi	r19, 0x01	; 1
    398e:	3f 83       	std	Y+7, r19	; 0x07
    3990:	2e c0       	rjmp	.+92     	; 0x39ee <convertToMorse+0x3fa>
			break;

	}
	u8 i =0;
    3992:	19 82       	std	Y+1, r1	; 0x01
    3994:	15 c0       	rjmp	.+42     	; 0x39c0 <convertToMorse+0x3cc>
	for(;encoded[i];i++){
		*(pattern+i) = *(encoded+i);
    3996:	89 81       	ldd	r24, Y+1	; 0x01
    3998:	28 2f       	mov	r18, r24
    399a:	30 e0       	ldi	r19, 0x00	; 0
    399c:	8c 81       	ldd	r24, Y+4	; 0x04
    399e:	9d 81       	ldd	r25, Y+5	; 0x05
    39a0:	dc 01       	movw	r26, r24
    39a2:	a2 0f       	add	r26, r18
    39a4:	b3 1f       	adc	r27, r19
    39a6:	89 81       	ldd	r24, Y+1	; 0x01
    39a8:	28 2f       	mov	r18, r24
    39aa:	30 e0       	ldi	r19, 0x00	; 0
    39ac:	8a 81       	ldd	r24, Y+2	; 0x02
    39ae:	9b 81       	ldd	r25, Y+3	; 0x03
    39b0:	fc 01       	movw	r30, r24
    39b2:	e2 0f       	add	r30, r18
    39b4:	f3 1f       	adc	r31, r19
    39b6:	80 81       	ld	r24, Z
    39b8:	8c 93       	st	X, r24
			return NON_CONVERTED;
			break;

	}
	u8 i =0;
	for(;encoded[i];i++){
    39ba:	89 81       	ldd	r24, Y+1	; 0x01
    39bc:	8f 5f       	subi	r24, 0xFF	; 255
    39be:	89 83       	std	Y+1, r24	; 0x01
    39c0:	89 81       	ldd	r24, Y+1	; 0x01
    39c2:	28 2f       	mov	r18, r24
    39c4:	30 e0       	ldi	r19, 0x00	; 0
    39c6:	8a 81       	ldd	r24, Y+2	; 0x02
    39c8:	9b 81       	ldd	r25, Y+3	; 0x03
    39ca:	fc 01       	movw	r30, r24
    39cc:	e2 0f       	add	r30, r18
    39ce:	f3 1f       	adc	r31, r19
    39d0:	80 81       	ld	r24, Z
    39d2:	88 23       	and	r24, r24
    39d4:	01 f7       	brne	.-64     	; 0x3996 <convertToMorse+0x3a2>
		*(pattern+i) = *(encoded+i);
	}
	*(pattern+i) = '\0';
    39d6:	89 81       	ldd	r24, Y+1	; 0x01
    39d8:	28 2f       	mov	r18, r24
    39da:	30 e0       	ldi	r19, 0x00	; 0
    39dc:	8c 81       	ldd	r24, Y+4	; 0x04
    39de:	9d 81       	ldd	r25, Y+5	; 0x05
    39e0:	fc 01       	movw	r30, r24
    39e2:	e2 0f       	add	r30, r18
    39e4:	f3 1f       	adc	r31, r19
    39e6:	10 82       	st	Z, r1
	encoded = NULL;
    39e8:	1b 82       	std	Y+3, r1	; 0x03
    39ea:	1a 82       	std	Y+2, r1	; 0x02
	return CONVERTED;
    39ec:	1f 82       	std	Y+7, r1	; 0x07
    39ee:	8f 81       	ldd	r24, Y+7	; 0x07
}
    39f0:	29 96       	adiw	r28, 0x09	; 9
    39f2:	0f b6       	in	r0, 0x3f	; 63
    39f4:	f8 94       	cli
    39f6:	de bf       	out	0x3e, r29	; 62
    39f8:	0f be       	out	0x3f, r0	; 63
    39fa:	cd bf       	out	0x3d, r28	; 61
    39fc:	cf 91       	pop	r28
    39fe:	df 91       	pop	r29
    3a00:	08 95       	ret

00003a02 <main>:
 *  Created on: ٣٠‏/١١‏/٢٠٢٣
 *      Author: ASHRY
 */
#include "../LIB/math/datatypes.h"
#include "conversion/transmitter/transmiter.h"
int main(){
    3a02:	df 93       	push	r29
    3a04:	cf 93       	push	r28
    3a06:	cd b7       	in	r28, 0x3d	; 61
    3a08:	de b7       	in	r29, 0x3e	; 62
	vid_initProgram();
    3a0a:	0e 94 ae 18 	call	0x315c	; 0x315c <vid_initProgram>
	vid_displayHome();
    3a0e:	0e 94 6f 18 	call	0x30de	; 0x30de <vid_displayHome>
	return 0;
    3a12:	80 e0       	ldi	r24, 0x00	; 0
    3a14:	90 e0       	ldi	r25, 0x00	; 0
}
    3a16:	cf 91       	pop	r28
    3a18:	df 91       	pop	r29
    3a1a:	08 95       	ret

00003a1c <__mulsi3>:
    3a1c:	62 9f       	mul	r22, r18
    3a1e:	d0 01       	movw	r26, r0
    3a20:	73 9f       	mul	r23, r19
    3a22:	f0 01       	movw	r30, r0
    3a24:	82 9f       	mul	r24, r18
    3a26:	e0 0d       	add	r30, r0
    3a28:	f1 1d       	adc	r31, r1
    3a2a:	64 9f       	mul	r22, r20
    3a2c:	e0 0d       	add	r30, r0
    3a2e:	f1 1d       	adc	r31, r1
    3a30:	92 9f       	mul	r25, r18
    3a32:	f0 0d       	add	r31, r0
    3a34:	83 9f       	mul	r24, r19
    3a36:	f0 0d       	add	r31, r0
    3a38:	74 9f       	mul	r23, r20
    3a3a:	f0 0d       	add	r31, r0
    3a3c:	65 9f       	mul	r22, r21
    3a3e:	f0 0d       	add	r31, r0
    3a40:	99 27       	eor	r25, r25
    3a42:	72 9f       	mul	r23, r18
    3a44:	b0 0d       	add	r27, r0
    3a46:	e1 1d       	adc	r30, r1
    3a48:	f9 1f       	adc	r31, r25
    3a4a:	63 9f       	mul	r22, r19
    3a4c:	b0 0d       	add	r27, r0
    3a4e:	e1 1d       	adc	r30, r1
    3a50:	f9 1f       	adc	r31, r25
    3a52:	bd 01       	movw	r22, r26
    3a54:	cf 01       	movw	r24, r30
    3a56:	11 24       	eor	r1, r1
    3a58:	08 95       	ret

00003a5a <__udivmodsi4>:
    3a5a:	a1 e2       	ldi	r26, 0x21	; 33
    3a5c:	1a 2e       	mov	r1, r26
    3a5e:	aa 1b       	sub	r26, r26
    3a60:	bb 1b       	sub	r27, r27
    3a62:	fd 01       	movw	r30, r26
    3a64:	0d c0       	rjmp	.+26     	; 0x3a80 <__udivmodsi4_ep>

00003a66 <__udivmodsi4_loop>:
    3a66:	aa 1f       	adc	r26, r26
    3a68:	bb 1f       	adc	r27, r27
    3a6a:	ee 1f       	adc	r30, r30
    3a6c:	ff 1f       	adc	r31, r31
    3a6e:	a2 17       	cp	r26, r18
    3a70:	b3 07       	cpc	r27, r19
    3a72:	e4 07       	cpc	r30, r20
    3a74:	f5 07       	cpc	r31, r21
    3a76:	20 f0       	brcs	.+8      	; 0x3a80 <__udivmodsi4_ep>
    3a78:	a2 1b       	sub	r26, r18
    3a7a:	b3 0b       	sbc	r27, r19
    3a7c:	e4 0b       	sbc	r30, r20
    3a7e:	f5 0b       	sbc	r31, r21

00003a80 <__udivmodsi4_ep>:
    3a80:	66 1f       	adc	r22, r22
    3a82:	77 1f       	adc	r23, r23
    3a84:	88 1f       	adc	r24, r24
    3a86:	99 1f       	adc	r25, r25
    3a88:	1a 94       	dec	r1
    3a8a:	69 f7       	brne	.-38     	; 0x3a66 <__udivmodsi4_loop>
    3a8c:	60 95       	com	r22
    3a8e:	70 95       	com	r23
    3a90:	80 95       	com	r24
    3a92:	90 95       	com	r25
    3a94:	9b 01       	movw	r18, r22
    3a96:	ac 01       	movw	r20, r24
    3a98:	bd 01       	movw	r22, r26
    3a9a:	cf 01       	movw	r24, r30
    3a9c:	08 95       	ret

00003a9e <__divmodsi4>:
    3a9e:	97 fb       	bst	r25, 7
    3aa0:	09 2e       	mov	r0, r25
    3aa2:	05 26       	eor	r0, r21
    3aa4:	0e d0       	rcall	.+28     	; 0x3ac2 <__divmodsi4_neg1>
    3aa6:	57 fd       	sbrc	r21, 7
    3aa8:	04 d0       	rcall	.+8      	; 0x3ab2 <__divmodsi4_neg2>
    3aaa:	d7 df       	rcall	.-82     	; 0x3a5a <__udivmodsi4>
    3aac:	0a d0       	rcall	.+20     	; 0x3ac2 <__divmodsi4_neg1>
    3aae:	00 1c       	adc	r0, r0
    3ab0:	38 f4       	brcc	.+14     	; 0x3ac0 <__divmodsi4_exit>

00003ab2 <__divmodsi4_neg2>:
    3ab2:	50 95       	com	r21
    3ab4:	40 95       	com	r20
    3ab6:	30 95       	com	r19
    3ab8:	21 95       	neg	r18
    3aba:	3f 4f       	sbci	r19, 0xFF	; 255
    3abc:	4f 4f       	sbci	r20, 0xFF	; 255
    3abe:	5f 4f       	sbci	r21, 0xFF	; 255

00003ac0 <__divmodsi4_exit>:
    3ac0:	08 95       	ret

00003ac2 <__divmodsi4_neg1>:
    3ac2:	f6 f7       	brtc	.-4      	; 0x3ac0 <__divmodsi4_exit>
    3ac4:	90 95       	com	r25
    3ac6:	80 95       	com	r24
    3ac8:	70 95       	com	r23
    3aca:	61 95       	neg	r22
    3acc:	7f 4f       	sbci	r23, 0xFF	; 255
    3ace:	8f 4f       	sbci	r24, 0xFF	; 255
    3ad0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ad2:	08 95       	ret

00003ad4 <__prologue_saves__>:
    3ad4:	2f 92       	push	r2
    3ad6:	3f 92       	push	r3
    3ad8:	4f 92       	push	r4
    3ada:	5f 92       	push	r5
    3adc:	6f 92       	push	r6
    3ade:	7f 92       	push	r7
    3ae0:	8f 92       	push	r8
    3ae2:	9f 92       	push	r9
    3ae4:	af 92       	push	r10
    3ae6:	bf 92       	push	r11
    3ae8:	cf 92       	push	r12
    3aea:	df 92       	push	r13
    3aec:	ef 92       	push	r14
    3aee:	ff 92       	push	r15
    3af0:	0f 93       	push	r16
    3af2:	1f 93       	push	r17
    3af4:	cf 93       	push	r28
    3af6:	df 93       	push	r29
    3af8:	cd b7       	in	r28, 0x3d	; 61
    3afa:	de b7       	in	r29, 0x3e	; 62
    3afc:	ca 1b       	sub	r28, r26
    3afe:	db 0b       	sbc	r29, r27
    3b00:	0f b6       	in	r0, 0x3f	; 63
    3b02:	f8 94       	cli
    3b04:	de bf       	out	0x3e, r29	; 62
    3b06:	0f be       	out	0x3f, r0	; 63
    3b08:	cd bf       	out	0x3d, r28	; 61
    3b0a:	09 94       	ijmp

00003b0c <__epilogue_restores__>:
    3b0c:	2a 88       	ldd	r2, Y+18	; 0x12
    3b0e:	39 88       	ldd	r3, Y+17	; 0x11
    3b10:	48 88       	ldd	r4, Y+16	; 0x10
    3b12:	5f 84       	ldd	r5, Y+15	; 0x0f
    3b14:	6e 84       	ldd	r6, Y+14	; 0x0e
    3b16:	7d 84       	ldd	r7, Y+13	; 0x0d
    3b18:	8c 84       	ldd	r8, Y+12	; 0x0c
    3b1a:	9b 84       	ldd	r9, Y+11	; 0x0b
    3b1c:	aa 84       	ldd	r10, Y+10	; 0x0a
    3b1e:	b9 84       	ldd	r11, Y+9	; 0x09
    3b20:	c8 84       	ldd	r12, Y+8	; 0x08
    3b22:	df 80       	ldd	r13, Y+7	; 0x07
    3b24:	ee 80       	ldd	r14, Y+6	; 0x06
    3b26:	fd 80       	ldd	r15, Y+5	; 0x05
    3b28:	0c 81       	ldd	r16, Y+4	; 0x04
    3b2a:	1b 81       	ldd	r17, Y+3	; 0x03
    3b2c:	aa 81       	ldd	r26, Y+2	; 0x02
    3b2e:	b9 81       	ldd	r27, Y+1	; 0x01
    3b30:	ce 0f       	add	r28, r30
    3b32:	d1 1d       	adc	r29, r1
    3b34:	0f b6       	in	r0, 0x3f	; 63
    3b36:	f8 94       	cli
    3b38:	de bf       	out	0x3e, r29	; 62
    3b3a:	0f be       	out	0x3f, r0	; 63
    3b3c:	cd bf       	out	0x3d, r28	; 61
    3b3e:	ed 01       	movw	r28, r26
    3b40:	08 95       	ret

00003b42 <malloc>:
    3b42:	cf 93       	push	r28
    3b44:	df 93       	push	r29
    3b46:	bc 01       	movw	r22, r24
    3b48:	82 30       	cpi	r24, 0x02	; 2
    3b4a:	91 05       	cpc	r25, r1
    3b4c:	10 f4       	brcc	.+4      	; 0x3b52 <malloc+0x10>
    3b4e:	62 e0       	ldi	r22, 0x02	; 2
    3b50:	70 e0       	ldi	r23, 0x00	; 0
    3b52:	a0 91 4a 02 	lds	r26, 0x024A
    3b56:	b0 91 4b 02 	lds	r27, 0x024B
    3b5a:	ed 01       	movw	r28, r26
    3b5c:	e0 e0       	ldi	r30, 0x00	; 0
    3b5e:	f0 e0       	ldi	r31, 0x00	; 0
    3b60:	40 e0       	ldi	r20, 0x00	; 0
    3b62:	50 e0       	ldi	r21, 0x00	; 0
    3b64:	21 c0       	rjmp	.+66     	; 0x3ba8 <malloc+0x66>
    3b66:	88 81       	ld	r24, Y
    3b68:	99 81       	ldd	r25, Y+1	; 0x01
    3b6a:	86 17       	cp	r24, r22
    3b6c:	97 07       	cpc	r25, r23
    3b6e:	69 f4       	brne	.+26     	; 0x3b8a <malloc+0x48>
    3b70:	8a 81       	ldd	r24, Y+2	; 0x02
    3b72:	9b 81       	ldd	r25, Y+3	; 0x03
    3b74:	30 97       	sbiw	r30, 0x00	; 0
    3b76:	19 f0       	breq	.+6      	; 0x3b7e <malloc+0x3c>
    3b78:	93 83       	std	Z+3, r25	; 0x03
    3b7a:	82 83       	std	Z+2, r24	; 0x02
    3b7c:	04 c0       	rjmp	.+8      	; 0x3b86 <malloc+0x44>
    3b7e:	90 93 4b 02 	sts	0x024B, r25
    3b82:	80 93 4a 02 	sts	0x024A, r24
    3b86:	fe 01       	movw	r30, r28
    3b88:	34 c0       	rjmp	.+104    	; 0x3bf2 <malloc+0xb0>
    3b8a:	68 17       	cp	r22, r24
    3b8c:	79 07       	cpc	r23, r25
    3b8e:	38 f4       	brcc	.+14     	; 0x3b9e <malloc+0x5c>
    3b90:	41 15       	cp	r20, r1
    3b92:	51 05       	cpc	r21, r1
    3b94:	19 f0       	breq	.+6      	; 0x3b9c <malloc+0x5a>
    3b96:	84 17       	cp	r24, r20
    3b98:	95 07       	cpc	r25, r21
    3b9a:	08 f4       	brcc	.+2      	; 0x3b9e <malloc+0x5c>
    3b9c:	ac 01       	movw	r20, r24
    3b9e:	fe 01       	movw	r30, r28
    3ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ba2:	9b 81       	ldd	r25, Y+3	; 0x03
    3ba4:	9c 01       	movw	r18, r24
    3ba6:	e9 01       	movw	r28, r18
    3ba8:	20 97       	sbiw	r28, 0x00	; 0
    3baa:	e9 f6       	brne	.-70     	; 0x3b66 <malloc+0x24>
    3bac:	41 15       	cp	r20, r1
    3bae:	51 05       	cpc	r21, r1
    3bb0:	a9 f1       	breq	.+106    	; 0x3c1c <malloc+0xda>
    3bb2:	ca 01       	movw	r24, r20
    3bb4:	86 1b       	sub	r24, r22
    3bb6:	97 0b       	sbc	r25, r23
    3bb8:	04 97       	sbiw	r24, 0x04	; 4
    3bba:	08 f4       	brcc	.+2      	; 0x3bbe <malloc+0x7c>
    3bbc:	ba 01       	movw	r22, r20
    3bbe:	e0 e0       	ldi	r30, 0x00	; 0
    3bc0:	f0 e0       	ldi	r31, 0x00	; 0
    3bc2:	2a c0       	rjmp	.+84     	; 0x3c18 <malloc+0xd6>
    3bc4:	8d 91       	ld	r24, X+
    3bc6:	9c 91       	ld	r25, X
    3bc8:	11 97       	sbiw	r26, 0x01	; 1
    3bca:	84 17       	cp	r24, r20
    3bcc:	95 07       	cpc	r25, r21
    3bce:	f9 f4       	brne	.+62     	; 0x3c0e <malloc+0xcc>
    3bd0:	64 17       	cp	r22, r20
    3bd2:	75 07       	cpc	r23, r21
    3bd4:	81 f4       	brne	.+32     	; 0x3bf6 <malloc+0xb4>
    3bd6:	12 96       	adiw	r26, 0x02	; 2
    3bd8:	8d 91       	ld	r24, X+
    3bda:	9c 91       	ld	r25, X
    3bdc:	13 97       	sbiw	r26, 0x03	; 3
    3bde:	30 97       	sbiw	r30, 0x00	; 0
    3be0:	19 f0       	breq	.+6      	; 0x3be8 <malloc+0xa6>
    3be2:	93 83       	std	Z+3, r25	; 0x03
    3be4:	82 83       	std	Z+2, r24	; 0x02
    3be6:	04 c0       	rjmp	.+8      	; 0x3bf0 <malloc+0xae>
    3be8:	90 93 4b 02 	sts	0x024B, r25
    3bec:	80 93 4a 02 	sts	0x024A, r24
    3bf0:	fd 01       	movw	r30, r26
    3bf2:	32 96       	adiw	r30, 0x02	; 2
    3bf4:	4f c0       	rjmp	.+158    	; 0x3c94 <malloc+0x152>
    3bf6:	ca 01       	movw	r24, r20
    3bf8:	86 1b       	sub	r24, r22
    3bfa:	97 0b       	sbc	r25, r23
    3bfc:	fd 01       	movw	r30, r26
    3bfe:	e8 0f       	add	r30, r24
    3c00:	f9 1f       	adc	r31, r25
    3c02:	61 93       	st	Z+, r22
    3c04:	71 93       	st	Z+, r23
    3c06:	02 97       	sbiw	r24, 0x02	; 2
    3c08:	8d 93       	st	X+, r24
    3c0a:	9c 93       	st	X, r25
    3c0c:	43 c0       	rjmp	.+134    	; 0x3c94 <malloc+0x152>
    3c0e:	fd 01       	movw	r30, r26
    3c10:	82 81       	ldd	r24, Z+2	; 0x02
    3c12:	93 81       	ldd	r25, Z+3	; 0x03
    3c14:	9c 01       	movw	r18, r24
    3c16:	d9 01       	movw	r26, r18
    3c18:	10 97       	sbiw	r26, 0x00	; 0
    3c1a:	a1 f6       	brne	.-88     	; 0x3bc4 <malloc+0x82>
    3c1c:	80 91 48 02 	lds	r24, 0x0248
    3c20:	90 91 49 02 	lds	r25, 0x0249
    3c24:	89 2b       	or	r24, r25
    3c26:	41 f4       	brne	.+16     	; 0x3c38 <malloc+0xf6>
    3c28:	80 91 2a 02 	lds	r24, 0x022A
    3c2c:	90 91 2b 02 	lds	r25, 0x022B
    3c30:	90 93 49 02 	sts	0x0249, r25
    3c34:	80 93 48 02 	sts	0x0248, r24
    3c38:	40 91 2c 02 	lds	r20, 0x022C
    3c3c:	50 91 2d 02 	lds	r21, 0x022D
    3c40:	41 15       	cp	r20, r1
    3c42:	51 05       	cpc	r21, r1
    3c44:	41 f4       	brne	.+16     	; 0x3c56 <malloc+0x114>
    3c46:	4d b7       	in	r20, 0x3d	; 61
    3c48:	5e b7       	in	r21, 0x3e	; 62
    3c4a:	80 91 28 02 	lds	r24, 0x0228
    3c4e:	90 91 29 02 	lds	r25, 0x0229
    3c52:	48 1b       	sub	r20, r24
    3c54:	59 0b       	sbc	r21, r25
    3c56:	20 91 48 02 	lds	r18, 0x0248
    3c5a:	30 91 49 02 	lds	r19, 0x0249
    3c5e:	24 17       	cp	r18, r20
    3c60:	35 07       	cpc	r19, r21
    3c62:	b0 f4       	brcc	.+44     	; 0x3c90 <malloc+0x14e>
    3c64:	ca 01       	movw	r24, r20
    3c66:	82 1b       	sub	r24, r18
    3c68:	93 0b       	sbc	r25, r19
    3c6a:	86 17       	cp	r24, r22
    3c6c:	97 07       	cpc	r25, r23
    3c6e:	80 f0       	brcs	.+32     	; 0x3c90 <malloc+0x14e>
    3c70:	ab 01       	movw	r20, r22
    3c72:	4e 5f       	subi	r20, 0xFE	; 254
    3c74:	5f 4f       	sbci	r21, 0xFF	; 255
    3c76:	84 17       	cp	r24, r20
    3c78:	95 07       	cpc	r25, r21
    3c7a:	50 f0       	brcs	.+20     	; 0x3c90 <malloc+0x14e>
    3c7c:	42 0f       	add	r20, r18
    3c7e:	53 1f       	adc	r21, r19
    3c80:	50 93 49 02 	sts	0x0249, r21
    3c84:	40 93 48 02 	sts	0x0248, r20
    3c88:	f9 01       	movw	r30, r18
    3c8a:	61 93       	st	Z+, r22
    3c8c:	71 93       	st	Z+, r23
    3c8e:	02 c0       	rjmp	.+4      	; 0x3c94 <malloc+0x152>
    3c90:	e0 e0       	ldi	r30, 0x00	; 0
    3c92:	f0 e0       	ldi	r31, 0x00	; 0
    3c94:	cf 01       	movw	r24, r30
    3c96:	df 91       	pop	r29
    3c98:	cf 91       	pop	r28
    3c9a:	08 95       	ret

00003c9c <free>:
    3c9c:	cf 93       	push	r28
    3c9e:	df 93       	push	r29
    3ca0:	00 97       	sbiw	r24, 0x00	; 0
    3ca2:	09 f4       	brne	.+2      	; 0x3ca6 <free+0xa>
    3ca4:	50 c0       	rjmp	.+160    	; 0x3d46 <free+0xaa>
    3ca6:	ec 01       	movw	r28, r24
    3ca8:	22 97       	sbiw	r28, 0x02	; 2
    3caa:	1b 82       	std	Y+3, r1	; 0x03
    3cac:	1a 82       	std	Y+2, r1	; 0x02
    3cae:	a0 91 4a 02 	lds	r26, 0x024A
    3cb2:	b0 91 4b 02 	lds	r27, 0x024B
    3cb6:	10 97       	sbiw	r26, 0x00	; 0
    3cb8:	09 f1       	breq	.+66     	; 0x3cfc <free+0x60>
    3cba:	40 e0       	ldi	r20, 0x00	; 0
    3cbc:	50 e0       	ldi	r21, 0x00	; 0
    3cbe:	ac 17       	cp	r26, r28
    3cc0:	bd 07       	cpc	r27, r29
    3cc2:	08 f1       	brcs	.+66     	; 0x3d06 <free+0x6a>
    3cc4:	bb 83       	std	Y+3, r27	; 0x03
    3cc6:	aa 83       	std	Y+2, r26	; 0x02
    3cc8:	fe 01       	movw	r30, r28
    3cca:	21 91       	ld	r18, Z+
    3ccc:	31 91       	ld	r19, Z+
    3cce:	e2 0f       	add	r30, r18
    3cd0:	f3 1f       	adc	r31, r19
    3cd2:	ae 17       	cp	r26, r30
    3cd4:	bf 07       	cpc	r27, r31
    3cd6:	79 f4       	brne	.+30     	; 0x3cf6 <free+0x5a>
    3cd8:	8d 91       	ld	r24, X+
    3cda:	9c 91       	ld	r25, X
    3cdc:	11 97       	sbiw	r26, 0x01	; 1
    3cde:	28 0f       	add	r18, r24
    3ce0:	39 1f       	adc	r19, r25
    3ce2:	2e 5f       	subi	r18, 0xFE	; 254
    3ce4:	3f 4f       	sbci	r19, 0xFF	; 255
    3ce6:	39 83       	std	Y+1, r19	; 0x01
    3ce8:	28 83       	st	Y, r18
    3cea:	12 96       	adiw	r26, 0x02	; 2
    3cec:	8d 91       	ld	r24, X+
    3cee:	9c 91       	ld	r25, X
    3cf0:	13 97       	sbiw	r26, 0x03	; 3
    3cf2:	9b 83       	std	Y+3, r25	; 0x03
    3cf4:	8a 83       	std	Y+2, r24	; 0x02
    3cf6:	41 15       	cp	r20, r1
    3cf8:	51 05       	cpc	r21, r1
    3cfa:	71 f4       	brne	.+28     	; 0x3d18 <free+0x7c>
    3cfc:	d0 93 4b 02 	sts	0x024B, r29
    3d00:	c0 93 4a 02 	sts	0x024A, r28
    3d04:	20 c0       	rjmp	.+64     	; 0x3d46 <free+0xaa>
    3d06:	12 96       	adiw	r26, 0x02	; 2
    3d08:	8d 91       	ld	r24, X+
    3d0a:	9c 91       	ld	r25, X
    3d0c:	13 97       	sbiw	r26, 0x03	; 3
    3d0e:	ad 01       	movw	r20, r26
    3d10:	00 97       	sbiw	r24, 0x00	; 0
    3d12:	11 f0       	breq	.+4      	; 0x3d18 <free+0x7c>
    3d14:	dc 01       	movw	r26, r24
    3d16:	d3 cf       	rjmp	.-90     	; 0x3cbe <free+0x22>
    3d18:	fa 01       	movw	r30, r20
    3d1a:	d3 83       	std	Z+3, r29	; 0x03
    3d1c:	c2 83       	std	Z+2, r28	; 0x02
    3d1e:	21 91       	ld	r18, Z+
    3d20:	31 91       	ld	r19, Z+
    3d22:	e2 0f       	add	r30, r18
    3d24:	f3 1f       	adc	r31, r19
    3d26:	ce 17       	cp	r28, r30
    3d28:	df 07       	cpc	r29, r31
    3d2a:	69 f4       	brne	.+26     	; 0x3d46 <free+0xaa>
    3d2c:	88 81       	ld	r24, Y
    3d2e:	99 81       	ldd	r25, Y+1	; 0x01
    3d30:	28 0f       	add	r18, r24
    3d32:	39 1f       	adc	r19, r25
    3d34:	2e 5f       	subi	r18, 0xFE	; 254
    3d36:	3f 4f       	sbci	r19, 0xFF	; 255
    3d38:	fa 01       	movw	r30, r20
    3d3a:	31 83       	std	Z+1, r19	; 0x01
    3d3c:	20 83       	st	Z, r18
    3d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d40:	9b 81       	ldd	r25, Y+3	; 0x03
    3d42:	93 83       	std	Z+3, r25	; 0x03
    3d44:	82 83       	std	Z+2, r24	; 0x02
    3d46:	df 91       	pop	r29
    3d48:	cf 91       	pop	r28
    3d4a:	08 95       	ret

00003d4c <_exit>:
    3d4c:	f8 94       	cli

00003d4e <__stop_program>:
    3d4e:	ff cf       	rjmp	.-2      	; 0x3d4e <__stop_program>
